
Lab2_UART_to_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bdc  08005bdc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000028  08005c0c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005c0c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f66  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239c  00000000  00000000  00031fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00034360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00035330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266c0  00000000  00000000  00036228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124e1  00000000  00000000  0005c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f09b4  00000000  00000000  0006edc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f77d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  0015f7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b74 	.word	0x08005b74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005b74 	.word	0x08005b74

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007f8:	f000 b974 	b.w	8000ae4 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468e      	mov	lr, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d14d      	bne.n	80008be <__udivmoddi4+0xaa>
 8000822:	428a      	cmp	r2, r1
 8000824:	4694      	mov	ip, r2
 8000826:	d969      	bls.n	80008fc <__udivmoddi4+0xe8>
 8000828:	fab2 f282 	clz	r2, r2
 800082c:	b152      	cbz	r2, 8000844 <__udivmoddi4+0x30>
 800082e:	fa01 f302 	lsl.w	r3, r1, r2
 8000832:	f1c2 0120 	rsb	r1, r2, #32
 8000836:	fa20 f101 	lsr.w	r1, r0, r1
 800083a:	fa0c fc02 	lsl.w	ip, ip, r2
 800083e:	ea41 0e03 	orr.w	lr, r1, r3
 8000842:	4094      	lsls	r4, r2
 8000844:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000848:	0c21      	lsrs	r1, r4, #16
 800084a:	fbbe f6f8 	udiv	r6, lr, r8
 800084e:	fa1f f78c 	uxth.w	r7, ip
 8000852:	fb08 e316 	mls	r3, r8, r6, lr
 8000856:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800085a:	fb06 f107 	mul.w	r1, r6, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d90a      	bls.n	8000878 <__udivmoddi4+0x64>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800086a:	f080 811f 	bcs.w	8000aac <__udivmoddi4+0x298>
 800086e:	4299      	cmp	r1, r3
 8000870:	f240 811c 	bls.w	8000aac <__udivmoddi4+0x298>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	1a5b      	subs	r3, r3, r1
 800087a:	b2a4      	uxth	r4, r4
 800087c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000880:	fb08 3310 	mls	r3, r8, r0, r3
 8000884:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000888:	fb00 f707 	mul.w	r7, r0, r7
 800088c:	42a7      	cmp	r7, r4
 800088e:	d90a      	bls.n	80008a6 <__udivmoddi4+0x92>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000898:	f080 810a 	bcs.w	8000ab0 <__udivmoddi4+0x29c>
 800089c:	42a7      	cmp	r7, r4
 800089e:	f240 8107 	bls.w	8000ab0 <__udivmoddi4+0x29c>
 80008a2:	4464      	add	r4, ip
 80008a4:	3802      	subs	r0, #2
 80008a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008aa:	1be4      	subs	r4, r4, r7
 80008ac:	2600      	movs	r6, #0
 80008ae:	b11d      	cbz	r5, 80008b8 <__udivmoddi4+0xa4>
 80008b0:	40d4      	lsrs	r4, r2
 80008b2:	2300      	movs	r3, #0
 80008b4:	e9c5 4300 	strd	r4, r3, [r5]
 80008b8:	4631      	mov	r1, r6
 80008ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0xc2>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80ef 	beq.w	8000aa6 <__udivmoddi4+0x292>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x160>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0xd4>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80f9 	bhi.w	8000ada <__udivmoddi4+0x2c6>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0303 	sbc.w	r3, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	469e      	mov	lr, r3
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0e0      	beq.n	80008b8 <__udivmoddi4+0xa4>
 80008f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008fa:	e7dd      	b.n	80008b8 <__udivmoddi4+0xa4>
 80008fc:	b902      	cbnz	r2, 8000900 <__udivmoddi4+0xec>
 80008fe:	deff      	udf	#255	; 0xff
 8000900:	fab2 f282 	clz	r2, r2
 8000904:	2a00      	cmp	r2, #0
 8000906:	f040 8092 	bne.w	8000a2e <__udivmoddi4+0x21a>
 800090a:	eba1 010c 	sub.w	r1, r1, ip
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2601      	movs	r6, #1
 8000918:	0c20      	lsrs	r0, r4, #16
 800091a:	fbb1 f3f7 	udiv	r3, r1, r7
 800091e:	fb07 1113 	mls	r1, r7, r3, r1
 8000922:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000926:	fb0e f003 	mul.w	r0, lr, r3
 800092a:	4288      	cmp	r0, r1
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x12c>
 800092e:	eb1c 0101 	adds.w	r1, ip, r1
 8000932:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x12a>
 8000938:	4288      	cmp	r0, r1
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2c0>
 800093e:	4643      	mov	r3, r8
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f7 	udiv	r0, r1, r7
 8000948:	fb07 1110 	mls	r1, r7, r0, r1
 800094c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x156>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x154>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2ca>
 8000968:	4608      	mov	r0, r1
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000972:	e79c      	b.n	80008ae <__udivmoddi4+0x9a>
 8000974:	f1c6 0720 	rsb	r7, r6, #32
 8000978:	40b3      	lsls	r3, r6
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa20 f407 	lsr.w	r4, r0, r7
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	431c      	orrs	r4, r3
 800098c:	40f9      	lsrs	r1, r7
 800098e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000992:	fa00 f306 	lsl.w	r3, r0, r6
 8000996:	fbb1 f8f9 	udiv	r8, r1, r9
 800099a:	0c20      	lsrs	r0, r4, #16
 800099c:	fa1f fe8c 	uxth.w	lr, ip
 80009a0:	fb09 1118 	mls	r1, r9, r8, r1
 80009a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009a8:	fb08 f00e 	mul.w	r0, r8, lr
 80009ac:	4288      	cmp	r0, r1
 80009ae:	fa02 f206 	lsl.w	r2, r2, r6
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b8>
 80009b4:	eb1c 0101 	adds.w	r1, ip, r1
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2bc>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2bc>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	1a09      	subs	r1, r1, r0
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009d4:	fb09 1110 	mls	r1, r9, r0, r1
 80009d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	458e      	cmp	lr, r1
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1e2>
 80009e4:	eb1c 0101 	adds.w	r1, ip, r1
 80009e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2b4>
 80009ee:	458e      	cmp	lr, r1
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2b4>
 80009f2:	3802      	subs	r0, #2
 80009f4:	4461      	add	r1, ip
 80009f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009fa:	fba0 9402 	umull	r9, r4, r0, r2
 80009fe:	eba1 010e 	sub.w	r1, r1, lr
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46a6      	mov	lr, r4
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x2a4>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a0c:	b15d      	cbz	r5, 8000a26 <__udivmoddi4+0x212>
 8000a0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a12:	eb61 010e 	sbc.w	r1, r1, lr
 8000a16:	fa01 f707 	lsl.w	r7, r1, r7
 8000a1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a1e:	40f1      	lsrs	r1, r6
 8000a20:	431f      	orrs	r7, r3
 8000a22:	e9c5 7100 	strd	r7, r1, [r5]
 8000a26:	2600      	movs	r6, #0
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	40d8      	lsrs	r0, r3
 8000a34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a38:	fa21 f303 	lsr.w	r3, r1, r3
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	4301      	orrs	r1, r0
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a50:	0c0b      	lsrs	r3, r1, #16
 8000a52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a56:	fb00 f60e 	mul.w	r6, r0, lr
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x260>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b8>
 8000a6c:	429e      	cmp	r6, r3
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b8>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1b9b      	subs	r3, r3, r6
 8000a76:	b289      	uxth	r1, r1
 8000a78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a84:	fb06 f30e 	mul.w	r3, r6, lr
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x28a>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a9a:	3e02      	subs	r6, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	1ac9      	subs	r1, r1, r3
 8000aa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0x104>
 8000aa6:	462e      	mov	r6, r5
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e705      	b.n	80008b8 <__udivmoddi4+0xa4>
 8000aac:	4606      	mov	r6, r0
 8000aae:	e6e3      	b.n	8000878 <__udivmoddi4+0x64>
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	e6f8      	b.n	80008a6 <__udivmoddi4+0x92>
 8000ab4:	454b      	cmp	r3, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f8>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f8>
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x28a>
 8000ac8:	4620      	mov	r0, r4
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1e2>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b8>
 8000ad4:	3b02      	subs	r3, #2
 8000ad6:	4461      	add	r1, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x12c>
 8000ada:	4630      	mov	r0, r6
 8000adc:	e709      	b.n	80008f2 <__udivmoddi4+0xde>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x156>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f000 fc30 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f820 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f94c 	bl	8000d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 f91a 	bl	8000d30 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000afc:	f000 f8e8 	bl	8000cd0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000b00:	f000 f86e 	bl	8000be0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4907      	ldr	r1, [pc, #28]	; (8000b24 <main+0x3c>)
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <main+0x40>)
 8000b0a:	f003 fcbd 	bl	8004488 <HAL_UART_Receive_IT>

  //HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
  HAL_UART_Transmit_IT(&huart1, txData, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <main+0x44>)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <main+0x40>)
 8000b14:	f003 fc4a 	bl	80043ac <HAL_UART_Transmit_IT>

  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1);//Start the PWM Signal
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <main+0x48>)
 8000b1c:	f002 fbc6 	bl	80032ac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8000b20:	e7fe      	b.n	8000b20 <main+0x38>
 8000b22:	bf00      	nop
 8000b24:	20000198 	.word	0x20000198
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000044 	.word	0x20000044

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b096      	sub	sp, #88	; 0x58
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	2244      	movs	r2, #68	; 0x44
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 f80e 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b5a:	f000 ffcd 	bl	8001af8 <HAL_PWREx_ControlVoltageScaling>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b64:	f000 fa4c 	bl	8001000 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b68:	f000 ffa8 	bl	8001abc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <SystemClock_Config+0xa8>)
 8000b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b72:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <SystemClock_Config+0xa8>)
 8000b74:	f023 0318 	bic.w	r3, r3, #24
 8000b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b8c:	2360      	movs	r3, #96	; 0x60
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 f803 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ba4:	f000 fa2c 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
 8000baa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fbcb 	bl	800235c <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bcc:	f000 fa18 	bl	8001000 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bd0:	f002 f8d2 	bl	8002d78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bd4:	bf00      	nop
 8000bd6:	3758      	adds	r7, #88	; 0x58
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c1c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c3e:	f002 fa7d 	bl	800313c <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c48:	f000 f9da 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c5a:	f002 fdd7 	bl	800380c <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c64:	f000 f9cc 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c6a:	f002 fabe 	bl	80031ea <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c74:	f000 f9c4 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000c88:	f003 faba 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c92:	f000 f9b5 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	4619      	mov	r1, r3
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000cb0:	f002 fc98 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000cba:	f000 f9a1 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM2_Init+0xec>)
 8000cc0:	f000 f9e6 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000cc4:	bf00      	nop
 8000cc6:	3738      	adds	r7, #56	; 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000044 	.word	0x20000044

08000cd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_USART1_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d14:	f003 fafc 	bl	8004310 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f000 f96f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000090 	.word	0x20000090
 8000d2c:	40013800 	.word	0x40013800

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_USART2_UART_Init+0x5c>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d74:	f003 facc 	bl	8004310 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f93f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000114 	.word	0x20000114
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_GPIO_Init+0x9c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_GPIO_Init+0xa0>)
 8000e1e:	f000 fca3 	bl	8001768 <HAL_GPIO_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000800 	.word	0x48000800
 8000e34:	00000000 	.word	0x00000000

08000e38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b098      	sub	sp, #96	; 0x60
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

	//Re-enable UART RX interrupt
	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
	HAL_UART_Receive_IT(&huart1, rxData, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	4965      	ldr	r1, [pc, #404]	; (8000fd8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000e44:	4865      	ldr	r0, [pc, #404]	; (8000fdc <HAL_UART_RxCpltCallback+0x1a4>)
 8000e46:	f003 fb1f 	bl	8004488 <HAL_UART_Receive_IT>
//	if(rxData[0] == '1'){
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	}


	if (rxData[0] == 'u'){//Increase Tempo
 8000e4a:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b75      	cmp	r3, #117	; 0x75
 8000e50:	d145      	bne.n	8000ede <HAL_UART_RxCpltCallback+0xa6>
		//Increase blinking tempo by 2 bpm (0.033 Hz)
		currPeriod -= (basePeriod * 0.033);
 8000e52:	4b63      	ldr	r3, [pc, #396]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc32 	bl	80006c0 <__aeabi_i2d>
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	460d      	mov	r5, r1
 8000e60:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fc2b 	bl	80006c0 <__aeabi_i2d>
 8000e6a:	a359      	add	r3, pc, #356	; (adr r3, 8000fd0 <HAL_UART_RxCpltCallback+0x198>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff f9aa 	bl	80001c8 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fad2 	bl	8000424 <__aeabi_dsub>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fc84 	bl	8000794 <__aeabi_d2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000e90:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Stop( &htim2, TIM_CHANNEL_1);	//Stop the PWM Signal
 8000e92:	2100      	movs	r1, #0
 8000e94:	4854      	ldr	r0, [pc, #336]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000e96:	f002 fb0f 	bl	80034b8 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_AUTORELOAD(&htim2, currPeriod);
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea4:	4b4e      	ldr	r3, [pc, #312]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000eac:	60da      	str	r2, [r3, #12]
		TIM_OC_InitTypeDef sConfigOC;
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eae:	2360      	movs	r3, #96	; 0x60
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
		sConfigOC.Pulse = currPeriod / 2;
 8000eb2:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	0fda      	lsrs	r2, r3, #31
 8000eb8:	4413      	add	r3, r2
 8000eba:	105b      	asrs	r3, r3, #1
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000ec6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ed0:	f002 fb88 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1);//Restart the PWM Signal
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4844      	ldr	r0, [pc, #272]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ed8:	f002 f9e8 	bl	80032ac <HAL_TIM_PWM_Start>


	//ECHO TEST
	//HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
    //HAL_UART_Transmit_IT(&huart1, rxData, 1);
}
 8000edc:	e072      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x18c>
	}else if (rxData[0] == 'd'){//Decrease Tempo
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d145      	bne.n	8000f72 <HAL_UART_RxCpltCallback+0x13a>
		currPeriod += (basePeriod * 0.033);
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fbe8 	bl	80006c0 <__aeabi_i2d>
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fbe1 	bl	80006c0 <__aeabi_i2d>
 8000efe:	a334      	add	r3, pc, #208	; (adr r3, 8000fd0 <HAL_UART_RxCpltCallback+0x198>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff f960 	bl	80001c8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	4629      	mov	r1, r5
 8000f10:	f7ff fa8a 	bl	8000428 <__adddf3>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fc3a 	bl	8000794 <__aeabi_d2iz>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000f24:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Stop( &htim2, TIM_CHANNEL_1);	//Stop the PWM Signal
 8000f26:	2100      	movs	r1, #0
 8000f28:	482f      	ldr	r0, [pc, #188]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f2a:	f002 fac5 	bl	80034b8 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_AUTORELOAD(&htim2, currPeriod);
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f40:	60da      	str	r2, [r3, #12]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfigOC.Pulse = currPeriod/2;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	0fda      	lsrs	r2, r3, #31
 8000f4c:	4413      	add	r3, r2
 8000f4e:	105b      	asrs	r3, r3, #1
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4821      	ldr	r0, [pc, #132]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f64:	f002 fb3e 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1);//Restart the PWM Signal
 8000f68:	2100      	movs	r1, #0
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f6c:	f002 f99e 	bl	80032ac <HAL_TIM_PWM_Start>
}
 8000f70:	e028      	b.n	8000fc4 <HAL_UART_RxCpltCallback+0x18c>
	}else if(rxData[0] == 'r'){
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b72      	cmp	r3, #114	; 0x72
 8000f78:	d124      	bne.n	8000fc4 <HAL_UART_RxCpltCallback+0x18c>
		HAL_TIM_PWM_Stop( &htim2, TIM_CHANNEL_1);	//Stop the PWM Signal
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f7e:	f002 fa9b 	bl	80034b8 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_AUTORELOAD(&htim2, basePeriod);
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f94:	60da      	str	r2, [r3, #12]
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	60fb      	str	r3, [r7, #12]
		sConfigOC.Pulse = basePeriod / 2;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0fda      	lsrs	r2, r3, #31
 8000fa0:	4413      	add	r3, r2
 8000fa2:	105b      	asrs	r3, r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fb8:	f002 fb14 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1);//Restart the PWM Signal
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fc0:	f002 f974 	bl	80032ac <HAL_TIM_PWM_Start>
}
 8000fc4:	bf00      	nop
 8000fc6:	3760      	adds	r7, #96	; 0x60
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	4189374c 	.word	0x4189374c
 8000fd4:	3fa0e560 	.word	0x3fa0e560
 8000fd8:	20000198 	.word	0x20000198
 8000fdc:	20000090 	.word	0x20000090
 8000fe0:	20000018 	.word	0x20000018
 8000fe4:	20000014 	.word	0x20000014
 8000fe8:	20000044 	.word	0x20000044

08000fec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	//Do nothing
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	; 0x60
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x44>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d10b      	bne.n	800107e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b0:	d11c      	bne.n	80010ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ca:	2320      	movs	r3, #32
 80010cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 fb3e 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ae      	sub	sp, #184	; 0xb8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2288      	movs	r2, #136	; 0x88
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f004 fd23 	bl	8005b64 <memset>
  if(huart->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_UART_MspInit+0x158>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d145      	bne.n	80011b4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800112c:	2300      	movs	r3, #0
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fb35 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001140:	f7ff ff5e 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_UART_MspInit+0x15c>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_UART_MspInit+0x15c>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	6613      	str	r3, [r2, #96]	; 0x60
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_UART_MspInit+0x15c>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_UART_MspInit+0x15c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <HAL_UART_MspInit+0x15c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001168:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <HAL_UART_MspInit+0x15c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001174:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800118e:	2307      	movs	r3, #7
 8001190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f000 fae3 	bl	8001768 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f000 fa29 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ac:	2025      	movs	r0, #37	; 0x25
 80011ae:	f000 fa42 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	e048      	b.n	8001246 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_UART_MspInit+0x160>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d143      	bne.n	8001246 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 faea 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80011d6:	f7ff ff13 	bl	8001000 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_UART_MspInit+0x15c>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_UART_MspInit+0x15c>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_UART_MspInit+0x15c>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_MspInit+0x15c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_UART_MspInit+0x15c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x15c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800120a:	230c      	movs	r3, #12
 800120c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001222:	2307      	movs	r3, #7
 8001224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fa99 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2026      	movs	r0, #38	; 0x26
 800123c:	f000 f9df 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	; 0x26
 8001242:	f000 f9f8 	bl	8001636 <HAL_NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	37b8      	adds	r7, #184	; 0xb8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40013800 	.word	0x40013800
 8001254:	40021000 	.word	0x40021000
 8001258:	40004400 	.word	0x40004400

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f8ae 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <USART1_IRQHandler+0x10>)
 80012b6:	f003 f93d 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000090 	.word	0x20000090

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f003 f933 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000114 	.word	0x20000114

080012d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f004 fbf7 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132e:	f7ff fbdb 	bl	8000ae8 <main>

08001332 <LoopForever>:

LoopForever:
    b LoopForever
 8001332:	e7fe      	b.n	8001332 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001340:	08005be4 	.word	0x08005be4
  ldr r2, =_sbss
 8001344:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001348:	200001b0 	.word	0x200001b0

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_Init+0x3c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_Init+0x3c>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001366:	2003      	movs	r0, #3
 8001368:	f000 f93e 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136c:	2000      	movs	r0, #0
 800136e:	f000 f80f 	bl	8001390 <HAL_InitTick>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	e001      	b.n	8001382 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800137e:	f7ff fe45 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001382:	79fb      	ldrb	r3, [r7, #7]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40022000 	.word	0x40022000

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_InitTick+0x70>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_InitTick+0x6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f949 	bl	8001652 <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d809      	bhi.n	80013e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f000 f913 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_InitTick+0x74>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e007      	b.n	80013f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e004      	b.n	80013f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e001      	b.n	80013f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000024 	.word	0x20000024
 8001400:	2000001c 	.word	0x2000001c
 8001404:	20000020 	.word	0x20000020

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000024 	.word	0x20000024
 800142c:	200001ac 	.word	0x200001ac

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200001ac 	.word	0x200001ac

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d008      	beq.n	8001694 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e022      	b.n	80016da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 020e 	bic.w	r2, r2, #14
 80016a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f003 021c 	and.w	r2, r3, #28
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d005      	beq.n	800170a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2204      	movs	r2, #4
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e029      	b.n	800175e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020e 	bic.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 021c 	and.w	r2, r3, #28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
    }
  }
  return status;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e17f      	b.n	8001a78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8171 	beq.w	8001a72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_GPIO_Init+0x40>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b03      	cmp	r3, #3
 8001814:	d118      	bne.n	8001848 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d017      	beq.n	8001884 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	6939      	ldr	r1, [r7, #16]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80ac 	beq.w	8001a72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_GPIO_Init+0x330>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6613      	str	r3, [r2, #96]	; 0x60
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_GPIO_Init+0x330>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800195c:	d025      	beq.n	80019aa <HAL_GPIO_Init+0x242>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x338>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x23e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_GPIO_Init+0x33c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x23a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x340>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x236>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x344>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x232>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_GPIO_Init+0x348>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x22e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x34c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x22a>
 800198e:	2306      	movs	r3, #6
 8001990:	e00c      	b.n	80019ac <HAL_GPIO_Init+0x244>
 8001992:	2307      	movs	r3, #7
 8001994:	e00a      	b.n	80019ac <HAL_GPIO_Init+0x244>
 8001996:	2305      	movs	r3, #5
 8001998:	e008      	b.n	80019ac <HAL_GPIO_Init+0x244>
 800199a:	2304      	movs	r3, #4
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x244>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x244>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x244>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x244>
 80019aa:	2300      	movs	r3, #0
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_GPIO_Init+0x334>)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ee:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f ae78 	bne.w	8001778 <HAL_GPIO_Init+0x10>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000800 	.word	0x48000800
 8001aa8:	48000c00 	.word	0x48000c00
 8001aac:	48001000 	.word	0x48001000
 8001ab0:	48001400 	.word	0x48001400
 8001ab4:	48001800 	.word	0x48001800
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b06:	d130      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d038      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3c:	e002      	b.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d102      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d110      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e00f      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d007      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e3ca      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4b97      	ldr	r3, [pc, #604]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80e4 	beq.w	8001da0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_RCC_OscConfig+0x4a>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	f040 808b 	bne.w	8001cfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 8087 	bne.w	8001cfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e3a2      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_RCC_OscConfig+0x7c>
 8001c16:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d223      	bcs.n	8001c78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fd55 	bl	80026e4 <RCC_SetFlashLatencyFromMSIRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e383      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	496d      	ldr	r1, [pc, #436]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	4968      	ldr	r1, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
 8001c76:	e025      	b.n	8001cc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c78:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4960      	ldr	r1, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	495b      	ldr	r1, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fd15 	bl	80026e4 <RCC_SetFlashLatencyFromMSIRange>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e343      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc4:	f000 fc4a 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	4950      	ldr	r1, [pc, #320]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_RCC_OscConfig+0x278>)
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fb51 	bl	8001390 <HAL_InitTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d052      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	e327      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d032      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d04:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb8e 	bl	8001430 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff fb8a 	bl	8001430 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e310      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4931      	ldr	r1, [pc, #196]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	492c      	ldr	r1, [pc, #176]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e01a      	b.n	8001da0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb5b 	bl	8001430 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fb57 	bl	8001430 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e2dd      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1da>
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d074      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x21a>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d10e      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d064      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d160      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e2ba      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x24a>
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e026      	b.n	8001e3c <HAL_RCC_OscConfig+0x298>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df6:	d115      	bne.n	8001e24 <HAL_RCC_OscConfig+0x280>
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a02      	ldr	r2, [pc, #8]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x298>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08005b8c 	.word	0x08005b8c
 8001e1c:	2000001c 	.word	0x2000001c
 8001e20:	20000020 	.word	0x20000020
 8001e24:	4ba0      	ldr	r3, [pc, #640]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a9f      	ldr	r2, [pc, #636]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a9c      	ldr	r2, [pc, #624]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff faf4 	bl	8001430 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff faf0 	bl	8001430 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e276      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fae0 	bl	8001430 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fadc 	bl	8001430 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e262      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d0>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d060      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x310>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x328>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e23f      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4973      	ldr	r1, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee0:	e040      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d023      	beq.n	8001f32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eea:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fa9b 	bl	8001430 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff fa97 	bl	8001430 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e21d      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	495f      	ldr	r1, [pc, #380]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
 8001f30:	e018      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa77 	bl	8001430 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fa73 	bl	8001430 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1f9      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff fa52 	bl	8001430 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff fa4e 	bl	8001430 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1d4      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fa35 	bl	8001430 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fa31 	bl	8001430 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1b7      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80a6 	beq.w	8002144 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203c:	f7ff f9f8 	bl	8001430 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7ff f9f4 	bl	8001430 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e17a      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0x4d8>
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207a:	e029      	b.n	80020d0 <HAL_RCC_OscConfig+0x52c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_OscConfig+0x50c>
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x52c>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	4b9c      	ldr	r3, [pc, #624]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	4a9b      	ldr	r2, [pc, #620]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c0:	4b98      	ldr	r3, [pc, #608]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a97      	ldr	r2, [pc, #604]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7ff f9aa 	bl	8001430 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7ff f9a6 	bl	8001430 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e12a      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ed      	beq.n	80020e0 <HAL_RCC_OscConfig+0x53c>
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff f993 	bl	8001430 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff f98f 	bl	8001430 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e113      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ed      	bne.n	800210e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a79      	ldr	r2, [pc, #484]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80fe 	beq.w	800234a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 80d0 	bne.w	80022f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002158:	4b72      	ldr	r3, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	429a      	cmp	r2, r3
 800216a:	d130      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	3b01      	subs	r3, #1
 8002178:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d127      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d11f      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002198:	2a07      	cmp	r2, #7
 800219a:	bf14      	ite	ne
 800219c:	2201      	movne	r2, #1
 800219e:	2200      	moveq	r2, #0
 80021a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d113      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d06e      	beq.n	80022ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d069      	beq.n	80022a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021d4:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021e0:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0ad      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f0:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021fc:	f7ff f918 	bl	8001430 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff f914 	bl	8001430 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e09a      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x784>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002232:	3a01      	subs	r2, #1
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800223c:	0212      	lsls	r2, r2, #8
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	3a01      	subs	r2, #1
 8002248:	0552      	lsls	r2, r2, #21
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002250:	0852      	lsrs	r2, r2, #1
 8002252:	3a01      	subs	r2, #1
 8002254:	0652      	lsls	r2, r2, #25
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800225c:	0912      	lsrs	r2, r2, #4
 800225e:	0452      	lsls	r2, r2, #17
 8002260:	430a      	orrs	r2, r1
 8002262:	4930      	ldr	r1, [pc, #192]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002274:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002280:	f7ff f8d6 	bl	8001430 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff f8d2 	bl	8001430 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e058      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a6:	e050      	b.n	800234a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e04f      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d148      	bne.n	800234a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d0:	f7ff f8ae 	bl	8001430 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff f8aa 	bl	8001430 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e030      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x734>
 80022f6:	e028      	b.n	800234a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d023      	beq.n	8002346 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_RCC_OscConfig+0x780>)
 8002304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7ff f891 	bl	8001430 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	e00c      	b.n	800232c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff f88d 	bl	8001430 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d905      	bls.n	800232c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e013      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
 8002324:	40021000 	.word	0x40021000
 8002328:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_OscConfig+0x7b0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ec      	bne.n	8002312 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x7b0>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4905      	ldr	r1, [pc, #20]	; (8002354 <HAL_RCC_OscConfig+0x7b0>)
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_OscConfig+0x7b4>)
 8002340:	4013      	ands	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e001      	b.n	800234a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	feeefffc 	.word	0xfeeefffc

0800235c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0e7      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b75      	ldr	r3, [pc, #468]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4970      	ldr	r1, [pc, #448]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cf      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d908      	bls.n	80023ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4960      	ldr	r1, [pc, #384]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d04c      	beq.n	8002474 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0a6      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e09a      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e08e      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e086      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4943      	ldr	r1, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002444:	f7fe fff4 	bl	8001430 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fff0 	bl	8001430 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e06e      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	429a      	cmp	r2, r3
 800248e:	d208      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	492b      	ldr	r1, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d210      	bcs.n	80024d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 0207 	bic.w	r2, r3, #7
 80024b8:	4923      	ldr	r1, [pc, #140]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_ClockConfig+0x1ec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e036      	b.n	8002540 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4918      	ldr	r1, [pc, #96]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4910      	ldr	r1, [pc, #64]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002510:	f000 f824 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x1f4>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1fc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe ff2b 	bl	8001390 <HAL_InitTick>
 800253a:	4603      	mov	r3, r0
 800253c:	72fb      	strb	r3, [r7, #11]

  return status;
 800253e:	7afb      	ldrb	r3, [r7, #11]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	08005b8c 	.word	0x08005b8c
 8002554:	2000001c 	.word	0x2000001c
 8002558:	20000020 	.word	0x20000020

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d121      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d11e      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025b8:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d102      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_GetSysClockFreq+0x110>)
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e004      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCC_GetSysClockFreq+0x114>)
 80025e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d134      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0xa6>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0xac>
 8002600:	e005      	b.n	800260e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_GetSysClockFreq+0x110>)
 8002604:	617b      	str	r3, [r7, #20]
      break;
 8002606:	e005      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_GetSysClockFreq+0x114>)
 800260a:	617b      	str	r3, [r7, #20]
      break;
 800260c:	e002      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	617b      	str	r3, [r7, #20]
      break;
 8002612:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	3301      	adds	r3, #1
 8002620:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	fb03 f202 	mul.w	r2, r3, r2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0e5b      	lsrs	r3, r3, #25
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	3301      	adds	r3, #1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002654:	69bb      	ldr	r3, [r7, #24]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	08005ba4 	.word	0x08005ba4
 800266c:	00f42400 	.word	0x00f42400
 8002670:	007a1200 	.word	0x007a1200

08002674 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_GetHCLKFreq+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000001c 	.word	0x2000001c

0800268c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002690:	f7ff fff0 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4904      	ldr	r1, [pc, #16]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08005b9c 	.word	0x08005b9c

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026bc:	f7ff ffda 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0adb      	lsrs	r3, r3, #11
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4904      	ldr	r1, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08005b9c 	.word	0x08005b9c

080026e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026fc:	f7ff f9ee 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002700:	6178      	str	r0, [r7, #20]
 8002702:	e014      	b.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	6593      	str	r3, [r2, #88]	; 0x58
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800271c:	f7ff f9de 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002720:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002734:	d10b      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d919      	bls.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2ba0      	cmp	r3, #160	; 0xa0
 8002740:	d902      	bls.n	8002748 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002742:	2302      	movs	r3, #2
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e013      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002748:	2301      	movs	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	e010      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d902      	bls.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002754:	2303      	movs	r3, #3
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e00a      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d102      	bne.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002760:	2302      	movs	r3, #2
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e004      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b70      	cmp	r3, #112	; 0x70
 800276a:	d101      	bne.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800276c:	2301      	movs	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0207 	bic.w	r2, r3, #7
 8002778:	4909      	ldr	r1, [pc, #36]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	40022000 	.word	0x40022000

080027a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027ac:	2300      	movs	r3, #0
 80027ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b0:	2300      	movs	r3, #0
 80027b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d041      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027c8:	d02a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ce:	d824      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027da:	d81e      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e4:	d010      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027e6:	e018      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027e8:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a85      	ldr	r2, [pc, #532]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f4:	e015      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 facb 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002806:	e00c      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3320      	adds	r3, #32
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fbb6 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002818:	e003      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	74fb      	strb	r3, [r7, #19]
      break;
 800281e:	e000      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002828:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002836:	4973      	ldr	r1, [pc, #460]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800283e:	e001      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d041      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002858:	d02a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800285a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800285e:	d824      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286a:	d81e      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d010      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002876:	e018      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002878:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002884:	e015      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fa83 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002896:	e00c      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3320      	adds	r3, #32
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fb6e 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028a8:	e003      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	74fb      	strb	r3, [r7, #19]
      break;
 80028ae:	e000      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028b8:	4b52      	ldr	r3, [pc, #328]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c6:	494f      	ldr	r1, [pc, #316]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ce:	e001      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a0 	beq.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	; 0x58
 8002908:	4b3e      	ldr	r3, [pc, #248]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002924:	f7fe fd84 	bl	8001430 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800292a:	e009      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fd80 	bl	8001430 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	74fb      	strb	r3, [r7, #19]
        break;
 800293e:	e005      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ef      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d15c      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01f      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	d019      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fd3f 	bl	8001430 <HAL_GetTick>
 80029b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b4:	e00b      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fd3b 	bl	8001430 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d902      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	74fb      	strb	r3, [r7, #19]
            break;
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ec      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a10:	7c7b      	ldrb	r3, [r7, #17]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b9e      	ldr	r3, [pc, #632]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4a9d      	ldr	r2, [pc, #628]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2e:	4b98      	ldr	r3, [pc, #608]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f023 0203 	bic.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	4994      	ldr	r1, [pc, #592]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 020c 	bic.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	498c      	ldr	r1, [pc, #560]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a72:	4b87      	ldr	r3, [pc, #540]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4983      	ldr	r1, [pc, #524]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	497b      	ldr	r1, [pc, #492]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	4972      	ldr	r1, [pc, #456]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad8:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	496a      	ldr	r1, [pc, #424]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	4961      	ldr	r1, [pc, #388]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b1c:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	4959      	ldr	r1, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	4950      	ldr	r1, [pc, #320]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b60:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	4948      	ldr	r1, [pc, #288]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	493f      	ldr	r1, [pc, #252]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d028      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb2:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bce:	60d3      	str	r3, [r2, #12]
 8002bd0:	e011      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f8d8 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	491f      	ldr	r1, [pc, #124]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2c:	60d3      	str	r3, [r2, #12]
 8002c2e:	e011      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f8a9 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02b      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a02      	ldr	r2, [pc, #8]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
 8002c8c:	e014      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f877 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d02f      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd2:	4928      	ldr	r1, [pc, #160]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d10d      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f854 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d014      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
 8002cfe:	e011      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f935 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d047      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e044      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0x86>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x62>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x74>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	430b      	orrs	r3, r1
 8002e68:	4944      	ldr	r1, [pc, #272]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d17d      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e74:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe fad6 	bl	8001430 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fe fad2 	bl	8001430 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ef      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d160      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d111      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	0912      	lsrs	r2, r2, #4
 8002ecc:	0452      	lsls	r2, r2, #17
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	492a      	ldr	r1, [pc, #168]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
 8002ed6:	e027      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d112      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ee6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	0211      	lsls	r1, r2, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6912      	ldr	r2, [r2, #16]
 8002ef4:	0852      	lsrs	r2, r2, #1
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	0552      	lsls	r2, r2, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	491f      	ldr	r1, [pc, #124]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
 8002f02:	e011      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6952      	ldr	r2, [r2, #20]
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0652      	lsls	r2, r2, #25
 8002f20:	430a      	orrs	r2, r1
 8002f22:	4916      	ldr	r1, [pc, #88]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe fa7c 	bl	8001430 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3c:	f7fe fa78 	bl	8001430 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	4904      	ldr	r1, [pc, #16]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
       ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d047      	beq.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e044      	b.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d018      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0x86>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x62>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d009      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x74>
 8002fe0:	e020      	b.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e01a      	b.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e013      	b.n	800302e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003022:	e006      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303a:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4939      	ldr	r1, [pc, #228]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d167      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a35      	ldr	r2, [pc, #212]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f9e2 	bl	8001430 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003070:	f7fe f9de 	bl	8001430 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
        break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d14a      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0912      	lsrs	r2, r2, #4
 80030b4:	0452      	lsls	r2, r2, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	491f      	ldr	r1, [pc, #124]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	614b      	str	r3, [r1, #20]
 80030be:	e011      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0652      	lsls	r2, r2, #25
 80030dc:	430a      	orrs	r2, r1
 80030de:	4916      	ldr	r1, [pc, #88]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f99e 	bl	8001430 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f8:	f7fe f99a 	bl	8001430 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
          break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e049      	b.n	80031e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd ff76 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fc10 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e049      	b.n	8003290 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f841 	bl	8003298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 fbb9 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e03c      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d109      	bne.n	80032ea <HAL_TIM_PWM_Start+0x3e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e02f      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e022      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d109      	bne.n	800331e <HAL_TIM_PWM_Start+0x72>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e015      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d109      	bne.n	8003338 <HAL_TIM_PWM_Start+0x8c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e008      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e09c      	b.n	800348c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0xb6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	e023      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0xc6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003370:	e01b      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d104      	bne.n	8003382 <HAL_TIM_PWM_Start+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	e013      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d104      	bne.n	8003392 <HAL_TIM_PWM_Start+0xe6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003390:	e00b      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0xf6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	e003      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fefe 	bl	80041b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_TIM_PWM_Start+0x1e8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_TIM_PWM_Start+0x13e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a34      	ldr	r2, [pc, #208]	; (8003498 <HAL_TIM_PWM_Start+0x1ec>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_TIM_PWM_Start+0x13e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a32      	ldr	r2, [pc, #200]	; (800349c <HAL_TIM_PWM_Start+0x1f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_TIM_PWM_Start+0x13e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <HAL_TIM_PWM_Start+0x1f4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_TIM_PWM_Start+0x13e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <HAL_TIM_PWM_Start+0x1f8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_PWM_Start+0x142>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_TIM_PWM_Start+0x144>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a22      	ldr	r2, [pc, #136]	; (8003494 <HAL_TIM_PWM_Start+0x1e8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d018      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_TIM_PWM_Start+0x1fc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_TIM_PWM_Start+0x200>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <HAL_TIM_PWM_Start+0x204>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_TIM_PWM_Start+0x1ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_TIM_PWM_Start+0x19e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_TIM_PWM_Start+0x1f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d115      	bne.n	8003476 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_TIM_PWM_Start+0x208>)
 8003452:	4013      	ands	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b06      	cmp	r3, #6
 800345a:	d015      	beq.n	8003488 <HAL_TIM_PWM_Start+0x1dc>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d011      	beq.n	8003488 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e008      	b.n	8003488 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	00010007 	.word	0x00010007

080034b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fe72 	bl	80041b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3e      	ldr	r2, [pc, #248]	; (80035d0 <HAL_TIM_PWM_Stop+0x118>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3d      	ldr	r2, [pc, #244]	; (80035d4 <HAL_TIM_PWM_Stop+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <HAL_TIM_PWM_Stop+0x120>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_TIM_PWM_Stop+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_PWM_Stop+0x4a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_TIM_PWM_Stop+0x128>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_Stop+0x4e>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_TIM_PWM_Stop+0x50>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	f241 1311 	movw	r3, #4369	; 0x1111
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <HAL_TIM_PWM_Stop+0x84>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	f240 4344 	movw	r3, #1092	; 0x444
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_TIM_PWM_Stop+0x84>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	f241 1311 	movw	r3, #4369	; 0x1111
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10f      	bne.n	800356c <HAL_TIM_PWM_Stop+0xb4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	f240 4344 	movw	r3, #1092	; 0x444
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_TIM_PWM_Stop+0xb4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_TIM_PWM_Stop+0xc4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357a:	e023      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d104      	bne.n	800358c <HAL_TIM_PWM_Stop+0xd4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358a:	e01b      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d104      	bne.n	800359c <HAL_TIM_PWM_Stop+0xe4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359a:	e013      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d104      	bne.n	80035ac <HAL_TIM_PWM_Stop+0xf4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035aa:	e00b      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_PWM_Stop+0x104>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	e003      	b.n	80035c4 <HAL_TIM_PWM_Stop+0x10c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ff      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b14      	cmp	r3, #20
 800360e:	f200 80f0 	bhi.w	80037f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080037f3 	.word	0x080037f3
 8003620:	080037f3 	.word	0x080037f3
 8003624:	080037f3 	.word	0x080037f3
 8003628:	080036ad 	.word	0x080036ad
 800362c:	080037f3 	.word	0x080037f3
 8003630:	080037f3 	.word	0x080037f3
 8003634:	080037f3 	.word	0x080037f3
 8003638:	080036ef 	.word	0x080036ef
 800363c:	080037f3 	.word	0x080037f3
 8003640:	080037f3 	.word	0x080037f3
 8003644:	080037f3 	.word	0x080037f3
 8003648:	0800372f 	.word	0x0800372f
 800364c:	080037f3 	.word	0x080037f3
 8003650:	080037f3 	.word	0x080037f3
 8003654:	080037f3 	.word	0x080037f3
 8003658:	08003771 	.word	0x08003771
 800365c:	080037f3 	.word	0x080037f3
 8003660:	080037f3 	.word	0x080037f3
 8003664:	080037f3 	.word	0x080037f3
 8003668:	080037b1 	.word	0x080037b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa2e 	bl	8003ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
      break;
 80036aa:	e0a5      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa9e 	bl	8003bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
      break;
 80036ec:	e084      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fb07 	bl	8003d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e064      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fb6f 	bl	8003e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
      break;
 800376e:	e043      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fbb8 	bl	8003eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037ae:	e023      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fbfc 	bl	8003fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037f0:	e002      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop

0800380c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x1c>
 8003824:	2302      	movs	r3, #2
 8003826:	e0b6      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x18a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d03e      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0xd8>
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	f200 8087 	bhi.w	800397c <HAL_TIM_ConfigClockSource+0x170>
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	f000 8086 	beq.w	8003982 <HAL_TIM_ConfigClockSource+0x176>
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d87f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 800387c:	2b70      	cmp	r3, #112	; 0x70
 800387e:	d01a      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xaa>
 8003880:	2b70      	cmp	r3, #112	; 0x70
 8003882:	d87b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d050      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x11e>
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d877      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 800388c:	2b50      	cmp	r3, #80	; 0x50
 800388e:	d03c      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xfe>
 8003890:	2b50      	cmp	r3, #80	; 0x50
 8003892:	d873      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d058      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x13e>
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d86f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d064      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15e>
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d86b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d060      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15e>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d867      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x170>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15e>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d05a      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15e>
 80038b4:	e062      	b.n	800397c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f000 fc55 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
      break;
 80038e2:	e04f      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f000 fc3e 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e03c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fbb2 	bl	8004080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2150      	movs	r1, #80	; 0x50
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fc0b 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003928:	e02c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fbd1 	bl	80040de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2160      	movs	r1, #96	; 0x60
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fbfb 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003948:	e01c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fb92 	bl	8004080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fbeb 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003968:	e00c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 fbe2 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 800397a:	e003      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e000      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d00f      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3c      	ldr	r2, [pc, #240]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <TIM_Base_SetConfig+0x118>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d017      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <TIM_Base_SetConfig+0x11c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <TIM_Base_SetConfig+0x120>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00f      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <TIM_Base_SetConfig+0x124>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <TIM_Base_SetConfig+0x128>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <TIM_Base_SetConfig+0x12c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0xf8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <TIM_Base_SetConfig+0x130>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <TIM_OC1_SetConfig+0x10c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00f      	beq.n	8003b54 <TIM_OC1_SetConfig+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <TIM_OC1_SetConfig+0x110>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <TIM_OC1_SetConfig+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <TIM_OC1_SetConfig+0x114>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_OC1_SetConfig+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a29      	ldr	r2, [pc, #164]	; (8003bec <TIM_OC1_SetConfig+0x118>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC1_SetConfig+0x80>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <TIM_OC1_SetConfig+0x11c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10c      	bne.n	8003b6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0308 	bic.w	r3, r3, #8
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <TIM_OC1_SetConfig+0x10c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00f      	beq.n	8003b96 <TIM_OC1_SetConfig+0xc2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <TIM_OC1_SetConfig+0x110>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_OC1_SetConfig+0xc2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <TIM_OC1_SetConfig+0x114>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_OC1_SetConfig+0xc2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a18      	ldr	r2, [pc, #96]	; (8003bec <TIM_OC1_SetConfig+0x118>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC1_SetConfig+0xc2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a17      	ldr	r2, [pc, #92]	; (8003bf0 <TIM_OC1_SetConfig+0x11c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0320 	bic.w	r3, r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <TIM_OC2_SetConfig+0x100>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_OC2_SetConfig+0x6c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <TIM_OC2_SetConfig+0x104>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10d      	bne.n	8003c7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <TIM_OC2_SetConfig+0x100>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00f      	beq.n	8003ca4 <TIM_OC2_SetConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <TIM_OC2_SetConfig+0x104>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <TIM_OC2_SetConfig+0xb0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <TIM_OC2_SetConfig+0x108>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <TIM_OC2_SetConfig+0xb0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1a      	ldr	r2, [pc, #104]	; (8003d00 <TIM_OC2_SetConfig+0x10c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_OC2_SetConfig+0xb0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <TIM_OC2_SetConfig+0x110>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d113      	bne.n	8003ccc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <TIM_OC3_SetConfig+0xfc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_OC3_SetConfig+0x6a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <TIM_OC3_SetConfig+0x100>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10d      	bne.n	8003d8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <TIM_OC3_SetConfig+0xfc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00f      	beq.n	8003db6 <TIM_OC3_SetConfig+0xae>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <TIM_OC3_SetConfig+0x100>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_OC3_SetConfig+0xae>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <TIM_OC3_SetConfig+0x104>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_OC3_SetConfig+0xae>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <TIM_OC3_SetConfig+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC3_SetConfig+0xae>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <TIM_OC3_SetConfig+0x10c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d113      	bne.n	8003dde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40013400 	.word	0x40013400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800

08003e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <TIM_OC4_SetConfig+0xc0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00f      	beq.n	8003e9c <TIM_OC4_SetConfig+0x84>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <TIM_OC4_SetConfig+0xc4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_OC4_SetConfig+0x84>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <TIM_OC4_SetConfig+0xc8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_OC4_SetConfig+0x84>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <TIM_OC4_SetConfig+0xcc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC4_SetConfig+0x84>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <TIM_OC4_SetConfig+0xd0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d109      	bne.n	8003eb0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40013400 	.word	0x40013400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <TIM_OC5_SetConfig+0xb4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_OC5_SetConfig+0x7a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC5_SetConfig+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_OC5_SetConfig+0x7a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <TIM_OC5_SetConfig+0xbc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_OC5_SetConfig+0x7a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_OC5_SetConfig+0xc0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_OC5_SetConfig+0x7a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <TIM_OC5_SetConfig+0xc4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d109      	bne.n	8003f7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800

08003fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	051b      	lsls	r3, r3, #20
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <TIM_OC6_SetConfig+0xb8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <TIM_OC6_SetConfig+0x7c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC6_SetConfig+0xbc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_OC6_SetConfig+0x7c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a16      	ldr	r2, [pc, #88]	; (8004074 <TIM_OC6_SetConfig+0xc0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_OC6_SetConfig+0x7c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC6_SetConfig+0xc4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC6_SetConfig+0x7c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a14      	ldr	r2, [pc, #80]	; (800407c <TIM_OC6_SetConfig+0xc8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40013400 	.word	0x40013400
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 030a 	bic.w	r3, r3, #10
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	f043 0307 	orr.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2201      	movs	r2, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e068      	b.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2e      	ldr	r2, [pc, #184]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1e      	ldr	r2, [pc, #120]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01d      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d018      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10c      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40014000 	.word	0x40014000

08004310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e040      	b.n	80043a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fee0 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fbe8 	bl	8004b24 <UART_SetConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fe94 	bl	8005094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 ff1b 	bl	80051d8 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b08b      	sub	sp, #44	; 0x2c
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d156      	bne.n	8004470 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_UART_Transmit_IT+0x22>
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e04f      	b.n	8004472 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Transmit_IT+0x34>
 80043dc:	2302      	movs	r3, #2
 80043de:	e048      	b.n	8004472 <HAL_UART_Transmit_IT+0xc6>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2221      	movs	r2, #33	; 0x21
 8004410:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d107      	bne.n	800442c <HAL_UART_Transmit_IT+0x80>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_UART_Transmit_IT+0xd4>)
 8004428:	669a      	str	r2, [r3, #104]	; 0x68
 800442a:	e002      	b.n	8004432 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_UART_Transmit_IT+0xd8>)
 8004430:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	623b      	str	r3, [r7, #32]
 800445a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	61bb      	str	r3, [r7, #24]
   return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	372c      	adds	r7, #44	; 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	08005733 	.word	0x08005733
 8004484:	0800567b 	.word	0x0800567b

08004488 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449a:	2b20      	cmp	r3, #32
 800449c:	d142      	bne.n	8004524 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Receive_IT+0x22>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e03b      	b.n	8004526 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Receive_IT+0x34>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e034      	b.n	8004526 <HAL_UART_Receive_IT+0x9e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_UART_Receive_IT+0xa8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d01f      	beq.n	8004514 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	613b      	str	r3, [r7, #16]
   return(result);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	69f9      	ldr	r1, [r7, #28]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	61bb      	str	r3, [r7, #24]
   return(result);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	461a      	mov	r2, r3
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 ff6a 	bl	80053f4 <UART_Start_Receive_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	e000      	b.n	8004526 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3728      	adds	r7, #40	; 0x28
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40008000 	.word	0x40008000

08004534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b0ba      	sub	sp, #232	; 0xe8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800455a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800455e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004562:	4013      	ands	r3, r2
 8004564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d115      	bne.n	800459c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 82a6 	beq.w	8004ade <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
      }
      return;
 800459a:	e2a0      	b.n	8004ade <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800459c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8117 	beq.w	80047d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_UART_IRQHandler+0x298>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 810a 	beq.w	80047d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_UART_IRQHandler+0xbc>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <HAL_UART_IRQHandler+0xec>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2202      	movs	r2, #2
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <HAL_UART_IRQHandler+0x11c>
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004646:	f043 0202 	orr.w	r2, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2208      	movs	r2, #8
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004682:	f043 0208 	orr.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_UART_IRQHandler+0x18a>
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 820c 	beq.w	8004ae2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800470e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04f      	beq.n	80047b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 ff36 	bl	8005588 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d141      	bne.n	80047ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800475a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800476e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1d9      	bne.n	800472a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <HAL_UART_IRQHandler+0x29c>)
 8004784:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4618      	mov	r0, r3
 800478c:	f7fc ffab 	bl	80016e6 <HAL_DMA_Abort_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e00f      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9a6 	bl	8004af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00b      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9a2 	bl	8004af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e007      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f99e 	bl	8004af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80047c4:	e18d      	b.n	8004ae2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	bf00      	nop
    return;
 80047c8:	e18b      	b.n	8004ae2 <HAL_UART_IRQHandler+0x5ae>
 80047ca:	bf00      	nop
 80047cc:	04000120 	.word	0x04000120
 80047d0:	0800564f 	.word	0x0800564f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 8146 	bne.w	8004a6a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 813f 	beq.w	8004a6a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8138 	beq.w	8004a6a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	f040 80b4 	bne.w	800497a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800481e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 815f 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	429a      	cmp	r2, r3
 8004834:	f080 8157 	bcs.w	8004ae6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 8085 	bne.w	800495e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800487e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800488a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1da      	bne.n	8004854 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e1      	bne.n	800489e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e3      	bne.n	80048da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004940:	65bb      	str	r3, [r7, #88]	; 0x58
 8004942:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e4      	bne.n	800491e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc fe86 	bl	800166a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800496a:	b29b      	uxth	r3, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	b29b      	uxth	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8ca 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004978:	e0b5      	b.n	8004ae6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004986:	b29b      	uxth	r3, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a7 	beq.w	8004aea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800499c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a2 	beq.w	8004aea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e4      	bne.n	80049a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	623b      	str	r3, [r7, #32]
   return(result);
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a00:	633a      	str	r2, [r7, #48]	; 0x30
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e3      	bne.n	80049dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	617b      	str	r3, [r7, #20]
   return(result);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e4      	bne.n	8004a26 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f852 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a68:	e03f      	b.n	8004aea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <HAL_UART_IRQHandler+0x560>
 8004a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f83a 	bl	8005b06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a92:	e02d      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01c      	beq.n	8004aee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
    }
    return;
 8004abc:	e017      	b.n	8004aee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00c      	beq.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fe8b 	bl	80057f2 <UART_EndTransmit_IT>
    return;
 8004adc:	e008      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ade:	bf00      	nop
 8004ae0:	e006      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004ae2:	bf00      	nop
 8004ae4:	e004      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004aee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004af0:	37e8      	adds	r7, #232	; 0xe8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop

08004af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b08a      	sub	sp, #40	; 0x28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4ba4      	ldr	r3, [pc, #656]	; (8004de4 <UART_SetConfig+0x2c0>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a99      	ldr	r2, [pc, #612]	; (8004de8 <UART_SetConfig+0x2c4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a90      	ldr	r2, [pc, #576]	; (8004dec <UART_SetConfig+0x2c8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d126      	bne.n	8004bfc <UART_SetConfig+0xd8>
 8004bae:	4b90      	ldr	r3, [pc, #576]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d81b      	bhi.n	8004bf4 <UART_SetConfig+0xd0>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0xa0>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be5 	.word	0x08004be5
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004bed 	.word	0x08004bed
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e116      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e112      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e10e      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e10a      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e106      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7c      	ldr	r2, [pc, #496]	; (8004df4 <UART_SetConfig+0x2d0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d138      	bne.n	8004c78 <UART_SetConfig+0x154>
 8004c06:	4b7a      	ldr	r3, [pc, #488]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d82d      	bhi.n	8004c70 <UART_SetConfig+0x14c>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0xf8>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004c71 	.word	0x08004c71
 8004c24:	08004c71 	.word	0x08004c71
 8004c28:	08004c71 	.word	0x08004c71
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c71 	.word	0x08004c71
 8004c34:	08004c71 	.word	0x08004c71
 8004c38:	08004c71 	.word	0x08004c71
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c71 	.word	0x08004c71
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c71 	.word	0x08004c71
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e0d8      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e0d4      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e0d0      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e0cc      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e0c8      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5e      	ldr	r2, [pc, #376]	; (8004df8 <UART_SetConfig+0x2d4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d125      	bne.n	8004cce <UART_SetConfig+0x1aa>
 8004c82:	4b5b      	ldr	r3, [pc, #364]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c8c:	2b30      	cmp	r3, #48	; 0x30
 8004c8e:	d016      	beq.n	8004cbe <UART_SetConfig+0x19a>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d818      	bhi.n	8004cc6 <UART_SetConfig+0x1a2>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d00a      	beq.n	8004cae <UART_SetConfig+0x18a>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d814      	bhi.n	8004cc6 <UART_SetConfig+0x1a2>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <UART_SetConfig+0x182>
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d008      	beq.n	8004cb6 <UART_SetConfig+0x192>
 8004ca4:	e00f      	b.n	8004cc6 <UART_SetConfig+0x1a2>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cac:	e0ad      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb4:	e0a9      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004cb6:	2304      	movs	r3, #4
 8004cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbc:	e0a5      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc4:	e0a1      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ccc:	e09d      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a4a      	ldr	r2, [pc, #296]	; (8004dfc <UART_SetConfig+0x2d8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d125      	bne.n	8004d24 <UART_SetConfig+0x200>
 8004cd8:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce4:	d016      	beq.n	8004d14 <UART_SetConfig+0x1f0>
 8004ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce8:	d818      	bhi.n	8004d1c <UART_SetConfig+0x1f8>
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d00a      	beq.n	8004d04 <UART_SetConfig+0x1e0>
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d814      	bhi.n	8004d1c <UART_SetConfig+0x1f8>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <UART_SetConfig+0x1d8>
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d008      	beq.n	8004d0c <UART_SetConfig+0x1e8>
 8004cfa:	e00f      	b.n	8004d1c <UART_SetConfig+0x1f8>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e082      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e07e      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e07a      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e076      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e072      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <UART_SetConfig+0x2dc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d12a      	bne.n	8004d84 <UART_SetConfig+0x260>
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3c:	d01a      	beq.n	8004d74 <UART_SetConfig+0x250>
 8004d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d42:	d81b      	bhi.n	8004d7c <UART_SetConfig+0x258>
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d00c      	beq.n	8004d64 <UART_SetConfig+0x240>
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d815      	bhi.n	8004d7c <UART_SetConfig+0x258>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <UART_SetConfig+0x238>
 8004d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d58:	d008      	beq.n	8004d6c <UART_SetConfig+0x248>
 8004d5a:	e00f      	b.n	8004d7c <UART_SetConfig+0x258>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e052      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e04e      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e04a      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e046      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e042      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <UART_SetConfig+0x2c4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d13a      	bne.n	8004e04 <UART_SetConfig+0x2e0>
 8004d8e:	4b18      	ldr	r3, [pc, #96]	; (8004df0 <UART_SetConfig+0x2cc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d9c:	d01a      	beq.n	8004dd4 <UART_SetConfig+0x2b0>
 8004d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da2:	d81b      	bhi.n	8004ddc <UART_SetConfig+0x2b8>
 8004da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da8:	d00c      	beq.n	8004dc4 <UART_SetConfig+0x2a0>
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d815      	bhi.n	8004ddc <UART_SetConfig+0x2b8>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <UART_SetConfig+0x298>
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db8:	d008      	beq.n	8004dcc <UART_SetConfig+0x2a8>
 8004dba:	e00f      	b.n	8004ddc <UART_SetConfig+0x2b8>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e022      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e01e      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e01a      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e016      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e012      	b.n	8004e0a <UART_SetConfig+0x2e6>
 8004de4:	efff69f3 	.word	0xefff69f3
 8004de8:	40008000 	.word	0x40008000
 8004dec:	40013800 	.word	0x40013800
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40004400 	.word	0x40004400
 8004df8:	40004800 	.word	0x40004800
 8004dfc:	40004c00 	.word	0x40004c00
 8004e00:	40005000 	.word	0x40005000
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a9f      	ldr	r2, [pc, #636]	; (800508c <UART_SetConfig+0x568>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d17a      	bne.n	8004f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d824      	bhi.n	8004e66 <UART_SetConfig+0x342>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0x300>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e57 	.word	0x08004e57
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e67 	.word	0x08004e67
 8004e40:	08004e67 	.word	0x08004e67
 8004e44:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fd fc20 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 8004e4c:	61f8      	str	r0, [r7, #28]
        break;
 8004e4e:	e010      	b.n	8004e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b8f      	ldr	r3, [pc, #572]	; (8005090 <UART_SetConfig+0x56c>)
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fd fb81 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8004e5a:	61f8      	str	r0, [r7, #28]
        break;
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e62:	61fb      	str	r3, [r7, #28]
        break;
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80fb 	beq.w	8005070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d305      	bcc.n	8004e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d903      	bls.n	8004e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e9c:	e0e8      	b.n	8005070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	022b      	lsls	r3, r5, #8
 8004eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004eb4:	0222      	lsls	r2, r4, #8
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	6849      	ldr	r1, [r1, #4]
 8004eba:	0849      	lsrs	r1, r1, #1
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	4688      	mov	r8, r1
 8004ec0:	4681      	mov	r9, r0
 8004ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed8:	4650      	mov	r0, sl
 8004eda:	4659      	mov	r1, fp
 8004edc:	f7fb fc82 	bl	80007e4 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d308      	bcc.n	8004f02 <UART_SetConfig+0x3de>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef6:	d204      	bcs.n	8004f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	60da      	str	r2, [r3, #12]
 8004f00:	e0b6      	b.n	8005070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f08:	e0b2      	b.n	8005070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f12:	d15e      	bne.n	8004fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d828      	bhi.n	8004f6e <UART_SetConfig+0x44a>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x400>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f6f 	.word	0x08004f6f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fd fba0 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 8004f4c:	61f8      	str	r0, [r7, #28]
        break;
 8004f4e:	e014      	b.n	8004f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fd fbb2 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8004f54:	61f8      	str	r0, [r7, #28]
        break;
 8004f56:	e010      	b.n	8004f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <UART_SetConfig+0x56c>)
 8004f5a:	61fb      	str	r3, [r7, #28]
        break;
 8004f5c:	e00d      	b.n	8004f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fd fafd 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8004f62:	61f8      	str	r0, [r7, #28]
        break;
 8004f64:	e009      	b.n	8004f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	61fb      	str	r3, [r7, #28]
        break;
 8004f6c:	e005      	b.n	8004f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d077      	beq.n	8005070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	005a      	lsls	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	441a      	add	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b0f      	cmp	r3, #15
 8004f9a:	d916      	bls.n	8004fca <UART_SetConfig+0x4a6>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa2:	d212      	bcs.n	8004fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f023 030f 	bic.w	r3, r3, #15
 8004fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	8afb      	ldrh	r3, [r7, #22]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	8afa      	ldrh	r2, [r7, #22]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	e052      	b.n	8005070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fd0:	e04e      	b.n	8005070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d827      	bhi.n	800502a <UART_SetConfig+0x506>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x4bc>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fd fb42 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 8005008:	61f8      	str	r0, [r7, #28]
        break;
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fd fb54 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8005010:	61f8      	str	r0, [r7, #28]
        break;
 8005012:	e010      	b.n	8005036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <UART_SetConfig+0x56c>)
 8005016:	61fb      	str	r3, [r7, #28]
        break;
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fd fa9f 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800501e:	61f8      	str	r0, [r7, #28]
        break;
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61fb      	str	r3, [r7, #28]
        break;
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005034:	bf00      	nop
    }

    if (pclk != 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d019      	beq.n	8005070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	085a      	lsrs	r2, r3, #1
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d909      	bls.n	800506a <UART_SetConfig+0x546>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d205      	bcs.n	800506a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e002      	b.n	8005070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800507c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005080:	4618      	mov	r0, r3
 8005082:	3728      	adds	r7, #40	; 0x28
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	40008000 	.word	0x40008000
 8005090:	00f42400 	.word	0x00f42400

08005094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005192:	d10a      	bne.n	80051aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af02      	add	r7, sp, #8
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e8:	f7fc f922 	bl	8001430 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d10e      	bne.n	800521a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f82d 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e023      	b.n	8005262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d10e      	bne.n	8005246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f817 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e00d      	b.n	8005262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b09c      	sub	sp, #112	; 0x70
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	e0a5      	b.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005282:	f000 80a1 	beq.w	80053c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fc f8d3 	bl	8001430 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <UART_WaitOnFlagUntilTimeout+0x32>
 8005296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005298:	2b00      	cmp	r3, #0
 800529a:	d13e      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052b0:	667b      	str	r3, [r7, #100]	; 0x64
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	663b      	str	r3, [r7, #96]	; 0x60
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e067      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d04f      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005336:	d147      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005340:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
 8005362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e6      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	613b      	str	r3, [r7, #16]
   return(result);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	66bb      	str	r3, [r7, #104]	; 0x68
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005394:	623a      	str	r2, [r7, #32]
 8005396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69f9      	ldr	r1, [r7, #28]
 800539a:	6a3a      	ldr	r2, [r7, #32]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e010      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	f43f af4a 	beq.w	800527c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3770      	adds	r7, #112	; 0x70
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b097      	sub	sp, #92	; 0x5c
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d10e      	bne.n	8005446 <UART_Start_Receive_IT+0x52>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <UART_Start_Receive_IT+0x48>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800543a:	e02d      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005444:	e028      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <UART_Start_Receive_IT+0x76>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <UART_Start_Receive_IT+0x6c>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	22ff      	movs	r2, #255	; 0xff
 800545a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545e:	e01b      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	227f      	movs	r2, #127	; 0x7f
 8005464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005468:	e016      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005472:	d10d      	bne.n	8005490 <UART_Start_Receive_IT+0x9c>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <UART_Start_Receive_IT+0x92>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	227f      	movs	r2, #127	; 0x7f
 8005480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005484:	e008      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	223f      	movs	r2, #63	; 0x3f
 800548a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800548e:	e003      	b.n	8005498 <UART_Start_Receive_IT+0xa4>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2222      	movs	r2, #34	; 0x22
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	657b      	str	r3, [r7, #84]	; 0x54
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d107      	bne.n	80054f4 <UART_Start_Receive_IT+0x100>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a24      	ldr	r2, [pc, #144]	; (8005580 <UART_Start_Receive_IT+0x18c>)
 80054f0:	665a      	str	r2, [r3, #100]	; 0x64
 80054f2:	e002      	b.n	80054fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a23      	ldr	r2, [pc, #140]	; (8005584 <UART_Start_Receive_IT+0x190>)
 80054f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
 800552a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800552e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_Start_Receive_IT+0x116>
 800553c:	e018      	b.n	8005570 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	613b      	str	r3, [r7, #16]
   return(result);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	653b      	str	r3, [r7, #80]	; 0x50
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	61bb      	str	r3, [r7, #24]
   return(result);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	375c      	adds	r7, #92	; 0x5c
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	080059a7 	.word	0x080059a7
 8005584:	08005847 	.word	0x08005847

08005588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b095      	sub	sp, #84	; 0x54
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
 80055b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e6      	bne.n	8005590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3308      	adds	r3, #8
 80055c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3308      	adds	r3, #8
 80055e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e5      	bne.n	80055c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d118      	bne.n	8005630 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60bb      	str	r3, [r7, #8]
   return(result);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 0310 	bic.w	r3, r3, #16
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005642:	bf00      	nop
 8005644:	3754      	adds	r7, #84	; 0x54
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fa43 	bl	8004af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800567a:	b480      	push	{r7}
 800567c:	b08f      	sub	sp, #60	; 0x3c
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005686:	2b21      	cmp	r3, #33	; 0x21
 8005688:	d14d      	bne.n	8005726 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d132      	bne.n	80056fc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6979      	ldr	r1, [r7, #20]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	613b      	str	r3, [r7, #16]
   return(result);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80056fa:	e014      	b.n	8005726 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	b292      	uxth	r2, r2
 8005708:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005726:	bf00      	nop
 8005728:	373c      	adds	r7, #60	; 0x3c
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005732:	b480      	push	{r7}
 8005734:	b091      	sub	sp, #68	; 0x44
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573e:	2b21      	cmp	r3, #33	; 0x21
 8005740:	d151      	bne.n	80057e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d132      	bne.n	80057b4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	623b      	str	r3, [r7, #32]
   return(result);
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	633b      	str	r3, [r7, #48]	; 0x30
 800576e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	60fb      	str	r3, [r7, #12]
   return(result);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	69b9      	ldr	r1, [r7, #24]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	617b      	str	r3, [r7, #20]
   return(result);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e6      	bne.n	8005780 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80057b2:	e018      	b.n	80057e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c6:	b292      	uxth	r2, r2
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057e6:	bf00      	nop
 80057e8:	3744      	adds	r7, #68	; 0x44
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	60bb      	str	r3, [r7, #8]
   return(result);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	613b      	str	r3, [r7, #16]
   return(result);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fbd7 	bl	8000fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b096      	sub	sp, #88	; 0x58
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585c:	2b22      	cmp	r3, #34	; 0x22
 800585e:	f040 8094 	bne.w	800598a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005868:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800586c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005870:	b2d9      	uxtb	r1, r3
 8005872:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005876:	b2da      	uxtb	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	400a      	ands	r2, r1
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d179      	bne.n	800599e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	623b      	str	r3, [r7, #32]
   return(result);
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058fc:	633a      	str	r2, [r7, #48]	; 0x30
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	2b01      	cmp	r3, #1
 8005922:	d12e      	bne.n	8005982 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	60fb      	str	r3, [r7, #12]
   return(result);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0310 	bic.w	r3, r3, #16
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	617b      	str	r3, [r7, #20]
   return(result);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b10      	cmp	r3, #16
 8005968:	d103      	bne.n	8005972 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2210      	movs	r2, #16
 8005970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff f8c6 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005980:	e00d      	b.n	800599e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fa58 	bl	8000e38 <HAL_UART_RxCpltCallback>
}
 8005988:	e009      	b.n	800599e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	8b1b      	ldrh	r3, [r3, #24]
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0208 	orr.w	r2, r2, #8
 800599a:	b292      	uxth	r2, r2
 800599c:	831a      	strh	r2, [r3, #24]
}
 800599e:	bf00      	nop
 80059a0:	3758      	adds	r7, #88	; 0x58
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b096      	sub	sp, #88	; 0x58
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	f040 8094 	bne.w	8005aea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80059d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80059d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059da:	4013      	ands	r3, r2
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	1c9a      	adds	r2, r3, #2
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d179      	bne.n	8005afe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d12e      	bne.n	8005ae2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
 8005a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6979      	ldr	r1, [r7, #20]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d103      	bne.n	8005ad2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff f816 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae0:	e00d      	b.n	8005afe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fb f9a8 	bl	8000e38 <HAL_UART_RxCpltCallback>
}
 8005ae8:	e009      	b.n	8005afe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	8b1b      	ldrh	r3, [r3, #24]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	b292      	uxth	r2, r2
 8005afc:	831a      	strh	r2, [r3, #24]
}
 8005afe:	bf00      	nop
 8005b00:	3758      	adds	r7, #88	; 0x58
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	; (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	; (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	; (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	; (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 f820 	bl	8005b74 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08005bdc 	.word	0x08005bdc
 8005b58:	08005bdc 	.word	0x08005bdc
 8005b5c:	08005bdc 	.word	0x08005bdc
 8005b60:	08005be0 	.word	0x08005be0

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <_init>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr

08005b80 <_fini>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr
