
Lab3_SPI_Flash_Storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d24  08006d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d2c  08006d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  20000070  08006da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  08006da4  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f090  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcf  00000000  00000000  0002f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a39  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f114  00000000  00000000  00059371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec660  00000000  00000000  00068485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037cc  00000000  00000000  00154b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006af8 	.word	0x08006af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006af8 	.word	0x08006af8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 fb46 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f842 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f930 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f8fe 	bl	80007b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005b8:	f000 f88e 	bl	80006d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f8ca 	bl	8000754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
	HAL_UART_Receive_IT(&huart1, rxData, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	4915      	ldr	r1, [pc, #84]	; (8000618 <main+0x74>)
 80005c4:	4815      	ldr	r0, [pc, #84]	; (800061c <main+0x78>)
 80005c6:	f004 fa15 	bl	80049f4 <HAL_UART_Receive_IT>

	//HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
	HAL_UART_Transmit_IT(&huart1, txData, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4914      	ldr	r1, [pc, #80]	; (8000620 <main+0x7c>)
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x78>)
 80005d0:	f004 f9a2 	bl	8004918 <HAL_UART_Transmit_IT>

	// CS pin should default high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <main+0x80>)
 80005da:	f001 ff07 	bl	80023ec <HAL_GPIO_WritePin>
//	lastAddr = getFileEnd(2);
//	fileSize = getFileSize(1);



	strcpy((char*)cmdResponse,"\r\n-->");
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0x84>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <main+0x88>)
 80005e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <main+0x84>)
 80005ee:	f7ff fdf9 	bl	80001e4 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	490b      	ldr	r1, [pc, #44]	; (8000628 <main+0x84>)
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x78>)
 80005fc:	f004 f98c 	bl	8004918 <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 8000600:	2014      	movs	r0, #20
 8000602:	f001 fb95 	bl	8001d30 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){
		confirmCmd();
 8000606:	f000 fb7b 	bl	8000d00 <confirmCmd>
		if(fileReceived){
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x8c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <main+0x62>
			storeFile();
 8000612:	f000 facd 	bl	8000bb0 <storeFile>
		confirmCmd();
 8000616:	e7f6      	b.n	8000606 <main+0x62>
 8000618:	200001f8 	.word	0x200001f8
 800061c:	200000f0 	.word	0x200000f0
 8000620:	20000274 	.word	0x20000274
 8000624:	48000400 	.word	0x48000400
 8000628:	2000028c 	.word	0x2000028c
 800062c:	08006b10 	.word	0x08006b10
 8000630:	20000868 	.word	0x20000868

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fd5c 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065a:	f001 feed 	bl	8002438 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000664:	f001 f92c 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000682:	230a      	movs	r3, #10
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff24 	bl	80024e4 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a2:	f001 f90d 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 faec 	bl	8002c9c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f001 f8f9 	bl	80018c0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3758      	adds	r7, #88	; 0x58
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_SPI1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_SPI1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_SPI1_Init+0x74>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_SPI1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI1_Init+0x74>)
 80006f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x74>)
 8000706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x74>)
 800070e:	2220      	movs	r2, #32
 8000710:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x74>)
 8000726:	2207      	movs	r2, #7
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_SPI1_Init+0x74>)
 8000738:	f003 f990 	bl	8003a5c <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f001 f8bd 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40013000 	.word	0x40013000

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART1_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000798:	f004 f870 	bl	800487c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f001 f88d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000f0 	.word	0x200000f0
 80007b0:	40013800 	.word	0x40013800

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART2_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f8:	f004 f840 	bl	800487c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f001 f85d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000174 	.word	0x20000174
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_GPIO_Init+0xc0>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_GPIO_Init+0xc0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0xc0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000890:	f001 fdac 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0xc8>)
 80008ac:	f001 fbf4 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xc4>)
 80008c8:	f001 fbe6 	bl	8002098 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800

080008e0 <writeEnable>:

/* USER CODE BEGIN 4 */
/*WRITE ENABLE*/  //WORKS
void writeEnable(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <writeEnable+0x28>)
 80008ea:	f001 fd7f 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WR_EN, 1, 100);
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	2201      	movs	r2, #1
 80008f2:	4906      	ldr	r1, [pc, #24]	; (800090c <writeEnable+0x2c>)
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <writeEnable+0x30>)
 80008f6:	f003 f954 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4802      	ldr	r0, [pc, #8]	; (8000908 <writeEnable+0x28>)
 8000900:	f001 fd74 	bl	80023ec <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	48000400 	.word	0x48000400
 800090c:	08006ba5 	.word	0x08006ba5
 8000910:	2000008c 	.word	0x2000008c

08000914 <readStatusRegister>:
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WR_DIS, 1, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
}

/*READ STATUS REGISTER*/  //WORKS
void readStatusRegister(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	//Read Status Register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	482b      	ldr	r0, [pc, #172]	; (80009cc <readStatusRegister+0xb8>)
 800091e:	f001 fd65 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RD_SR, 1, 100);
 8000922:	2364      	movs	r3, #100	; 0x64
 8000924:	2201      	movs	r2, #1
 8000926:	492a      	ldr	r1, [pc, #168]	; (80009d0 <readStatusRegister+0xbc>)
 8000928:	482a      	ldr	r0, [pc, #168]	; (80009d4 <readStatusRegister+0xc0>)
 800092a:	f003 f93a 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, statReg, 1, 100);
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <readStatusRegister+0xc4>)
 8000930:	6819      	ldr	r1, [r3, #0]
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	2201      	movs	r2, #1
 8000936:	4827      	ldr	r0, [pc, #156]	; (80009d4 <readStatusRegister+0xc0>)
 8000938:	f003 faa1 	bl	8003e7e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <readStatusRegister+0xb8>)
 8000942:	f001 fd53 	bl	80023ec <HAL_GPIO_WritePin>

	SRP = (*statReg 	& 0b10000000) >> 7;	//Status Register Protect
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <readStatusRegister+0xc4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	09db      	lsrs	r3, r3, #7
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <readStatusRegister+0xc8>)
 8000952:	701a      	strb	r2, [r3, #0]
	TB  = (*statReg 	& 0b00100000) >> 5;	//Top/Bottom Protect
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <readStatusRegister+0xc4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	115b      	asrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <readStatusRegister+0xcc>)
 8000966:	701a      	strb	r2, [r3, #0]
	BP2 = (*statReg 	& 0b00010000) >> 4;	//Block Protect 2
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <readStatusRegister+0xc4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	111b      	asrs	r3, r3, #4
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <readStatusRegister+0xd0>)
 800097a:	701a      	strb	r2, [r3, #0]
	BP1 = (*statReg 	& 0b00001000) >> 3;	//Block Protect 1
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <readStatusRegister+0xc4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	10db      	asrs	r3, r3, #3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <readStatusRegister+0xd4>)
 800098e:	701a      	strb	r2, [r3, #0]
	BP0 = (*statReg 	& 0b00000100) >> 2;	//Block Protect 0
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <readStatusRegister+0xc4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	109b      	asrs	r3, r3, #2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <readStatusRegister+0xd8>)
 80009a2:	701a      	strb	r2, [r3, #0]
	WEL = (*statReg 	& 0b00000010) >> 1;	//Write Enable Latch
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <readStatusRegister+0xc4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	105b      	asrs	r3, r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <readStatusRegister+0xdc>)
 80009b6:	701a      	strb	r2, [r3, #0]
	BUSY = (*statReg & 0b00000001) >> 0;	//Erase/Write In Progress
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <readStatusRegister+0xc4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <readStatusRegister+0xe0>)
 80009c6:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
//	uart_buf_len = sprintf(uart_buf, "WEL: 0x%02x\r\n", SRP);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
//	uart_buf_len = sprintf(uart_buf, "BSY: 0x%02x\r\n", SRP);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	48000400 	.word	0x48000400
 80009d0:	08006ba6 	.word	0x08006ba6
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	2000085c 	.word	0x2000085c
 80009dc:	20000860 	.word	0x20000860
 80009e0:	20000861 	.word	0x20000861
 80009e4:	20000862 	.word	0x20000862
 80009e8:	20000863 	.word	0x20000863
 80009ec:	20000864 	.word	0x20000864
 80009f0:	20000865 	.word	0x20000865
 80009f4:	20000866 	.word	0x20000866

080009f8 <pageProgram>:

/*PAGE PROGRAM*/  //WORKS
void pageProgram(uint32_t address, uint8_t *data, uint32_t size){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	uint8_t command[4] = {PG_PROG, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 8000a04:	2302      	movs	r3, #2
 8000a06:	753b      	strb	r3, [r7, #20]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	0c1b      	lsrs	r3, r3, #16
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	757b      	strb	r3, [r7, #21]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	75bb      	strb	r3, [r7, #22]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	75fb      	strb	r3, [r7, #23]
	writeEnable();
 8000a1e:	f7ff ff5f 	bl	80008e0 <writeEnable>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <pageProgram+0x78>)
 8000a28:	f001 fce0 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, command, 4, 100);
 8000a2c:	f107 0114 	add.w	r1, r7, #20
 8000a30:	2364      	movs	r3, #100	; 0x64
 8000a32:	2204      	movs	r2, #4
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <pageProgram+0x7c>)
 8000a36:	f003 f8b4 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <pageProgram+0x7c>)
 8000a44:	f003 f8ad 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <pageProgram+0x78>)
 8000a4e:	f001 fccd 	bl	80023ec <HAL_GPIO_WritePin>
	do{
		readStatusRegister();
 8000a52:	f7ff ff5f 	bl	8000914 <readStatusRegister>
	}while(BUSY && WEL);
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <pageProgram+0x80>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <pageProgram+0x6e>
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <pageProgram+0x84>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f5      	bne.n	8000a52 <pageProgram+0x5a>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48000400 	.word	0x48000400
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000866 	.word	0x20000866
 8000a7c:	20000865 	.word	0x20000865

08000a80 <readData>:

/*READ DATA*/  //WORKS
void readData(uint32_t address, uint8_t *data, uint32_t size){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	uint8_t command[4] = {RD_DATA, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	753b      	strb	r3, [r7, #20]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	757b      	strb	r3, [r7, #21]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	75bb      	strb	r3, [r7, #22]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <readData+0x60>)
 8000aac:	f001 fc9e 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, command, 4, 100);
 8000ab0:	f107 0114 	add.w	r1, r7, #20
 8000ab4:	2364      	movs	r3, #100	; 0x64
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <readData+0x64>)
 8000aba:	f003 f872 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, size, 100);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <readData+0x64>)
 8000ac8:	f003 f9d9 	bl	8003e7e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <readData+0x60>)
 8000ad2:	f001 fc8b 	bl	80023ec <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	2000008c 	.word	0x2000008c

08000ae8 <erase4KB>:

/*ERASE 4K*/  //WORKS
void erase4KB(uint32_t address){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint8_t command[4] = {ERASE_4KB, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 8000af0:	2320      	movs	r3, #32
 8000af2:	733b      	strb	r3, [r7, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	0c1b      	lsrs	r3, r3, #16
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	737b      	strb	r3, [r7, #13]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	73bb      	strb	r3, [r7, #14]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	73fb      	strb	r3, [r7, #15]
	writeEnable();
 8000b0a:	f7ff fee9 	bl	80008e0 <writeEnable>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <erase4KB+0x64>)
 8000b14:	f001 fc6a 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, command, 4, 100);
 8000b18:	f107 010c 	add.w	r1, r7, #12
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	2204      	movs	r2, #4
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <erase4KB+0x68>)
 8000b22:	f003 f83e 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <erase4KB+0x64>)
 8000b2c:	f001 fc5e 	bl	80023ec <HAL_GPIO_WritePin>
	do{
		readStatusRegister();
 8000b30:	f7ff fef0 	bl	8000914 <readStatusRegister>
	}while(BUSY && WEL);
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <erase4KB+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <erase4KB+0x5c>
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <erase4KB+0x70>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f5      	bne.n	8000b30 <erase4KB+0x48>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	20000866 	.word	0x20000866
 8000b58:	20000865 	.word	0x20000865

08000b5c <eraseChip>:
		readStatusRegister();
	}while(BUSY && WEL);
}

/*ERASE CHIPK*/  //WORKS
void eraseChip(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	writeEnable();
 8000b60:	f7ff febe 	bl	80008e0 <writeEnable>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <eraseChip+0x40>)
 8000b6a:	f001 fc3f 	bl	80023ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&ERASE_CHIP, 1, 100);
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2201      	movs	r2, #1
 8000b72:	490b      	ldr	r1, [pc, #44]	; (8000ba0 <eraseChip+0x44>)
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <eraseChip+0x48>)
 8000b76:	f003 f814 	bl	8003ba2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <eraseChip+0x40>)
 8000b80:	f001 fc34 	bl	80023ec <HAL_GPIO_WritePin>
	do{
		readStatusRegister();
 8000b84:	f7ff fec6 	bl	8000914 <readStatusRegister>
	}while(BUSY && WEL);
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <eraseChip+0x4c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <eraseChip+0x3c>
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <eraseChip+0x50>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f5      	bne.n	8000b84 <eraseChip+0x28>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	08006ba7 	.word	0x08006ba7
 8000ba4:	2000008c 	.word	0x2000008c
 8000ba8:	20000866 	.word	0x20000866
 8000bac:	20000865 	.word	0x20000865

08000bb0 <storeFile>:


void storeFile(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0c6      	sub	sp, #280	; 0x118
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t fileCount, pageCount = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	fileCount = fileCensus();
 8000bbc:	f000 fa82 	bl	80010c4 <fileCensus>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	char filePacket[255];
	int address = fileCount * BLOCK_OFFSET;	//Get the address of the last file in memory
 8000bc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int fileSize = strlen((char *)file);
 8000bd0:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <storeFile+0x134>)
 8000bd2:	f7ff fb07 	bl	80001e4 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	if(fileSize > 255){
 8000bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	dd3f      	ble.n	8000c64 <storeFile+0xb4>
		for(int startLocation = 0; startLocation < fileSize; startLocation += PAGE_OFFSET){
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000bea:	e034      	b.n	8000c56 <storeFile+0xa6>
			int tempAddr = address + BLOCK_OFFSET + (PAGE_OFFSET * pageCount);
 8000bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000bf0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	4413      	add	r3, r2
 8000bfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			memset((char *)filePacket, '\0', strlen((char *)filePacket));
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff faee 	bl	80001e4 <strlen>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 fa76 	bl	8006100 <memset>
			memcpy(filePacket, file + startLocation, PAGE_OFFSET);
 8000c14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c18:	4a32      	ldr	r2, [pc, #200]	; (8000ce4 <storeFile+0x134>)
 8000c1a:	1899      	adds	r1, r3, r2
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	4618      	mov	r0, r3
 8000c24:	f005 fa5e 	bl	80060e4 <memcpy>
			pageProgram(tempAddr, (uint8_t*)filePacket, PAGE_OFFSET);	//Store the incoming file at the next available location.
 8000c28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fee0 	bl	80009f8 <pageProgram>
			HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3c:	f001 f878 	bl	8001d30 <HAL_Delay>
			pageCount++;
 8000c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000c44:	3301      	adds	r3, #1
 8000c46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for(int startLocation = 0; startLocation < fileSize; startLocation += PAGE_OFFSET){
 8000c4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000c56:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbc4      	blt.n	8000bec <storeFile+0x3c>
 8000c62:	e008      	b.n	8000c76 <storeFile+0xc6>
		}
	}else{
		pageProgram(address + BLOCK_OFFSET, (uint8_t*)file, 255);	//Store the incoming file at the next available location.
 8000c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c6c:	22ff      	movs	r2, #255	; 0xff
 8000c6e:	491d      	ldr	r1, [pc, #116]	; (8000ce4 <storeFile+0x134>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fec1 	bl	80009f8 <pageProgram>
	}
	//Format the TOC after storing the data.
	formatTOC();
 8000c76:	f000 f987 	bl	8000f88 <formatTOC>
	memset((char *)file, '\0', strlen((char *)file));/*<--------------------------------------------------------------------------------------------------------------------*/
 8000c7a:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <storeFile+0x134>)
 8000c7c:	f7ff fab2 	bl	80001e4 <strlen>
 8000c80:	4603      	mov	r3, r0
 8000c82:	461a      	mov	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <storeFile+0x134>)
 8000c88:	f005 fa3a 	bl	8006100 <memset>
	strcpy((char*)cmdResponse,"\r\n-->");
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <storeFile+0x138>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <storeFile+0x13c>)
 8000c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c94:	6018      	str	r0, [r3, #0]
 8000c96:	3304      	adds	r3, #4
 8000c98:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <storeFile+0x138>)
 8000c9c:	f7ff faa2 	bl	80001e4 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4910      	ldr	r1, [pc, #64]	; (8000ce8 <storeFile+0x138>)
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <storeFile+0x140>)
 8000caa:	f003 fe35 	bl	8004918 <HAL_UART_Transmit_IT>

	memset((char *)cmd, '\0', strlen((char *)cmd));
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <storeFile+0x144>)
 8000cb0:	f7ff fa98 	bl	80001e4 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <storeFile+0x144>)
 8000cbc:	f005 fa20 	bl	8006100 <memset>
	memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <storeFile+0x148>)
 8000cc2:	f7ff fa8f 	bl	80001e4 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <storeFile+0x148>)
 8000cce:	f005 fa17 	bl	8006100 <memset>
	fileReceived = 0;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <storeFile+0x14c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200002f0 	.word	0x200002f0
 8000ce8:	2000028c 	.word	0x2000028c
 8000cec:	08006b10 	.word	0x08006b10
 8000cf0:	200000f0 	.word	0x200000f0
 8000cf4:	2000020c 	.word	0x2000020c
 8000cf8:	20000240 	.word	0x20000240
 8000cfc:	20000868 	.word	0x20000868

08000d00 <confirmCmd>:

void confirmCmd(void){
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	if(executeCmd){
 8000d04:	4b90      	ldr	r3, [pc, #576]	; (8000f48 <confirmCmd+0x248>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 811b 	beq.w	8000f44 <confirmCmd+0x244>
		if (strcmp((char*)cmd, "STORE") == 0){							//DONE
 8000d0e:	498f      	ldr	r1, [pc, #572]	; (8000f4c <confirmCmd+0x24c>)
 8000d10:	488f      	ldr	r0, [pc, #572]	; (8000f50 <confirmCmd+0x250>)
 8000d12:	f7ff fa5d 	bl	80001d0 <strcmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <confirmCmd+0x24>
			//Send receipt of command
//			strcpy((char*)cmdResponse,"STORE EXEC\r\n");
//			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
//			memset((char *)cmd, '\0', strlen((char *)cmd));
//			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
			store = 1;
 8000d1c:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <confirmCmd+0x254>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
			memset((char *)cmd, '\0', strlen((char *)cmd));
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
			executeCmd = 0;
		}
	}
}
 8000d22:	e10f      	b.n	8000f44 <confirmCmd+0x244>
		}else if(strcmp((char*)cmd, "DELETE") == 0){					//DONE
 8000d24:	498c      	ldr	r1, [pc, #560]	; (8000f58 <confirmCmd+0x258>)
 8000d26:	488a      	ldr	r0, [pc, #552]	; (8000f50 <confirmCmd+0x250>)
 8000d28:	f7ff fa52 	bl	80001d0 <strcmp>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d139      	bne.n	8000da6 <confirmCmd+0xa6>
			deleteFile(atoi((char *)cmdArg));
 8000d32:	488a      	ldr	r0, [pc, #552]	; (8000f5c <confirmCmd+0x25c>)
 8000d34:	f005 f9a7 	bl	8006086 <atoi>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fb91 	bl	8001464 <deleteFile>
			HAL_Delay(1000);
 8000d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d46:	f000 fff3 	bl	8001d30 <HAL_Delay>
			formatTOC();
 8000d4a:	f000 f91d 	bl	8000f88 <formatTOC>
			HAL_Delay(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 ffed 	bl	8001d30 <HAL_Delay>
			strcpy((char*)cmdResponse,"DELETE EXEC\r\n-->");
 8000d56:	4a82      	ldr	r2, [pc, #520]	; (8000f60 <confirmCmd+0x260>)
 8000d58:	4b82      	ldr	r3, [pc, #520]	; (8000f64 <confirmCmd+0x264>)
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000d66:	487e      	ldr	r0, [pc, #504]	; (8000f60 <confirmCmd+0x260>)
 8000d68:	f7ff fa3c 	bl	80001e4 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	497b      	ldr	r1, [pc, #492]	; (8000f60 <confirmCmd+0x260>)
 8000d74:	487c      	ldr	r0, [pc, #496]	; (8000f68 <confirmCmd+0x268>)
 8000d76:	f003 fdcf 	bl	8004918 <HAL_UART_Transmit_IT>
			memset((char *)cmd, '\0', strlen((char *)cmd));
 8000d7a:	4875      	ldr	r0, [pc, #468]	; (8000f50 <confirmCmd+0x250>)
 8000d7c:	f7ff fa32 	bl	80001e4 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	2100      	movs	r1, #0
 8000d86:	4872      	ldr	r0, [pc, #456]	; (8000f50 <confirmCmd+0x250>)
 8000d88:	f005 f9ba 	bl	8006100 <memset>
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000d8c:	4873      	ldr	r0, [pc, #460]	; (8000f5c <confirmCmd+0x25c>)
 8000d8e:	f7ff fa29 	bl	80001e4 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	4870      	ldr	r0, [pc, #448]	; (8000f5c <confirmCmd+0x25c>)
 8000d9a:	f005 f9b1 	bl	8006100 <memset>
			executeCmd = 0;
 8000d9e:	4b6a      	ldr	r3, [pc, #424]	; (8000f48 <confirmCmd+0x248>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	e0ce      	b.n	8000f44 <confirmCmd+0x244>
		}else if(strcmp((char*)cmd, "READ") == 0){						//DONE
 8000da6:	4971      	ldr	r1, [pc, #452]	; (8000f6c <confirmCmd+0x26c>)
 8000da8:	4869      	ldr	r0, [pc, #420]	; (8000f50 <confirmCmd+0x250>)
 8000daa:	f7ff fa11 	bl	80001d0 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10b      	bne.n	8000dcc <confirmCmd+0xcc>
			readFile(atoi((char *)cmdArg));
 8000db4:	4869      	ldr	r0, [pc, #420]	; (8000f5c <confirmCmd+0x25c>)
 8000db6:	f005 f966 	bl	8006086 <atoi>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fb76 	bl	80014b0 <readFile>
			executeCmd = 0;
 8000dc4:	4b60      	ldr	r3, [pc, #384]	; (8000f48 <confirmCmd+0x248>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	e0bb      	b.n	8000f44 <confirmCmd+0x244>
		}else if(strcmp((char*)cmd, "DIR") == 0){
 8000dcc:	4968      	ldr	r1, [pc, #416]	; (8000f70 <confirmCmd+0x270>)
 8000dce:	4860      	ldr	r0, [pc, #384]	; (8000f50 <confirmCmd+0x250>)
 8000dd0:	f7ff f9fe 	bl	80001d0 <strcmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d128      	bne.n	8000e2c <confirmCmd+0x12c>
			printTOC();
 8000dda:	f000 f927 	bl	800102c <printTOC>
			strcpy((char*)cmdResponse,"\r\n-->");
 8000dde:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <confirmCmd+0x260>)
 8000de0:	4a64      	ldr	r2, [pc, #400]	; (8000f74 <confirmCmd+0x274>)
 8000de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de6:	6018      	str	r0, [r3, #0]
 8000de8:	3304      	adds	r3, #4
 8000dea:	8019      	strh	r1, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000dec:	485c      	ldr	r0, [pc, #368]	; (8000f60 <confirmCmd+0x260>)
 8000dee:	f7ff f9f9 	bl	80001e4 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	4959      	ldr	r1, [pc, #356]	; (8000f60 <confirmCmd+0x260>)
 8000dfa:	485b      	ldr	r0, [pc, #364]	; (8000f68 <confirmCmd+0x268>)
 8000dfc:	f003 fd8c 	bl	8004918 <HAL_UART_Transmit_IT>
			memset((char *)cmd, '\0', strlen((char *)cmd));
 8000e00:	4853      	ldr	r0, [pc, #332]	; (8000f50 <confirmCmd+0x250>)
 8000e02:	f7ff f9ef 	bl	80001e4 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4850      	ldr	r0, [pc, #320]	; (8000f50 <confirmCmd+0x250>)
 8000e0e:	f005 f977 	bl	8006100 <memset>
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000e12:	4852      	ldr	r0, [pc, #328]	; (8000f5c <confirmCmd+0x25c>)
 8000e14:	f7ff f9e6 	bl	80001e4 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	484f      	ldr	r0, [pc, #316]	; (8000f5c <confirmCmd+0x25c>)
 8000e20:	f005 f96e 	bl	8006100 <memset>
			executeCmd = 0;
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <confirmCmd+0x248>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
}
 8000e2a:	e08b      	b.n	8000f44 <confirmCmd+0x244>
		}else if(strcmp((char*)cmd, "MEM") == 0){						//Double-Check functionality when STORE works
 8000e2c:	4952      	ldr	r1, [pc, #328]	; (8000f78 <confirmCmd+0x278>)
 8000e2e:	4848      	ldr	r0, [pc, #288]	; (8000f50 <confirmCmd+0x250>)
 8000e30:	f7ff f9ce 	bl	80001d0 <strcmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d128      	bne.n	8000e8c <confirmCmd+0x18c>
			getAvailableMemory();
 8000e3a:	f000 fbed 	bl	8001618 <getAvailableMemory>
			strcpy((char*)cmdResponse,"\r\n-->");
 8000e3e:	4b48      	ldr	r3, [pc, #288]	; (8000f60 <confirmCmd+0x260>)
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <confirmCmd+0x274>)
 8000e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e46:	6018      	str	r0, [r3, #0]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	8019      	strh	r1, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000e4c:	4844      	ldr	r0, [pc, #272]	; (8000f60 <confirmCmd+0x260>)
 8000e4e:	f7ff f9c9 	bl	80001e4 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	4941      	ldr	r1, [pc, #260]	; (8000f60 <confirmCmd+0x260>)
 8000e5a:	4843      	ldr	r0, [pc, #268]	; (8000f68 <confirmCmd+0x268>)
 8000e5c:	f003 fd5c 	bl	8004918 <HAL_UART_Transmit_IT>
			memset((char *)cmd, '\0', strlen((char *)cmd));
 8000e60:	483b      	ldr	r0, [pc, #236]	; (8000f50 <confirmCmd+0x250>)
 8000e62:	f7ff f9bf 	bl	80001e4 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4838      	ldr	r0, [pc, #224]	; (8000f50 <confirmCmd+0x250>)
 8000e6e:	f005 f947 	bl	8006100 <memset>
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000e72:	483a      	ldr	r0, [pc, #232]	; (8000f5c <confirmCmd+0x25c>)
 8000e74:	f7ff f9b6 	bl	80001e4 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4837      	ldr	r0, [pc, #220]	; (8000f5c <confirmCmd+0x25c>)
 8000e80:	f005 f93e 	bl	8006100 <memset>
			executeCmd = 0;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <confirmCmd+0x248>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	e05b      	b.n	8000f44 <confirmCmd+0x244>
		}else if(strcmp((char*)cmd, "CLEAR") == 0){						//DONE
 8000e8c:	493b      	ldr	r1, [pc, #236]	; (8000f7c <confirmCmd+0x27c>)
 8000e8e:	4830      	ldr	r0, [pc, #192]	; (8000f50 <confirmCmd+0x250>)
 8000e90:	f7ff f99e 	bl	80001d0 <strcmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d12f      	bne.n	8000efa <confirmCmd+0x1fa>
			eraseChip();
 8000e9a:	f7ff fe5f 	bl	8000b5c <eraseChip>
			HAL_Delay(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f000 ff45 	bl	8001d30 <HAL_Delay>
			strcpy((char*)cmdResponse,"Chip erased successfully\r\n-->");
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <confirmCmd+0x260>)
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <confirmCmd+0x280>)
 8000eaa:	4614      	mov	r4, r2
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb6:	c407      	stmia	r4!, {r0, r1, r2}
 8000eb8:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000eba:	4829      	ldr	r0, [pc, #164]	; (8000f60 <confirmCmd+0x260>)
 8000ebc:	f7ff f992 	bl	80001e4 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4926      	ldr	r1, [pc, #152]	; (8000f60 <confirmCmd+0x260>)
 8000ec8:	4827      	ldr	r0, [pc, #156]	; (8000f68 <confirmCmd+0x268>)
 8000eca:	f003 fd25 	bl	8004918 <HAL_UART_Transmit_IT>
			memset((char *)cmd, '\0', strlen((char *)cmd));
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <confirmCmd+0x250>)
 8000ed0:	f7ff f988 	bl	80001e4 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	481d      	ldr	r0, [pc, #116]	; (8000f50 <confirmCmd+0x250>)
 8000edc:	f005 f910 	bl	8006100 <memset>
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000ee0:	481e      	ldr	r0, [pc, #120]	; (8000f5c <confirmCmd+0x25c>)
 8000ee2:	f7ff f97f 	bl	80001e4 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <confirmCmd+0x25c>)
 8000eee:	f005 f907 	bl	8006100 <memset>
			executeCmd = 0;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <confirmCmd+0x248>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
}
 8000ef8:	e024      	b.n	8000f44 <confirmCmd+0x244>
			strcpy((char*)cmdResponse,"INVALID\r\n-->");
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <confirmCmd+0x260>)
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <confirmCmd+0x284>)
 8000efe:	4614      	mov	r4, r2
 8000f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f02:	c407      	stmia	r4!, {r0, r1, r2}
 8000f04:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 8000f06:	4816      	ldr	r0, [pc, #88]	; (8000f60 <confirmCmd+0x260>)
 8000f08:	f7ff f96c 	bl	80001e4 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4913      	ldr	r1, [pc, #76]	; (8000f60 <confirmCmd+0x260>)
 8000f14:	4814      	ldr	r0, [pc, #80]	; (8000f68 <confirmCmd+0x268>)
 8000f16:	f003 fcff 	bl	8004918 <HAL_UART_Transmit_IT>
			memset((char *)cmd, '\0', strlen((char *)cmd));
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <confirmCmd+0x250>)
 8000f1c:	f7ff f962 	bl	80001e4 <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <confirmCmd+0x250>)
 8000f28:	f005 f8ea 	bl	8006100 <memset>
			memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <confirmCmd+0x25c>)
 8000f2e:	f7ff f959 	bl	80001e4 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <confirmCmd+0x25c>)
 8000f3a:	f005 f8e1 	bl	8006100 <memset>
			executeCmd = 0;
 8000f3e:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <confirmCmd+0x248>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}
 8000f48:	20000288 	.word	0x20000288
 8000f4c:	08006b18 	.word	0x08006b18
 8000f50:	2000020c 	.word	0x2000020c
 8000f54:	20000867 	.word	0x20000867
 8000f58:	08006b20 	.word	0x08006b20
 8000f5c:	20000240 	.word	0x20000240
 8000f60:	2000028c 	.word	0x2000028c
 8000f64:	08006b28 	.word	0x08006b28
 8000f68:	200000f0 	.word	0x200000f0
 8000f6c:	08006b3c 	.word	0x08006b3c
 8000f70:	08006b44 	.word	0x08006b44
 8000f74:	08006b10 	.word	0x08006b10
 8000f78:	08006b48 	.word	0x08006b48
 8000f7c:	08006b4c 	.word	0x08006b4c
 8000f80:	08006b54 	.word	0x08006b54
 8000f84:	08006b74 	.word	0x08006b74

08000f88 <formatTOC>:

void formatTOC(void){
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
	int address = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
	int f = 1, fileCount = 0;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
	erase4KB(TOC_ADDR);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fda4 	bl	8000ae8 <erase4KB>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f000 fec5 	bl	8001d30 <HAL_Delay>
	//	Get a census of the files in memory and update the table.
	fileCount = fileCensus();
 8000fa6:	f000 f88d 	bl	80010c4 <fileCensus>
 8000faa:	4603      	mov	r3, r0
 8000fac:	607b      	str	r3, [r7, #4]

	for(f = 1; f <= fileCount; f++){
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	e02f      	b.n	8001014 <formatTOC+0x8c>
		memset(title, '\0', strlen(title));
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <formatTOC+0xa0>)
 8000fb6:	f7ff f915 	bl	80001e4 <strlen>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4819      	ldr	r0, [pc, #100]	; (8001028 <formatTOC+0xa0>)
 8000fc2:	f005 f89d 	bl	8006100 <memset>
		getTitle(f);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8ec 	bl	80011a8 <getTitle>

		for(address = 0; address < 0x1E0; address += TOC_OFFSET){	//Find the address to store the filename
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e008      	b.n	8000fe8 <formatTOC+0x60>
			if(((address >> 5) + 1) == f){
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	115b      	asrs	r3, r3, #5
 8000fda:	3301      	adds	r3, #1
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d007      	beq.n	8000ff2 <formatTOC+0x6a>
		for(address = 0; address < 0x1E0; address += TOC_OFFSET){	//Find the address to store the filename
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3320      	adds	r3, #32
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000fee:	dbf2      	blt.n	8000fd6 <formatTOC+0x4e>
 8000ff0:	e000      	b.n	8000ff4 <formatTOC+0x6c>
				break;
 8000ff2:	bf00      	nop
			}
		}

		pageProgram(address, (uint8_t *)title, strlen(title)); //File in TOC take up 32 bytes.
 8000ff4:	68fc      	ldr	r4, [r7, #12]
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <formatTOC+0xa0>)
 8000ff8:	f7ff f8f4 	bl	80001e4 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <formatTOC+0xa0>)
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff fcf8 	bl	80009f8 <pageProgram>
		HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f000 fe91 	bl	8001d30 <HAL_Delay>
	for(f = 1; f <= fileCount; f++){
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3301      	adds	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	ddcb      	ble.n	8000fb4 <formatTOC+0x2c>
//		readData(address, spi_buf, PAGE_OFFSET);
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	200006f4 	.word	0x200006f4

0800102c <printTOC>:

void printTOC(void){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	int address = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
	uint8_t f, fileCount;
	fileCount = fileCensus();
 8001036:	f000 f845 	bl	80010c4 <fileCensus>
 800103a:	4603      	mov	r3, r0
 800103c:	70bb      	strb	r3, [r7, #2]
	memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <printTOC+0x90>)
 8001040:	f7ff f8d0 	bl	80001e4 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <printTOC+0x90>)
 800104c:	f005 f858 	bl	8006100 <memset>
	for(f = 1; f <= fileCount; f++){
 8001050:	2301      	movs	r3, #1
 8001052:	70fb      	strb	r3, [r7, #3]
 8001054:	e028      	b.n	80010a8 <printTOC+0x7c>
		for(address = 0; address < 0x1E0; address += TOC_OFFSET){	//Find the address to store the filename
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e008      	b.n	800106e <printTOC+0x42>
			if(((address >> 5) + 1) == f){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	115b      	asrs	r3, r3, #5
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	429a      	cmp	r2, r3
 8001066:	d007      	beq.n	8001078 <printTOC+0x4c>
		for(address = 0; address < 0x1E0; address += TOC_OFFSET){	//Find the address to store the filename
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3320      	adds	r3, #32
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001074:	dbf2      	blt.n	800105c <printTOC+0x30>
 8001076:	e000      	b.n	800107a <printTOC+0x4e>
				break;
 8001078:	bf00      	nop
			}
		}
		readData(address, spi_buf, 32);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2220      	movs	r2, #32
 800107e:	490f      	ldr	r1, [pc, #60]	; (80010bc <printTOC+0x90>)
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fcfd 	bl	8000a80 <readData>
		HAL_UART_Transmit_IT(&huart1, spi_buf, strlen((char *)spi_buf));
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <printTOC+0x90>)
 8001088:	f7ff f8ac 	bl	80001e4 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29b      	uxth	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	490a      	ldr	r1, [pc, #40]	; (80010bc <printTOC+0x90>)
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <printTOC+0x94>)
 8001096:	f003 fc3f 	bl	8004918 <HAL_UART_Transmit_IT>
		HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109e:	f000 fe47 	bl	8001d30 <HAL_Delay>
	for(f = 1; f <= fileCount; f++){
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	3301      	adds	r3, #1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	78bb      	ldrb	r3, [r7, #2]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d9d2      	bls.n	8001056 <printTOC+0x2a>


//	readData(TOC_ADDR, spi_buf, 255);
//	HAL_UART_Transmit_IT(&huart1, spi_buf, strlen((char *)spi_buf));
//	HAL_Delay(500);
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000758 	.word	0x20000758
 80010c0:	200000f0 	.word	0x200000f0

080010c4 <fileCensus>:

uint8_t fileCensus(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	//Go through all the starting addresses of ALL 4KB
	//sectors and keep track of all which don't start with 0xFF
	//need to get their location (Known) and filename.
	int address;
	fileCount = 0;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <fileCensus+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e01c      	b.n	8001112 <fileCensus+0x4e>
		memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 80010d8:	4815      	ldr	r0, [pc, #84]	; (8001130 <fileCensus+0x6c>)
 80010da:	f7ff f883 	bl	80001e4 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <fileCensus+0x6c>)
 80010e6:	f005 f80b 	bl	8006100 <memset>
		readData(address, spi_buf, 1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4910      	ldr	r1, [pc, #64]	; (8001130 <fileCensus+0x6c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fcc5 	bl	8000a80 <readData>
		if(spi_buf[0] != 0xFF){
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <fileCensus+0x6c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d00e      	beq.n	800111c <fileCensus+0x58>
			fileCount++;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <fileCensus+0x68>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <fileCensus+0x68>)
 8001108:	701a      	strb	r2, [r3, #0]
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001118:	dbde      	blt.n	80010d8 <fileCensus+0x14>
 800111a:	e000      	b.n	800111e <fileCensus+0x5a>
		}else{
			break;
 800111c:	bf00      	nop
		}
	}
	return fileCount;
 800111e:	4b03      	ldr	r3, [pc, #12]	; (800112c <fileCensus+0x68>)
 8001120:	781b      	ldrb	r3, [r3, #0]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000858 	.word	0x20000858
 8001130:	20000758 	.word	0x20000758

08001134 <pageCensus>:

uint8_t pageCensus(int blockStartAddr){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	//Go through all the starting addresses of ALL 4KB
	//sectors and keep track of all which don't start with 0xFF
	//need to get their location (Known) and filename.
	int address;
	pageCount = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <pageCensus+0x6c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	for(address = blockStartAddr; address <= (blockStartAddr + LAST_PAGE_OFF); address += PAGE_OFFSET){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e01c      	b.n	8001182 <pageCensus+0x4e>
		memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <pageCensus+0x70>)
 800114a:	f7ff f84b 	bl	80001e4 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <pageCensus+0x70>)
 8001156:	f004 ffd3 	bl	8006100 <memset>
		readData(address, spi_buf, 1);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	4911      	ldr	r1, [pc, #68]	; (80011a4 <pageCensus+0x70>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fc8d 	bl	8000a80 <readData>
		if(spi_buf[0] != 0xFF){
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <pageCensus+0x70>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d010      	beq.n	8001190 <pageCensus+0x5c>
			pageCount++;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <pageCensus+0x6c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <pageCensus+0x6c>)
 8001178:	701a      	strb	r2, [r3, #0]
	for(address = blockStartAddr; address <= (blockStartAddr + LAST_PAGE_OFF); address += PAGE_OFFSET){
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	429a      	cmp	r2, r3
 800118c:	dddc      	ble.n	8001148 <pageCensus+0x14>
 800118e:	e000      	b.n	8001192 <pageCensus+0x5e>
		}else{
			break;
 8001190:	bf00      	nop
		}
	}
	return pageCount;
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <pageCensus+0x6c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000859 	.word	0x20000859
 80011a4:	20000758 	.word	0x20000758

080011a8 <getTitle>:

void getTitle(uint8_t fileNum){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	int addr = 0, i = 4, fileSize;
 80011b2:	2300      	movs	r3, #0
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011b6:	2304      	movs	r3, #4
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
	char fileNumString[30] = {0}, fileSizeString[20] = {0};
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	831a      	strh	r2, [r3, #24]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
	memset((char *)fileNumString, '\0', strlen((char *)fileNumString));
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7fe fffb 	bl	80001e4 <strlen>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 ff82 	bl	8006100 <memset>
	sprintf(fileNumString, "%d", (int)fileNum);
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	494a      	ldr	r1, [pc, #296]	; (800132c <getTitle+0x184>)
 8001204:	4618      	mov	r0, r3
 8001206:	f004 ff83 	bl	8006110 <siprintf>

	title[0] = '\r';
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <getTitle+0x188>)
 800120c:	220d      	movs	r2, #13
 800120e:	701a      	strb	r2, [r3, #0]
	title[1] = '\n';
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <getTitle+0x188>)
 8001212:	220a      	movs	r2, #10
 8001214:	705a      	strb	r2, [r3, #1]
//	strcpy(&title[2], fileNumString);
//	title[3] = '-';

	i = 2 + strlen(fileNumString);
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffe2 	bl	80001e4 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	3302      	adds	r3, #2
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
	for (int j = 2; j < i; j++) {
 8001226:	2302      	movs	r3, #2
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
 800122a:	e00d      	b.n	8001248 <getTitle+0xa0>
		title[j] = fileNumString[j - 2];
 800122c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800122e:	3b02      	subs	r3, #2
 8001230:	3350      	adds	r3, #80	; 0x50
 8001232:	443b      	add	r3, r7
 8001234:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 8001238:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <getTitle+0x188>)
 800123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123c:	4413      	add	r3, r2
 800123e:	460a      	mov	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
	for (int j = 2; j < i; j++) {
 8001242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001244:	3301      	adds	r3, #1
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
 8001248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800124a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800124c:	429a      	cmp	r2, r3
 800124e:	dbed      	blt.n	800122c <getTitle+0x84>
	}
	title[i] = '-';
 8001250:	4a37      	ldr	r2, [pc, #220]	; (8001330 <getTitle+0x188>)
 8001252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001254:	4413      	add	r3, r2
 8001256:	222d      	movs	r2, #45	; 0x2d
 8001258:	701a      	strb	r2, [r3, #0]
	i+=1;
 800125a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800125c:	3301      	adds	r3, #1
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
	addr = getFileStart(fileNum);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f86a 	bl	800133c <getFileStart>
 8001268:	64f8      	str	r0, [r7, #76]	; 0x4c
	readData(addr, spi_buf, 1);
 800126a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126c:	2201      	movs	r2, #1
 800126e:	4931      	ldr	r1, [pc, #196]	; (8001334 <getTitle+0x18c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fc05 	bl	8000a80 <readData>
	title[i] = spi_buf[0];
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <getTitle+0x18c>)
 8001278:	7819      	ldrb	r1, [r3, #0]
 800127a:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <getTitle+0x188>)
 800127c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	for(addr = getFileStart(fileNum); spi_buf[0] != '\r'; addr++){
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f858 	bl	800133c <getFileStart>
 800128c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800128e:	e019      	b.n	80012c4 <getTitle+0x11c>
		readData(addr, spi_buf, 1);
 8001290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001292:	2201      	movs	r2, #1
 8001294:	4927      	ldr	r1, [pc, #156]	; (8001334 <getTitle+0x18c>)
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fbf2 	bl	8000a80 <readData>
		HAL_Delay(5);
 800129c:	2005      	movs	r0, #5
 800129e:	f000 fd47 	bl	8001d30 <HAL_Delay>
		if(spi_buf[0] != '\r'){
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <getTitle+0x18c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b0d      	cmp	r3, #13
 80012a8:	d011      	beq.n	80012ce <getTitle+0x126>
			title[i] = spi_buf[0];
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <getTitle+0x18c>)
 80012ac:	7819      	ldrb	r1, [r3, #0]
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <getTitle+0x188>)
 80012b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
			i++;
 80012b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ba:	3301      	adds	r3, #1
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
	for(addr = getFileStart(fileNum); spi_buf[0] != '\r'; addr++){
 80012be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c0:	3301      	adds	r3, #1
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <getTitle+0x18c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b0d      	cmp	r3, #13
 80012ca:	d1e1      	bne.n	8001290 <getTitle+0xe8>
 80012cc:	e000      	b.n	80012d0 <getTitle+0x128>
		}else{
			break;
 80012ce:	bf00      	nop
		}
	}
	fileSize = getFileSize(fileNum);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f96e 	bl	80015b4 <getFileSize>
 80012d8:	6438      	str	r0, [r7, #64]	; 0x40
	sprintf(fileSizeString, " %d B", fileSize);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012e0:	4915      	ldr	r1, [pc, #84]	; (8001338 <getTitle+0x190>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 ff14 	bl	8006110 <siprintf>
	strcpy(&title[i], fileSizeString);
 80012e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ea:	4a11      	ldr	r2, [pc, #68]	; (8001330 <getTitle+0x188>)
 80012ec:	4413      	add	r3, r2
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 ff2b 	bl	8006150 <strcpy>
	i += strlen(fileSizeString);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff70 	bl	80001e4 <strlen>
 8001304:	4602      	mov	r2, r0
 8001306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001308:	4413      	add	r3, r2
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48

	do{
		title[i] = '\x20';
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <getTitle+0x188>)
 800130e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001310:	4413      	add	r3, r2
 8001312:	2220      	movs	r2, #32
 8001314:	701a      	strb	r2, [r3, #0]
		i++;
 8001316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001318:	3301      	adds	r3, #1
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
	}while(i < 32);
 800131c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131e:	2b1f      	cmp	r3, #31
 8001320:	ddf4      	ble.n	800130c <getTitle+0x164>
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3750      	adds	r7, #80	; 0x50
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08006b84 	.word	0x08006b84
 8001330:	200006f4 	.word	0x200006f4
 8001334:	20000758 	.word	0x20000758
 8001338:	08006b88 	.word	0x08006b88

0800133c <getFileStart>:

int getFileStart(uint8_t fileNum){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	int address;
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e01f      	b.n	800138e <getFileStart+0x52>
		if((address >> 12) == fileNum){
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	131a      	asrs	r2, r3, #12
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	429a      	cmp	r2, r3
 8001356:	d116      	bne.n	8001386 <getFileStart+0x4a>
			memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <getFileStart+0x64>)
 800135a:	f7fe ff43 	bl	80001e4 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	480e      	ldr	r0, [pc, #56]	; (80013a0 <getFileStart+0x64>)
 8001366:	f004 fecb 	bl	8006100 <memset>
			readData(address, spi_buf, 1);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <getFileStart+0x64>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb85 	bl	8000a80 <readData>
			if(spi_buf[0] != 0xFF){
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <getFileStart+0x64>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d001      	beq.n	8001382 <getFileStart+0x46>
				return address;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	e009      	b.n	8001396 <getFileStart+0x5a>
			}else{
				return 0;
 8001382:	2300      	movs	r3, #0
 8001384:	e007      	b.n	8001396 <getFileStart+0x5a>
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001394:	dbdb      	blt.n	800134e <getFileStart+0x12>
			}
		}
	}
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000758 	.word	0x20000758

080013a4 <getFileEnd>:

int getFileEnd(uint8_t fileNum){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	//Two Options

	//Option ONE:
	//read in page by page starting at the starting address until 0xFF char is found
	int address, pageAddr, charAddr;
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){		//Find the desired 4KB Mem Block
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e04a      	b.n	800144c <getFileEnd+0xa8>
		if((address >> 12) == fileNum){																	//Determine if the address corresponds to the file
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	131a      	asrs	r2, r3, #12
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d141      	bne.n	8001444 <getFileEnd+0xa0>
			for(pageAddr = address + LAST_PAGE_OFF; pageAddr >= address; pageAddr -= PAGE_OFFSET){		//Determine which page has data in decending order
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e038      	b.n	800143c <getFileEnd+0x98>
				memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <getFileEnd+0xbc>)
 80013cc:	f7fe ff0a 	bl	80001e4 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	4822      	ldr	r0, [pc, #136]	; (8001460 <getFileEnd+0xbc>)
 80013d8:	f004 fe92 	bl	8006100 <memset>
				readData(pageAddr, spi_buf, 1);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2201      	movs	r2, #1
 80013e0:	491f      	ldr	r1, [pc, #124]	; (8001460 <getFileEnd+0xbc>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fb4c 	bl	8000a80 <readData>
				if(spi_buf[0] != 0xFF){
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <getFileEnd+0xbc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2bff      	cmp	r3, #255	; 0xff
 80013ee:	d020      	beq.n	8001432 <getFileEnd+0x8e>
					for(charAddr = pageAddr; charAddr  < (pageAddr + PAGE_END_OFF); charAddr++){
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e017      	b.n	8001426 <getFileEnd+0x82>
						memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <getFileEnd+0xbc>)
 80013f8:	f7fe fef4 	bl	80001e4 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <getFileEnd+0xbc>)
 8001404:	f004 fe7c 	bl	8006100 <memset>
						readData(charAddr, spi_buf, 1);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	4914      	ldr	r1, [pc, #80]	; (8001460 <getFileEnd+0xbc>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb36 	bl	8000a80 <readData>
						if(spi_buf[0] == '\0'){
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <getFileEnd+0xbc>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <getFileEnd+0x7c>
							return charAddr;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	e01a      	b.n	8001456 <getFileEnd+0xb2>
					for(charAddr = pageAddr; charAddr  < (pageAddr + PAGE_END_OFF); charAddr++){
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	33fe      	adds	r3, #254	; 0xfe
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	dde2      	ble.n	80013f6 <getFileEnd+0x52>
 8001430:	e000      	b.n	8001434 <getFileEnd+0x90>
						}else{
							continue;
						}
					}
				}else{
					continue;
 8001432:	bf00      	nop
			for(pageAddr = address + LAST_PAGE_OFF; pageAddr >= address; pageAddr -= PAGE_OFFSET){		//Determine which page has data in decending order
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	dac2      	bge.n	80013ca <getFileEnd+0x26>
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){		//Find the desired 4KB Mem Block
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001452:	dbb0      	blt.n	80013b6 <getFileEnd+0x12>
	}

	//Option TWO:
	//Count from the end of the 4KB sector until non-0xFF data is found

	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000758 	.word	0x20000758

08001464 <deleteFile>:

void deleteFile(uint8_t fileNum){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	//Delete File
	//Move last file in memory up to recently-deleted file.
	//Choose whether to move the entire file at once of breakdown file into data packets.

	int address;
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e011      	b.n	800149a <deleteFile+0x36>
		if((address >> 12) == fileNum){
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	131a      	asrs	r2, r3, #12
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	429a      	cmp	r2, r3
 800147e:	d108      	bne.n	8001492 <deleteFile+0x2e>
			//DELETE 4KB sector
			erase4KB(address);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb30 	bl	8000ae8 <erase4KB>
			HAL_Delay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f000 fc50 	bl	8001d30 <HAL_Delay>
			break;
 8001490:	e007      	b.n	80014a2 <deleteFile+0x3e>
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 80014a0:	dbe9      	blt.n	8001476 <deleteFile+0x12>
		}
	}
	defragment(address);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f8fa 	bl	800169c <defragment>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <readFile>:

void readFile(uint8_t fileNum){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	//Delete File
	//Move last file in memory up to recently-deleted file.
	//Choose whether to move the entire file at once of breakdown file into data packets.
//	uint8_t pageCount = 0;
	int address;
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e062      	b.n	8001588 <readFile+0xd8>
		if((address >> 12) == fileNum){
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	131a      	asrs	r2, r3, #12
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d159      	bne.n	8001580 <readFile+0xd0>
			pageCount = pageCensus(address);
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff fe31 	bl	8001134 <pageCensus>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <readFile+0xec>)
 80014d8:	701a      	strb	r2, [r3, #0]
			if(pageCount > 1){
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <readFile+0xec>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d922      	bls.n	8001528 <readFile+0x78>
				for(int startLocation = 0; startLocation < (PAGE_OFFSET * pageCount); startLocation += PAGE_OFFSET){
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e018      	b.n	800151a <readFile+0x6a>
					int tempAddr = address + startLocation;
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
					readData(tempAddr, spi_buf, PAGE_OFFSET);	//Store the incoming file at the next available location.
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f6:	492a      	ldr	r1, [pc, #168]	; (80015a0 <readFile+0xf0>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fac1 	bl	8000a80 <readData>
					HAL_UART_Transmit_IT(&huart1, spi_buf, PAGE_OFFSET);
 80014fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <readFile+0xf0>)
 8001504:	4827      	ldr	r0, [pc, #156]	; (80015a4 <readFile+0xf4>)
 8001506:	f003 fa07 	bl	8004918 <HAL_UART_Transmit_IT>
					HAL_Delay(500);
 800150a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150e:	f000 fc0f 	bl	8001d30 <HAL_Delay>
				for(int startLocation = 0; startLocation < (PAGE_OFFSET * pageCount); startLocation += PAGE_OFFSET){
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <readFile+0xec>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe0      	blt.n	80014e8 <readFile+0x38>
 8001526:	e010      	b.n	800154a <readFile+0x9a>
				}
			}else{
				readData(address, spi_buf,PAGE_OFFSET);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	491c      	ldr	r1, [pc, #112]	; (80015a0 <readFile+0xf0>)
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff faa5 	bl	8000a80 <readData>
				HAL_UART_Transmit_IT(&huart1, spi_buf, PAGE_OFFSET);
 8001536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153a:	4919      	ldr	r1, [pc, #100]	; (80015a0 <readFile+0xf0>)
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <readFile+0xf4>)
 800153e:	f003 f9eb 	bl	8004918 <HAL_UART_Transmit_IT>
				HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f000 fbf3 	bl	8001d30 <HAL_Delay>
			}

			//	pageProgram(address + BLOCK_OFFSET, (uint8_t*)file, strlen(file));	//Store the incoming file at the next available location.
			//Format the TOC after storing the data.
			//	formatTOC();
			memset((char *)file, '\0', strlen((char *)file));
 800154a:	4817      	ldr	r0, [pc, #92]	; (80015a8 <readFile+0xf8>)
 800154c:	f7fe fe4a 	bl	80001e4 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <readFile+0xf8>)
 8001558:	f004 fdd2 	bl	8006100 <memset>
			strcpy((char*)cmdResponse,"\r\n-->");
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <readFile+0xfc>)
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <readFile+0x100>)
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	8019      	strh	r1, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cmdResponse, strlen((char *)cmdResponse));
 800156a:	4810      	ldr	r0, [pc, #64]	; (80015ac <readFile+0xfc>)
 800156c:	f7fe fe3a 	bl	80001e4 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <readFile+0xfc>)
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <readFile+0xf4>)
 800157a:	f003 f9cd 	bl	8004918 <HAL_UART_Transmit_IT>
			break;
 800157e:	e008      	b.n	8001592 <readFile+0xe2>
	for(address = BLOCK_1_ADDR; address < (BLOCK_1_ADDR * BLOCKS_4KB); address += BLOCK_OFFSET){
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 800158e:	db98      	blt.n	80014c2 <readFile+0x12>
		}
	}
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000859 	.word	0x20000859
 80015a0:	20000758 	.word	0x20000758
 80015a4:	200000f0 	.word	0x200000f0
 80015a8:	200002f0 	.word	0x200002f0
 80015ac:	2000028c 	.word	0x2000028c
 80015b0:	08006b10 	.word	0x08006b10

080015b4 <getFileSize>:

int getFileSize(uint8_t fileNum){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	//Given the starting address and the last address of the file, determine the file-size
	int startAddr, endAddr;
	startAddr = getFileStart(fileNum);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff febb 	bl	800133c <getFileStart>
 80015c6:	60f8      	str	r0, [r7, #12]
	endAddr = getFileEnd(fileNum);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff feea 	bl	80013a4 <getFileEnd>
 80015d0:	60b8      	str	r0, [r7, #8]
	return endAddr - startAddr; //returns number of bytes in the file
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1ad3      	subs	r3, r2, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <getUnavailableMemory>:

int getUnavailableMemory(void){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
//	char buffer[20];
	int j, totalMemUsed = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
	for(j = 1; j < BLOCKS_4KB; j++){
 80015ea:	2301      	movs	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	e00b      	b.n	8001608 <getUnavailableMemory+0x28>
		totalMemUsed += getFileSize(j);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ffdd 	bl	80015b4 <getFileSize>
 80015fa:	4602      	mov	r2, r0
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	603b      	str	r3, [r7, #0]
	for(j = 1; j < BLOCKS_4KB; j++){
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b7e      	cmp	r3, #126	; 0x7e
 800160c:	ddf0      	ble.n	80015f0 <getUnavailableMemory+0x10>
//	sprintf(buffer, "%d bytes\r\n", totalMemUsed);
//	HAL_UART_Transmit_IT(&huart1, (uint8_t *) buffer, strlen(buffer));
//	HAL_Delay(500);
//	memset((char *)cmd, '\0', strlen((char *)cmd));
//	memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
	return totalMemUsed;
 800160e:	683b      	ldr	r3, [r7, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <getAvailableMemory>:

int getAvailableMemory(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
	char buffer[20];
	int totalMem = 524287 /*Bytes*/, availableMem, unavailableMem;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <getAvailableMemory+0x70>)
 8001620:	61fb      	str	r3, [r7, #28]
	unavailableMem = getUnavailableMemory();
 8001622:	f7ff ffdd 	bl	80015e0 <getUnavailableMemory>
 8001626:	61b8      	str	r0, [r7, #24]
	availableMem = totalMem - unavailableMem;
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
	sprintf(buffer, "%d Bytes Available\r\n", availableMem);
 8001630:	463b      	mov	r3, r7
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4915      	ldr	r1, [pc, #84]	; (800168c <getAvailableMemory+0x74>)
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fd6a 	bl	8006110 <siprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *) buffer, strlen(buffer));
 800163c:	463b      	mov	r3, r7
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fdd0 	bl	80001e4 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <getAvailableMemory+0x78>)
 800164e:	f003 f963 	bl	8004918 <HAL_UART_Transmit_IT>
	HAL_Delay(500);
 8001652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001656:	f000 fb6b 	bl	8001d30 <HAL_Delay>
	memset((char *)cmd, '\0', strlen((char *)cmd));
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <getAvailableMemory+0x7c>)
 800165c:	f7fe fdc2 	bl	80001e4 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <getAvailableMemory+0x7c>)
 8001668:	f004 fd4a 	bl	8006100 <memset>
	memset((char *)cmdArg, '\0', strlen((char *)cmdArg));
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <getAvailableMemory+0x80>)
 800166e:	f7fe fdb9 	bl	80001e4 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <getAvailableMemory+0x80>)
 800167a:	f004 fd41 	bl	8006100 <memset>
	return availableMem;
 800167e:	697b      	ldr	r3, [r7, #20]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0007ffff 	.word	0x0007ffff
 800168c:	08006b90 	.word	0x08006b90
 8001690:	200000f0 	.word	0x200000f0
 8001694:	2000020c 	.word	0x2000020c
 8001698:	20000240 	.word	0x20000240

0800169c <defragment>:

void defragment(int address){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
//		readData(address, spi_buf, 1);
//		if(spi_buf[0] != 0xFF){
//			memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
//			continue;
//		}else{
			for(tempAddr = address; tempAddr < (BLOCK_1_ADDR * BLOCKS_4KB); tempAddr += PAGE_OFFSET){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e038      	b.n	800171c <defragment+0x80>
				if((tempAddr % 0x1000) == 0){
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d106      	bne.n	80016c2 <defragment+0x26>
					erase4KB(tempAddr);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fa16 	bl	8000ae8 <erase4KB>
					HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f000 fb37 	bl	8001d30 <HAL_Delay>
				}
				memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 80016c2:	481b      	ldr	r0, [pc, #108]	; (8001730 <defragment+0x94>)
 80016c4:	f7fe fd8e 	bl	80001e4 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <defragment+0x94>)
 80016d0:	f004 fd16 	bl	8006100 <memset>
				readData(tempAddr + BLOCK_OFFSET, spi_buf, PAGE_OFFSET);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <defragment+0x94>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f9cd 	bl	8000a80 <readData>
//				HAL_Delay(250);
				pageProgram(tempAddr, spi_buf, PAGE_OFFSET);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ec:	4910      	ldr	r1, [pc, #64]	; (8001730 <defragment+0x94>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f982 	bl	80009f8 <pageProgram>
//				HAL_Delay(250);
				memset((char *)spi_buf, '\0', strlen((char *)spi_buf));
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <defragment+0x94>)
 80016f6:	f7fe fd75 	bl	80001e4 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <defragment+0x94>)
 8001702:	f004 fcfd 	bl	8006100 <memset>
				readData(tempAddr, spi_buf, PAGE_OFFSET);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <defragment+0x94>)
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f9b6 	bl	8000a80 <readData>
			for(tempAddr = address; tempAddr < (BLOCK_1_ADDR * BLOCKS_4KB); tempAddr += PAGE_OFFSET){
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001722:	dbc2      	blt.n	80016aa <defragment+0xe>
			}
//			break;
//		}
//	}
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000758 	.word	0x20000758

08001734 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	int length = (sizeof(cmd)/sizeof(cmd[0]));
 800173c:	2332      	movs	r3, #50	; 0x32
 800173e:	60fb      	str	r3, [r7, #12]
	//Re-enable UART RX interrupt
	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
	HAL_UART_Receive_IT(&huart1, rxData, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	494e      	ldr	r1, [pc, #312]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 8001744:	484e      	ldr	r0, [pc, #312]	; (8001880 <HAL_UART_RxCpltCallback+0x14c>)
 8001746:	f003 f955 	bl	80049f4 <HAL_UART_Receive_IT>
//	HAL_UART_Transmit_IT(&huart1, rxData, 1);


	if(executeCmd){
 800174a:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <HAL_UART_RxCpltCallback+0x150>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d027      	beq.n	80017a2 <HAL_UART_RxCpltCallback+0x6e>
		if(store){
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_UART_RxCpltCallback+0x154>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 808b 	beq.w	8001872 <HAL_UART_RxCpltCallback+0x13e>
			if(rxData[0] != EOT){
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00b      	beq.n	800177c <HAL_UART_RxCpltCallback+0x48>
				file[n] = rxData[0];
 8001764:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_UART_RxCpltCallback+0x158>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a44      	ldr	r2, [pc, #272]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 800176a:	7811      	ldrb	r1, [r2, #0]
 800176c:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_UART_RxCpltCallback+0x15c>)
 800176e:	54d1      	strb	r1, [r2, r3]
				n++;
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_UART_RxCpltCallback+0x158>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_UART_RxCpltCallback+0x158>)
 8001778:	6013      	str	r3, [r2, #0]
			}else{
				//Do nothing
			}
		}
	}
}
 800177a:	e07a      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
				file[n] = rxData[0];	//Store the EOT from the incoming file
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_UART_RxCpltCallback+0x158>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3e      	ldr	r2, [pc, #248]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 8001782:	7811      	ldrb	r1, [r2, #0]
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <HAL_UART_RxCpltCallback+0x15c>)
 8001786:	54d1      	strb	r1, [r2, r3]
				n = 0;
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_UART_RxCpltCallback+0x158>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
				executeCmd = 0;
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_UART_RxCpltCallback+0x150>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
				store = 0;
 8001794:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_UART_RxCpltCallback+0x154>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
				fileReceived = 1;
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_UART_RxCpltCallback+0x160>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
}
 80017a0:	e067      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
		if(word == 0){
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_UART_RxCpltCallback+0x164>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_UART_RxCpltCallback+0xd8>
			/*}else */if(rxData[0] == NL){
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0d      	cmp	r3, #13
 80017b0:	d05f      	beq.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
			}else if(rxData[0] == CR){
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d109      	bne.n	80017ce <HAL_UART_RxCpltCallback+0x9a>
				executeCmd = 1;//Execute Command
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_UART_RxCpltCallback+0x150>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
				i = 0;
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				a = 0;
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
}
 80017cc:	e051      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
			}else if(rxData[0] != SPACE){
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d016      	beq.n	8001804 <HAL_UART_RxCpltCallback+0xd0>
				cmd[i] = rxData[0];
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 80017de:	7819      	ldrb	r1, [r3, #0]
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_UART_RxCpltCallback+0x170>)
 80017e2:	5499      	strb	r1, [r3, r2]
				i++;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017ee:	701a      	strb	r2, [r3, #0]
				if(i > length){
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	da3a      	bge.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
					i = 0;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	e036      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
				word = 1;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_UART_RxCpltCallback+0x164>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	e032      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
		}else if(word == 1){
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_UART_RxCpltCallback+0x164>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d12e      	bne.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
			/*}else*/ if(rxData[0] == NL){
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b0d      	cmp	r3, #13
 800181a:	d02a      	beq.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
			}else if(rxData[0] == CR){
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b0a      	cmp	r3, #10
 8001822:	d10c      	bne.n	800183e <HAL_UART_RxCpltCallback+0x10a>
				executeCmd = 1;//Execute Command
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_UART_RxCpltCallback+0x150>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
				word = 0;
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_UART_RxCpltCallback+0x164>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
				i = 0;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_UART_RxCpltCallback+0x168>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
				a = 0;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	e019      	b.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
			}else if(rxData[0] != SPACE){
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b20      	cmp	r3, #32
 8001844:	d015      	beq.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
				cmdArg[a] = rxData[0];
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_UART_RxCpltCallback+0x148>)
 800184e:	7819      	ldrb	r1, [r3, #0]
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_RxCpltCallback+0x174>)
 8001852:	5499      	strb	r1, [r3, r2]
				a++;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 800185e:	701a      	strb	r2, [r3, #0]
				if(a > length){
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4293      	cmp	r3, r2
 800186a:	da02      	bge.n	8001872 <HAL_UART_RxCpltCallback+0x13e>
					a = 0;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_UART_RxCpltCallback+0x16c>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001f8 	.word	0x200001f8
 8001880:	200000f0 	.word	0x200000f0
 8001884:	20000288 	.word	0x20000288
 8001888:	20000867 	.word	0x20000867
 800188c:	2000086c 	.word	0x2000086c
 8001890:	200002f0 	.word	0x200002f0
 8001894:	20000868 	.word	0x20000868
 8001898:	2000028b 	.word	0x2000028b
 800189c:	20000289 	.word	0x20000289
 80018a0:	2000028a 	.word	0x2000028a
 80018a4:	2000020c 	.word	0x2000020c
 80018a8:	20000240 	.word	0x20000240

080018ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	//Do nothing
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_MspInit+0x44>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	; 0x60
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_MspInit+0x44>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x44>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_SPI_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d128      	bne.n	8001988 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_SPI_MspInit+0x80>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <HAL_SPI_MspInit+0x80>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_SPI_MspInit+0x80>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_SPI_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_SPI_MspInit+0x80>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_SPI_MspInit+0x80>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23e0      	movs	r3, #224	; 0xe0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001976:	2305      	movs	r3, #5
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f000 fb88 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013000 	.word	0x40013000
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0ae      	sub	sp, #184	; 0xb8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2288      	movs	r2, #136	; 0x88
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fba1 	bl	8006100 <memset>
  if(huart->Instance==USART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a47      	ldr	r2, [pc, #284]	; (8001ae0 <HAL_UART_MspInit+0x148>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d145      	bne.n	8001a54 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019cc:	2300      	movs	r3, #0
 80019ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fb85 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff ff6e 	bl	80018c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 80019ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ee:	6613      	str	r3, [r2, #96]	; 0x60
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f000 fb2b 	bl	8002098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2025      	movs	r0, #37	; 0x25
 8001a48:	f000 fa71 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a4c:	2025      	movs	r0, #37	; 0x25
 8001a4e:	f000 fa8a 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a52:	e040      	b.n	8001ad6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <HAL_UART_MspInit+0x150>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d13b      	bne.n	8001ad6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fb3a 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001a76:	f7ff ff23 	bl	80018c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_UART_MspInit+0x14c>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fae1 	bl	8002098 <HAL_GPIO_Init>
}
 8001ad6:	bf00      	nop
 8001ad8:	37b8      	adds	r7, #184	; 0xb8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40004400 	.word	0x40004400

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 f8da 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART1_IRQHandler+0x10>)
 8001b46:	f002 ffab 	bl	8004aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000f0 	.word	0x200000f0

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f004 fa84 	bl	8006090 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20018000 	.word	0x20018000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000870 	.word	0x20000870
 8001bbc:	20000888 	.word	0x20000888

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be8:	f7ff ffea 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <LoopForever+0xe>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	; (8001c30 <LoopForever+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c12:	f004 fa43 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c16:	f7fe fcc5 	bl	80005a4 <main>

08001c1a <LoopForever>:

LoopForever:
    b LoopForever
 8001c1a:	e7fe      	b.n	8001c1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c28:	08006d34 	.word	0x08006d34
  ldr r2, =_sbss
 8001c2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c30:	20000888 	.word	0x20000888

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_Init+0x3c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_Init+0x3c>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f000 f962 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f000 f80f 	bl	8001c78 <HAL_InitTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	e001      	b.n	8001c6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c66:	f7ff fe31 	bl	80018cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_InitTick+0x70>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f96d 	bl	8001f82 <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d809      	bhi.n	8001cc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbc:	f000 f937 	bl	8001f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_InitTick+0x74>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e007      	b.n	8001cd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e004      	b.n	8001cd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e001      	b.n	8001cd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000874 	.word	0x20000874

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000874 	.word	0x20000874

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d008      	beq.n	8001fc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e022      	b.n	800200a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 020e 	bic.w	r2, r2, #14
 8001fd2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f003 021c 	and.w	r2, r3, #28
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d005      	beq.n	800203a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e029      	b.n	800208e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020e 	bic.w	r2, r2, #14
 8002048:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f003 021c 	and.w	r2, r3, #28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
    }
  }
  return status;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	e17f      	b.n	80023a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8171 	beq.w	80023a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d005      	beq.n	80020d8 <HAL_GPIO_Init+0x40>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d130      	bne.n	800213a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800210e:	2201      	movs	r2, #1
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 0201 	and.w	r2, r3, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b03      	cmp	r3, #3
 8002144:	d118      	bne.n	8002178 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80ac 	beq.w	80023a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_GPIO_Init+0x330>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	4a5e      	ldr	r2, [pc, #376]	; (80023c8 <HAL_GPIO_Init+0x330>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6613      	str	r3, [r2, #96]	; 0x60
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_GPIO_Init+0x330>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002262:	4a5a      	ldr	r2, [pc, #360]	; (80023cc <HAL_GPIO_Init+0x334>)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x242>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <HAL_GPIO_Init+0x338>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x23e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_GPIO_Init+0x33c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x23a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_GPIO_Init+0x340>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x236>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_GPIO_Init+0x344>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x232>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	; (80023e0 <HAL_GPIO_Init+0x348>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x22e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <HAL_GPIO_Init+0x34c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x22a>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x244>
 80022da:	2300      	movs	r3, #0
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ec:	4937      	ldr	r1, [pc, #220]	; (80023cc <HAL_GPIO_Init+0x334>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_GPIO_Init+0x350>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800231e:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002372:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f ae78 	bne.w	80020a8 <HAL_GPIO_Init+0x10>
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010000 	.word	0x40010000
 80023d0:	48000400 	.word	0x48000400
 80023d4:	48000800 	.word	0x48000800
 80023d8:	48000c00 	.word	0x48000c00
 80023dc:	48001000 	.word	0x48001000
 80023e0:	48001400 	.word	0x48001400
 80023e4:	48001800 	.word	0x48001800
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002408:	e002      	b.n	8002410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_PWREx_GetVoltageRange+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002446:	d130      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d038      	beq.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2232      	movs	r2, #50	; 0x32
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800247c:	e002      	b.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b01      	subs	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	d102      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f2      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	d110      	bne.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e00f      	b.n	80024ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	d007      	beq.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000
 80024dc:	20000000 	.word	0x20000000
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e3ca      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b97      	ldr	r3, [pc, #604]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b94      	ldr	r3, [pc, #592]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80e4 	beq.w	80026e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_RCC_OscConfig+0x4a>
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	f040 808b 	bne.w	800263c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 8087 	bne.w	800263c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e3a2      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_RCC_OscConfig+0x7c>
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255e:	e005      	b.n	800256c <HAL_RCC_OscConfig+0x88>
 8002560:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256c:	4293      	cmp	r3, r2
 800256e:	d223      	bcs.n	80025b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fd55 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e383      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a72      	ldr	r2, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	496d      	ldr	r1, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	4968      	ldr	r1, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
 80025b6:	e025      	b.n	8002604 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b8:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4960      	ldr	r1, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	495b      	ldr	r1, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fd15 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e343      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002604:	f000 fc4a 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	4950      	ldr	r1, [pc, #320]	; (8002758 <HAL_RCC_OscConfig+0x274>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002622:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCC_OscConfig+0x27c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fb25 	bl	8001c78 <HAL_InitTick>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d052      	beq.n	80026de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	e327      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d032      	beq.n	80026aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a42      	ldr	r2, [pc, #264]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002650:	f7ff fb62 	bl	8001d18 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002658:	f7ff fb5e 	bl	8001d18 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e310      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a36      	ldr	r2, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4931      	ldr	r1, [pc, #196]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	492c      	ldr	r1, [pc, #176]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	e01a      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb2f 	bl	8001d18 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026be:	f7ff fb2b 	bl	8001d18 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e2dd      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x1da>
 80026dc:	e000      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d074      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x21a>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d10e      	bne.n	8002716 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d10b      	bne.n	8002716 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d064      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d160      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e2ba      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x24a>
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e026      	b.n	800277c <HAL_RCC_OscConfig+0x298>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002736:	d115      	bne.n	8002764 <HAL_RCC_OscConfig+0x280>
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800273e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a02      	ldr	r2, [pc, #8]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x298>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	08006ba8 	.word	0x08006ba8
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004
 8002764:	4ba0      	ldr	r3, [pc, #640]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a9f      	ldr	r2, [pc, #636]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b9d      	ldr	r3, [pc, #628]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a9c      	ldr	r2, [pc, #624]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fac8 	bl	8001d18 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7ff fac4 	bl	8001d18 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e276      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x2a8>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7ff fab4 	bl	8001d18 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fab0 	bl	8001d18 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e262      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d0>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d060      	beq.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_OscConfig+0x310>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d116      	bne.n	8002822 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_OscConfig+0x328>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e23f      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4973      	ldr	r1, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	e040      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d023      	beq.n	8002872 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff fa6f 	bl	8001d18 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff fa6b 	bl	8001d18 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e21d      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002850:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	495f      	ldr	r1, [pc, #380]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e018      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7ff fa4b 	bl	8001d18 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7ff fa47 	bl	8001d18 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1f9      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03c      	beq.n	800292a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff fa26 	bl	8001d18 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7ff fa22 	bl	8001d18 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1d4      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3ec>
 80028f0:	e01b      	b.n	800292a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff fa09 	bl	8001d18 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff fa05 	bl	8001d18 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1b7      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ef      	bne.n	800290a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80a6 	beq.w	8002a84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6593      	str	r3, [r2, #88]	; 0x58
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d118      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297c:	f7ff f9cc 	bl	8001d18 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7ff f9c8 	bl	8001d18 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e17a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d8>
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ba:	e029      	b.n	8002a10 <HAL_RCC_OscConfig+0x52c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d115      	bne.n	80029f0 <HAL_RCC_OscConfig+0x50c>
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x52c>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	4b9c      	ldr	r3, [pc, #624]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a9b      	ldr	r2, [pc, #620]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a00:	4b98      	ldr	r3, [pc, #608]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a97      	ldr	r2, [pc, #604]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff f97e 	bl	8001d18 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f97a 	bl	8001d18 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e12a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ed      	beq.n	8002a20 <HAL_RCC_OscConfig+0x53c>
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7ff f967 	bl	8001d18 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7ff f963 	bl	8001d18 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e113      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	4b7f      	ldr	r3, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ed      	bne.n	8002a4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a79      	ldr	r2, [pc, #484]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80fe 	beq.w	8002c8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f040 80d0 	bne.w	8002c38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a98:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d130      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d127      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad8:	2a07      	cmp	r2, #7
 8002ada:	bf14      	ite	ne
 8002adc:	2201      	movne	r2, #1
 8002ade:	2200      	moveq	r2, #0
 8002ae0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d113      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	3b01      	subs	r3, #1
 8002b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d06e      	beq.n	8002bec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d069      	beq.n	8002be8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0ad      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7ff f8ec 	bl	8001d18 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7ff f8e8 	bl	8001d18 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e09a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b56:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b62:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x784>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b72:	3a01      	subs	r2, #1
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b7c:	0212      	lsls	r2, r2, #8
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b84:	0852      	lsrs	r2, r2, #1
 8002b86:	3a01      	subs	r2, #1
 8002b88:	0552      	lsls	r2, r2, #21
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0652      	lsls	r2, r2, #25
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b9c:	0912      	lsrs	r2, r2, #4
 8002b9e:	0452      	lsls	r2, r2, #17
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4930      	ldr	r1, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc0:	f7ff f8aa 	bl	8001d18 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff f8a6 	bl	8001d18 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e058      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be6:	e050      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04f      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d148      	bne.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c10:	f7ff f882 	bl	8001d18 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7ff f87e 	bl	8001d18 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e030      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x734>
 8002c36:	e028      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d023      	beq.n	8002c86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7ff f865 	bl	8001d18 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	e00c      	b.n	8002c6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7ff f861 	bl	8001d18 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d905      	bls.n	8002c6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ec      	bne.n	8002c52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4905      	ldr	r1, [pc, #20]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x7b4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
 8002c84:	e001      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	feeefffc 	.word	0xfeeefffc

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0e7      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4970      	ldr	r1, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cf      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d908      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4960      	ldr	r1, [pc, #384]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04c      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0a6      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3a:	4b54      	ldr	r3, [pc, #336]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d115      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e09a      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d52:	4b4e      	ldr	r3, [pc, #312]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e08e      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e086      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4943      	ldr	r1, [pc, #268]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe ffc8 	bl	8001d18 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe ffc4 	bl	8001d18 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e06e      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d208      	bcs.n	8002de2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	492b      	ldr	r1, [pc, #172]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d210      	bcs.n	8002e12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	4923      	ldr	r1, [pc, #140]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e036      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4918      	ldr	r1, [pc, #96]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4910      	ldr	r1, [pc, #64]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e50:	f000 f824 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	490b      	ldr	r1, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1f4>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1fc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe feff 	bl	8001c78 <HAL_InitTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08006ba8 	.word	0x08006ba8
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11e      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e004      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d134      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xac>
 8002f40:	e005      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f44:	617b      	str	r3, [r7, #20]
      break;
 8002f46:	e005      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4a:	617b      	str	r3, [r7, #20]
      break;
 8002f4c:	e002      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	617b      	str	r3, [r7, #20]
      break;
 8002f52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	3301      	adds	r3, #1
 8002f60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0e5b      	lsrs	r3, r3, #25
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	3301      	adds	r3, #1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f94:	69bb      	ldr	r3, [r7, #24]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08006bc0 	.word	0x08006bc0
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08006bb8 	.word	0x08006bb8

08002ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ffc:	f7ff ffda 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0adb      	lsrs	r3, r3, #11
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	08006bb8 	.word	0x08006bb8

08003024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800303c:	f7ff f9ee 	bl	800241c <HAL_PWREx_GetVoltageRange>
 8003040:	6178      	str	r0, [r7, #20]
 8003042:	e014      	b.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304e:	6593      	str	r3, [r2, #88]	; 0x58
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f9de 	bl	800241c <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d10b      	bne.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d919      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2ba0      	cmp	r3, #160	; 0xa0
 8003080:	d902      	bls.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003082:	2302      	movs	r3, #2
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e013      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003088:	2301      	movs	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e010      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d902      	bls.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003094:	2303      	movs	r3, #3
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e00a      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d102      	bne.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a0:	2302      	movs	r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e004      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d101      	bne.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030ec:	2300      	movs	r3, #0
 80030ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d041      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003108:	d02a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800310a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800310e:	d824      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800311a:	d81e      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003124:	d010      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003126:	e018      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003128:	4b86      	ldr	r3, [pc, #536]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a85      	ldr	r2, [pc, #532]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fabb 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3320      	adds	r3, #32
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fba6 	bl	80038a0 <RCCEx_PLLSAI2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003168:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003176:	4973      	ldr	r1, [pc, #460]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d041      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003198:	d02a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800319a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800319e:	d824      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031aa:	d81e      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d010      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031b6:	e018      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031b8:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fa73 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3320      	adds	r3, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fb5e 	bl	80038a0 <RCCEx_PLLSAI2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	74fb      	strb	r3, [r7, #19]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031f8:	4b52      	ldr	r3, [pc, #328]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003206:	494f      	ldr	r1, [pc, #316]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800320e:	e001      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a0 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6593      	str	r3, [r2, #88]	; 0x58
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003264:	f7fe fd58 	bl	8001d18 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326a:	e009      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fe fd54 	bl	8001d18 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d902      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	74fb      	strb	r3, [r7, #19]
        break;
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ef      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d15c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d019      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fd13 	bl	8001d18 <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	e00b      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fd0f 	bl	8001d18 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d902      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	74fb      	strb	r3, [r7, #19]
            break;
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ec      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003332:	4904      	ldr	r1, [pc, #16]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800333a:	e009      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
 8003340:	e006      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b9e      	ldr	r3, [pc, #632]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a9d      	ldr	r2, [pc, #628]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336e:	4b98      	ldr	r3, [pc, #608]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	4994      	ldr	r1, [pc, #592]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 020c 	bic.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	498c      	ldr	r1, [pc, #560]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b2:	4b87      	ldr	r3, [pc, #540]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	4983      	ldr	r1, [pc, #524]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	497b      	ldr	r1, [pc, #492]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	4972      	ldr	r1, [pc, #456]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	496a      	ldr	r1, [pc, #424]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	4961      	ldr	r1, [pc, #388]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800345c:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	4959      	ldr	r1, [pc, #356]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	4950      	ldr	r1, [pc, #320]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	4948      	ldr	r1, [pc, #288]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	493f      	ldr	r1, [pc, #252]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d028      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003502:	d106      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
 8003510:	e011      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351a:	d10c      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8c8 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	491f      	ldr	r1, [pc, #124]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003560:	d106      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356c:	60d3      	str	r3, [r2, #12]
 800356e:	e011      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f899 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02b      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	4908      	ldr	r1, [pc, #32]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e014      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f867 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	4928      	ldr	r1, [pc, #160]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f844 	bl	80036b8 <RCCEx_PLLSAI1_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d014      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	74bb      	strb	r3, [r7, #18]
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3320      	adds	r3, #32
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f925 	bl	80038a0 <RCCEx_PLLSAI2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367e:	490d      	ldr	r1, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000

080036b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036c6:	4b75      	ldr	r3, [pc, #468]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036d2:	4b72      	ldr	r3, [pc, #456]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0203 	and.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10d      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
       ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ea:	4b6c      	ldr	r3, [pc, #432]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
       ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d047      	beq.n	800378e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e044      	b.n	800378e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d018      	beq.n	800373e <RCCEx_PLLSAI1_Config+0x86>
 800370c:	2b03      	cmp	r3, #3
 800370e:	d825      	bhi.n	800375c <RCCEx_PLLSAI1_Config+0xa4>
 8003710:	2b01      	cmp	r3, #1
 8003712:	d002      	beq.n	800371a <RCCEx_PLLSAI1_Config+0x62>
 8003714:	2b02      	cmp	r3, #2
 8003716:	d009      	beq.n	800372c <RCCEx_PLLSAI1_Config+0x74>
 8003718:	e020      	b.n	800375c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800371a:	4b60      	ldr	r3, [pc, #384]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11d      	bne.n	8003762 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372a:	e01a      	b.n	8003762 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800372c:	4b5b      	ldr	r3, [pc, #364]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e013      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800373e:	4b57      	ldr	r3, [pc, #348]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800375a:	e006      	b.n	800376a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e004      	b.n	800376c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800376a:	bf00      	nop
    }

    if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003772:	4b4a      	ldr	r3, [pc, #296]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	430b      	orrs	r3, r1
 8003788:	4944      	ldr	r1, [pc, #272]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d17d      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003794:	4b41      	ldr	r3, [pc, #260]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a40      	ldr	r2, [pc, #256]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800379e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fe faba 	bl	8001d18 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a6:	e009      	b.n	80037bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a8:	f7fe fab6 	bl	8001d18 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ba:	e005      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ef      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d160      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68d2      	ldr	r2, [r2, #12]
 80037ea:	0912      	lsrs	r2, r2, #4
 80037ec:	0452      	lsls	r2, r2, #17
 80037ee:	430a      	orrs	r2, r1
 80037f0:	492a      	ldr	r1, [pc, #168]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
 80037f6:	e027      	b.n	8003848 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d112      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003806:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	0211      	lsls	r1, r2, #8
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6912      	ldr	r2, [r2, #16]
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	3a01      	subs	r2, #1
 8003818:	0552      	lsls	r2, r2, #21
 800381a:	430a      	orrs	r2, r1
 800381c:	491f      	ldr	r1, [pc, #124]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	610b      	str	r3, [r1, #16]
 8003822:	e011      	b.n	8003848 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800382c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	0211      	lsls	r1, r2, #8
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6952      	ldr	r2, [r2, #20]
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0652      	lsls	r2, r2, #25
 8003840:	430a      	orrs	r2, r1
 8003842:	4916      	ldr	r1, [pc, #88]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fa60 	bl	8001d18 <HAL_GetTick>
 8003858:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800385a:	e009      	b.n	8003870 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800385c:	f7fe fa5c 	bl	8001d18 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d902      	bls.n	8003870 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	73fb      	strb	r3, [r7, #15]
          break;
 800386e:	e005      	b.n	800387c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	4904      	ldr	r1, [pc, #16]	; (800389c <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ae:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10d      	bne.n	80038e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
       ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038d2:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
       ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d047      	beq.n	8003976 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e044      	b.n	8003976 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d018      	beq.n	8003926 <RCCEx_PLLSAI2_Config+0x86>
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d825      	bhi.n	8003944 <RCCEx_PLLSAI2_Config+0xa4>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d002      	beq.n	8003902 <RCCEx_PLLSAI2_Config+0x62>
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d009      	beq.n	8003914 <RCCEx_PLLSAI2_Config+0x74>
 8003900:	e020      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003902:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e01a      	b.n	800394a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d116      	bne.n	800394e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e013      	b.n	800394e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003926:	4b4c      	ldr	r3, [pc, #304]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003932:	4b49      	ldr	r3, [pc, #292]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003942:	e006      	b.n	8003952 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e004      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003952:	bf00      	nop
    }

    if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	430b      	orrs	r3, r1
 8003970:	4939      	ldr	r1, [pc, #228]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d167      	bne.n	8003a4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fe f9c6 	bl	8001d18 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003990:	f7fe f9c2 	bl	8001d18 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
        break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ef      	bne.n	8003990 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d14a      	bne.n	8003a4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d111      	bne.n	80039e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039bc:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	0912      	lsrs	r2, r2, #4
 80039d4:	0452      	lsls	r2, r2, #17
 80039d6:	430a      	orrs	r2, r1
 80039d8:	491f      	ldr	r1, [pc, #124]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	614b      	str	r3, [r1, #20]
 80039de:	e011      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6912      	ldr	r2, [r2, #16]
 80039f6:	0852      	lsrs	r2, r2, #1
 80039f8:	3a01      	subs	r2, #1
 80039fa:	0652      	lsls	r2, r2, #25
 80039fc:	430a      	orrs	r2, r1
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe f982 	bl	8001d18 <HAL_GetTick>
 8003a14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a16:	e009      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a18:	f7fe f97e 	bl	8001d18 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	73fb      	strb	r3, [r7, #15]
          break;
 8003a2a:	e005      	b.n	8003a38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4904      	ldr	r1, [pc, #16]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e095      	b.n	8003b9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7e:	d009      	beq.n	8003a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
 8003a86:	e005      	b.n	8003a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd ff30 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad4:	d902      	bls.n	8003adc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e002      	b.n	8003ae2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aea:	d007      	beq.n	8003afc <HAL_SPI_Init+0xa0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	ea42 0103 	orr.w	r1, r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f003 0204 	and.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b78:	ea42 0103 	orr.w	r1, r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_SPI_Transmit+0x22>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e158      	b.n	8003e76 <HAL_SPI_Transmit+0x2d4>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bcc:	f7fe f8a4 	bl	8001d18 <HAL_GetTick>
 8003bd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d002      	beq.n	8003be8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003be6:	e13d      	b.n	8003e64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_SPI_Transmit+0x52>
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bf8:	e134      	b.n	8003e64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d10f      	bne.n	8003c66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d007      	beq.n	8003c84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c8c:	d94b      	bls.n	8003d26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0xfa>
 8003c96:	8afb      	ldrh	r3, [r7, #22]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d13e      	bne.n	8003d1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc0:	e02b      	b.n	8003d1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d112      	bne.n	8003cf6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf4:	e011      	b.n	8003d1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf6:	f7fe f80f 	bl	8001d18 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d803      	bhi.n	8003d0e <HAL_SPI_Transmit+0x16c>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0c:	d102      	bne.n	8003d14 <HAL_SPI_Transmit+0x172>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d18:	e0a4      	b.n	8003e64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ce      	bne.n	8003cc2 <HAL_SPI_Transmit+0x120>
 8003d24:	e07c      	b.n	8003e20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_SPI_Transmit+0x192>
 8003d2e:	8afb      	ldrh	r3, [r7, #22]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d170      	bne.n	8003e16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d912      	bls.n	8003d64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b02      	subs	r3, #2
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d62:	e058      	b.n	8003e16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d8a:	e044      	b.n	8003e16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d12b      	bne.n	8003df2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d912      	bls.n	8003dca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b02      	subs	r3, #2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc8:	e025      	b.n	8003e16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df0:	e011      	b.n	8003e16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df2:	f7fd ff91 	bl	8001d18 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d803      	bhi.n	8003e0a <HAL_SPI_Transmit+0x268>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e08:	d102      	bne.n	8003e10 <HAL_SPI_Transmit+0x26e>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e14:	e026      	b.n	8003e64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1b5      	bne.n	8003d8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fce3 	bl	80047f0 <SPI_EndRxTxTransaction>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e000      	b.n	8003e64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b088      	sub	sp, #32
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9a:	d112      	bne.n	8003ec2 <HAL_SPI_Receive+0x44>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f910 	bl	80040de <HAL_SPI_TransmitReceive>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	e109      	b.n	80040d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_SPI_Receive+0x52>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e102      	b.n	80040d6 <HAL_SPI_Receive+0x258>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed8:	f7fd ff1e 	bl	8001d18 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eee:	e0e9      	b.n	80040c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Receive+0x7e>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f00:	e0e0      	b.n	80040c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2204      	movs	r2, #4
 8003f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f4c:	d908      	bls.n	8003f60 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e007      	b.n	8003f70 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f78:	d10f      	bne.n	8003f9a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d007      	beq.n	8003fb8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc0:	d867      	bhi.n	8004092 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fc2:	e030      	b.n	8004026 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d117      	bne.n	8004002 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f103 020c 	add.w	r2, r3, #12
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004000:	e011      	b.n	8004026 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004002:	f7fd fe89 	bl	8001d18 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d803      	bhi.n	800401a <HAL_SPI_Receive+0x19c>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004018:	d102      	bne.n	8004020 <HAL_SPI_Receive+0x1a2>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004024:	e04e      	b.n	80040c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1c8      	bne.n	8003fc4 <HAL_SPI_Receive+0x146>
 8004032:	e034      	b.n	800409e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d115      	bne.n	800406e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	b292      	uxth	r2, r2
 800404e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800406c:	e011      	b.n	8004092 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fd fe53 	bl	8001d18 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Receive+0x208>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004084:	d102      	bne.n	800408c <HAL_SPI_Receive+0x20e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004090:	e018      	b.n	80040c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ca      	bne.n	8004034 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fb4c 	bl	8004740 <SPI_EndRxTransaction>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
 80040c0:	e000      	b.n	80040c4 <HAL_SPI_Receive+0x246>
  }

error :
 80040c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b08a      	sub	sp, #40	; 0x28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ec:	2301      	movs	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x26>
 8004100:	2302      	movs	r3, #2
 8004102:	e1fb      	b.n	80044fc <HAL_SPI_TransmitReceive+0x41e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410c:	f7fd fe04 	bl	8001d18 <HAL_GetTick>
 8004110:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004118:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004124:	887b      	ldrh	r3, [r7, #2]
 8004126:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004128:	7efb      	ldrb	r3, [r7, #27]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d00e      	beq.n	800414c <HAL_SPI_TransmitReceive+0x6e>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004134:	d106      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x66>
 800413e:	7efb      	ldrb	r3, [r7, #27]
 8004140:	2b04      	cmp	r3, #4
 8004142:	d003      	beq.n	800414c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800414a:	e1cd      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_SPI_TransmitReceive+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x80>
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004164:	e1c0      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b04      	cmp	r3, #4
 8004170:	d003      	beq.n	800417a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041bc:	d802      	bhi.n	80041c4 <HAL_SPI_TransmitReceive+0xe6>
 80041be:	8a3b      	ldrh	r3, [r7, #16]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d908      	bls.n	80041d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	e007      	b.n	80041e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d007      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800420c:	d97c      	bls.n	8004308 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_TransmitReceive+0x13e>
 8004216:	8a7b      	ldrh	r3, [r7, #18]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d169      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004240:	e056      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	d11b      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x1aa>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x1aa>
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b01      	cmp	r3, #1
 800425e:	d113      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d11c      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x1f2>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	b292      	uxth	r2, r2
 80042ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042d0:	f7fd fd22 	bl	8001d18 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042dc:	429a      	cmp	r2, r3
 80042de:	d807      	bhi.n	80042f0 <HAL_SPI_TransmitReceive+0x212>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e6:	d003      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042ee:	e0fb      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1a3      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x164>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d19d      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x164>
 8004306:	e0df      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x23a>
 8004310:	8a7b      	ldrh	r3, [r7, #18]
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 80cb 	bne.w	80044ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d912      	bls.n	8004348 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b02      	subs	r3, #2
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004346:	e0b2      	b.n	80044ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	7812      	ldrb	r2, [r2, #0]
 8004354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436e:	e09e      	b.n	80044ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d134      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x30a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02f      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x30a>
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	2b01      	cmp	r3, #1
 800438c:	d12c      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d912      	bls.n	80043be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b02      	subs	r3, #2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043bc:	e012      	b.n	80043e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	7812      	ldrb	r2, [r2, #0]
 80043ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d148      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x3aa>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d042      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d923      	bls.n	8004456 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	b292      	uxth	r2, r2
 800441a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	1c9a      	adds	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b02      	subs	r3, #2
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d81f      	bhi.n	8004484 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	e016      	b.n	8004484 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f103 020c 	add.w	r2, r3, #12
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004484:	2301      	movs	r3, #1
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004488:	f7fd fc46 	bl	8001d18 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004494:	429a      	cmp	r2, r3
 8004496:	d803      	bhi.n	80044a0 <HAL_SPI_TransmitReceive+0x3c2>
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x3c8>
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044ac:	e01c      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f af5b 	bne.w	8004370 <HAL_SPI_TransmitReceive+0x292>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f47f af54 	bne.w	8004370 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f98f 	bl	80047f0 <SPI_EndRxTxTransaction>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	661a      	str	r2, [r3, #96]	; 0x60
 80044e4:	e000      	b.n	80044e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80044e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004514:	f7fd fc00 	bl	8001d18 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4413      	add	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004524:	f7fd fbf8 	bl	8001d18 <HAL_GetTick>
 8004528:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800452a:	4b39      	ldr	r3, [pc, #228]	; (8004610 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	015b      	lsls	r3, r3, #5
 8004530:	0d1b      	lsrs	r3, r3, #20
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453a:	e054      	b.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004542:	d050      	beq.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004544:	f7fd fbe8 	bl	8001d18 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	429a      	cmp	r2, r3
 8004552:	d902      	bls.n	800455a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d13d      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004572:	d111      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d004      	beq.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d107      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d10f      	bne.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e017      	b.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	429a      	cmp	r2, r3
 8004602:	d19b      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000000 	.word	0x20000000

08004614 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	; 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004626:	f7fd fb77 	bl	8001d18 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	4413      	add	r3, r2
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004636:	f7fd fb6f 	bl	8001d18 <HAL_GetTick>
 800463a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004644:	4b3d      	ldr	r3, [pc, #244]	; (800473c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00da      	lsls	r2, r3, #3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	0d1b      	lsrs	r3, r3, #20
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800465c:	e060      	b.n	8004720 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004664:	d107      	bne.n	8004676 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004674:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467c:	d050      	beq.n	8004720 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800467e:	f7fd fb4b 	bl	8001d18 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	429a      	cmp	r2, r3
 800468c:	d902      	bls.n	8004694 <SPI_WaitFifoStateUntilTimeout+0x80>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d13d      	bne.n	8004710 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ac:	d111      	bne.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	d004      	beq.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d107      	bne.n	80046d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	d10f      	bne.n	80046fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e010      	b.n	8004732 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	3b01      	subs	r3, #1
 800471e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d196      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3728      	adds	r7, #40	; 0x28
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004754:	d111      	bne.n	800477a <SPI_EndRxTransaction+0x3a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475e:	d004      	beq.n	800476a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d107      	bne.n	800477a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff febd 	bl	8004504 <SPI_WaitFlagStateUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e023      	b.n	80047e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a8:	d11d      	bne.n	80047e6 <SPI_EndRxTransaction+0xa6>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b2:	d004      	beq.n	80047be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d113      	bne.n	80047e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff22 	bl	8004614 <SPI_WaitFifoStateUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e000      	b.n	80047e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff ff03 	bl	8004614 <SPI_WaitFifoStateUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e027      	b.n	8004874 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff fe68 	bl	8004504 <SPI_WaitFlagStateUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e014      	b.n	8004874 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fedc 	bl	8004614 <SPI_WaitFifoStateUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e000      	b.n	8004874 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e040      	b.n	8004910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd f87a 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fbe8 	bl	8005090 <UART_SetConfig>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe94 	bl	8005600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 ff1b 	bl	8005744 <UART_CheckIdleState>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b08b      	sub	sp, #44	; 0x2c
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	2b20      	cmp	r3, #32
 800492c:	d156      	bne.n	80049dc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_Transmit_IT+0x22>
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e04f      	b.n	80049de <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UART_Transmit_IT+0x34>
 8004948:	2302      	movs	r3, #2
 800494a:	e048      	b.n	80049de <HAL_UART_Transmit_IT+0xc6>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	88fa      	ldrh	r2, [r7, #6]
 8004966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d107      	bne.n	8004998 <HAL_UART_Transmit_IT+0x80>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_UART_Transmit_IT+0xd4>)
 8004994:	669a      	str	r2, [r3, #104]	; 0x68
 8004996:	e002      	b.n	800499e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <HAL_UART_Transmit_IT+0xd8>)
 800499c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	613b      	str	r3, [r7, #16]
   return(result);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e6      	bne.n	80049a6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	372c      	adds	r7, #44	; 0x2c
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	08005c9f 	.word	0x08005c9f
 80049f0:	08005be7 	.word	0x08005be7

080049f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d142      	bne.n	8004a90 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_Receive_IT+0x22>
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e03b      	b.n	8004a92 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Receive_IT+0x34>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e034      	b.n	8004a92 <HAL_UART_Receive_IT+0x9e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_UART_Receive_IT+0xa8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d01f      	beq.n	8004a80 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d018      	beq.n	8004a80 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	461a      	mov	r2, r3
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 ff6a 	bl	8005960 <UART_Start_Receive_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	e000      	b.n	8004a92 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40008000 	.word	0x40008000

08004aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b0ba      	sub	sp, #232	; 0xe8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004aca:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ace:	4013      	ands	r3, r2
 8004ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d115      	bne.n	8004b08 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00f      	beq.n	8004b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 82a6 	beq.w	800504a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
      }
      return;
 8004b06:	e2a0      	b.n	800504a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8117 	beq.w	8004d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b22:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <HAL_UART_IRQHandler+0x298>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 810a 	beq.w	8004d40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d011      	beq.n	8004b5c <HAL_UART_IRQHandler+0xbc>
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d011      	beq.n	8004b8c <HAL_UART_IRQHandler+0xec>
 8004b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	f043 0204 	orr.w	r2, r3, #4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d011      	beq.n	8004bbc <HAL_UART_IRQHandler+0x11c>
 8004b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb2:	f043 0202 	orr.w	r2, r3, #2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2208      	movs	r2, #8
 8004be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bee:	f043 0208 	orr.w	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <HAL_UART_IRQHandler+0x18a>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 820c 	beq.w	800504e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d005      	beq.n	8004c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04f      	beq.n	8004d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ff36 	bl	8005af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d141      	bne.n	8004d1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1d9      	bne.n	8004c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d013      	beq.n	8004d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <HAL_UART_IRQHandler+0x29c>)
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd f98d 	bl	8002016 <HAL_DMA_Abort_IT>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e00f      	b.n	8004d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9a6 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e00b      	b.n	8004d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9a2 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	e007      	b.n	8004d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f99e 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004d30:	e18d      	b.n	800504e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d32:	bf00      	nop
    return;
 8004d34:	e18b      	b.n	800504e <HAL_UART_IRQHandler+0x5ae>
 8004d36:	bf00      	nop
 8004d38:	04000120 	.word	0x04000120
 8004d3c:	08005bbb 	.word	0x08005bbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 8146 	bne.w	8004fd6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 813f 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8138 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	f040 80b4 	bne.w	8004ee6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 815f 	beq.w	8005052 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	f080 8157 	bcs.w	8005052 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 8085 	bne.w	8004eca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1da      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e1      	bne.n	8004e0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3308      	adds	r3, #8
 8004e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e3      	bne.n	8004e46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e4      	bne.n	8004e8a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f868 	bl	8001f9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8ca 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ee4:	e0b5      	b.n	8005052 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80a7 	beq.w	8005056 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a2 	beq.w	8005056 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
 8004f36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e4      	bne.n	8004f12 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	623b      	str	r3, [r7, #32]
   return(result);
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f6c:	633a      	str	r2, [r7, #48]	; 0x30
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e3      	bne.n	8004f48 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e4      	bne.n	8004f92 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f852 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fd4:	e03f      	b.n	8005056 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00e      	beq.n	8005000 <HAL_UART_IRQHandler+0x560>
 8004fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 f83a 	bl	8006072 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ffe:	e02d      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01c      	beq.n	800505a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
    }
    return;
 8005028:	e017      	b.n	800505a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d012      	beq.n	800505c <HAL_UART_IRQHandler+0x5bc>
 8005036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe8b 	bl	8005d5e <UART_EndTransmit_IT>
    return;
 8005048:	e008      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
      return;
 800504a:	bf00      	nop
 800504c:	e006      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
    return;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_UART_IRQHandler+0x5bc>
    return;
 800505a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800505c:	37e8      	adds	r7, #232	; 0xe8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop

08005064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b08a      	sub	sp, #40	; 0x28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4ba4      	ldr	r3, [pc, #656]	; (8005350 <UART_SetConfig+0x2c0>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a99      	ldr	r2, [pc, #612]	; (8005354 <UART_SetConfig+0x2c4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	4313      	orrs	r3, r2
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a90      	ldr	r2, [pc, #576]	; (8005358 <UART_SetConfig+0x2c8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d126      	bne.n	8005168 <UART_SetConfig+0xd8>
 800511a:	4b90      	ldr	r3, [pc, #576]	; (800535c <UART_SetConfig+0x2cc>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d81b      	bhi.n	8005160 <UART_SetConfig+0xd0>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0xa0>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005141 	.word	0x08005141
 8005134:	08005151 	.word	0x08005151
 8005138:	08005149 	.word	0x08005149
 800513c:	08005159 	.word	0x08005159
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e116      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005148:	2302      	movs	r3, #2
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e112      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005150:	2304      	movs	r3, #4
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e10e      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005158:	2308      	movs	r3, #8
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515e:	e10a      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005160:	2310      	movs	r3, #16
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005166:	e106      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a7c      	ldr	r2, [pc, #496]	; (8005360 <UART_SetConfig+0x2d0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d138      	bne.n	80051e4 <UART_SetConfig+0x154>
 8005172:	4b7a      	ldr	r3, [pc, #488]	; (800535c <UART_SetConfig+0x2cc>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f003 030c 	and.w	r3, r3, #12
 800517c:	2b0c      	cmp	r3, #12
 800517e:	d82d      	bhi.n	80051dc <UART_SetConfig+0x14c>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0xf8>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051dd 	.word	0x080051dd
 8005194:	080051dd 	.word	0x080051dd
 8005198:	080051cd 	.word	0x080051cd
 800519c:	080051dd 	.word	0x080051dd
 80051a0:	080051dd 	.word	0x080051dd
 80051a4:	080051dd 	.word	0x080051dd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	080051dd 	.word	0x080051dd
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e0d8      	b.n	8005376 <UART_SetConfig+0x2e6>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e0d4      	b.n	8005376 <UART_SetConfig+0x2e6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e0d0      	b.n	8005376 <UART_SetConfig+0x2e6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e0cc      	b.n	8005376 <UART_SetConfig+0x2e6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e0c8      	b.n	8005376 <UART_SetConfig+0x2e6>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5e      	ldr	r2, [pc, #376]	; (8005364 <UART_SetConfig+0x2d4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d125      	bne.n	800523a <UART_SetConfig+0x1aa>
 80051ee:	4b5b      	ldr	r3, [pc, #364]	; (800535c <UART_SetConfig+0x2cc>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051f8:	2b30      	cmp	r3, #48	; 0x30
 80051fa:	d016      	beq.n	800522a <UART_SetConfig+0x19a>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d818      	bhi.n	8005232 <UART_SetConfig+0x1a2>
 8005200:	2b20      	cmp	r3, #32
 8005202:	d00a      	beq.n	800521a <UART_SetConfig+0x18a>
 8005204:	2b20      	cmp	r3, #32
 8005206:	d814      	bhi.n	8005232 <UART_SetConfig+0x1a2>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <UART_SetConfig+0x182>
 800520c:	2b10      	cmp	r3, #16
 800520e:	d008      	beq.n	8005222 <UART_SetConfig+0x192>
 8005210:	e00f      	b.n	8005232 <UART_SetConfig+0x1a2>
 8005212:	2300      	movs	r3, #0
 8005214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005218:	e0ad      	b.n	8005376 <UART_SetConfig+0x2e6>
 800521a:	2302      	movs	r3, #2
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005220:	e0a9      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005222:	2304      	movs	r3, #4
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005228:	e0a5      	b.n	8005376 <UART_SetConfig+0x2e6>
 800522a:	2308      	movs	r3, #8
 800522c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005230:	e0a1      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005232:	2310      	movs	r3, #16
 8005234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005238:	e09d      	b.n	8005376 <UART_SetConfig+0x2e6>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <UART_SetConfig+0x2d8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d125      	bne.n	8005290 <UART_SetConfig+0x200>
 8005244:	4b45      	ldr	r3, [pc, #276]	; (800535c <UART_SetConfig+0x2cc>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800524e:	2bc0      	cmp	r3, #192	; 0xc0
 8005250:	d016      	beq.n	8005280 <UART_SetConfig+0x1f0>
 8005252:	2bc0      	cmp	r3, #192	; 0xc0
 8005254:	d818      	bhi.n	8005288 <UART_SetConfig+0x1f8>
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d00a      	beq.n	8005270 <UART_SetConfig+0x1e0>
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d814      	bhi.n	8005288 <UART_SetConfig+0x1f8>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <UART_SetConfig+0x1d8>
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d008      	beq.n	8005278 <UART_SetConfig+0x1e8>
 8005266:	e00f      	b.n	8005288 <UART_SetConfig+0x1f8>
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e082      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005270:	2302      	movs	r3, #2
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e07e      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e07a      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e076      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e072      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a35      	ldr	r2, [pc, #212]	; (800536c <UART_SetConfig+0x2dc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d12a      	bne.n	80052f0 <UART_SetConfig+0x260>
 800529a:	4b30      	ldr	r3, [pc, #192]	; (800535c <UART_SetConfig+0x2cc>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a8:	d01a      	beq.n	80052e0 <UART_SetConfig+0x250>
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d81b      	bhi.n	80052e8 <UART_SetConfig+0x258>
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b4:	d00c      	beq.n	80052d0 <UART_SetConfig+0x240>
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	d815      	bhi.n	80052e8 <UART_SetConfig+0x258>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <UART_SetConfig+0x238>
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d008      	beq.n	80052d8 <UART_SetConfig+0x248>
 80052c6:	e00f      	b.n	80052e8 <UART_SetConfig+0x258>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e052      	b.n	8005376 <UART_SetConfig+0x2e6>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e04e      	b.n	8005376 <UART_SetConfig+0x2e6>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e04a      	b.n	8005376 <UART_SetConfig+0x2e6>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e046      	b.n	8005376 <UART_SetConfig+0x2e6>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e042      	b.n	8005376 <UART_SetConfig+0x2e6>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <UART_SetConfig+0x2c4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d13a      	bne.n	8005370 <UART_SetConfig+0x2e0>
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <UART_SetConfig+0x2cc>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005308:	d01a      	beq.n	8005340 <UART_SetConfig+0x2b0>
 800530a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800530e:	d81b      	bhi.n	8005348 <UART_SetConfig+0x2b8>
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005314:	d00c      	beq.n	8005330 <UART_SetConfig+0x2a0>
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531a:	d815      	bhi.n	8005348 <UART_SetConfig+0x2b8>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <UART_SetConfig+0x298>
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d008      	beq.n	8005338 <UART_SetConfig+0x2a8>
 8005326:	e00f      	b.n	8005348 <UART_SetConfig+0x2b8>
 8005328:	2300      	movs	r3, #0
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e022      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005330:	2302      	movs	r3, #2
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e01e      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e01a      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e016      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e012      	b.n	8005376 <UART_SetConfig+0x2e6>
 8005350:	efff69f3 	.word	0xefff69f3
 8005354:	40008000 	.word	0x40008000
 8005358:	40013800 	.word	0x40013800
 800535c:	40021000 	.word	0x40021000
 8005360:	40004400 	.word	0x40004400
 8005364:	40004800 	.word	0x40004800
 8005368:	40004c00 	.word	0x40004c00
 800536c:	40005000 	.word	0x40005000
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a9f      	ldr	r2, [pc, #636]	; (80055f8 <UART_SetConfig+0x568>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d17a      	bne.n	8005476 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005384:	2b08      	cmp	r3, #8
 8005386:	d824      	bhi.n	80053d2 <UART_SetConfig+0x342>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x300>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053d3 	.word	0x080053d3
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053d3 	.word	0x080053d3
 80053a0:	080053c3 	.word	0x080053c3
 80053a4:	080053d3 	.word	0x080053d3
 80053a8:	080053d3 	.word	0x080053d3
 80053ac:	080053d3 	.word	0x080053d3
 80053b0:	080053cb 	.word	0x080053cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fd fe0a 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80053b8:	61f8      	str	r0, [r7, #28]
        break;
 80053ba:	e010      	b.n	80053de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053bc:	4b8f      	ldr	r3, [pc, #572]	; (80055fc <UART_SetConfig+0x56c>)
 80053be:	61fb      	str	r3, [r7, #28]
        break;
 80053c0:	e00d      	b.n	80053de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c2:	f7fd fd6b 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80053c6:	61f8      	str	r0, [r7, #28]
        break;
 80053c8:	e009      	b.n	80053de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	61fb      	str	r3, [r7, #28]
        break;
 80053d0:	e005      	b.n	80053de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80fb 	beq.w	80055dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d305      	bcc.n	8005402 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d903      	bls.n	800540a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005408:	e0e8      	b.n	80055dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2200      	movs	r2, #0
 800540e:	461c      	mov	r4, r3
 8005410:	4615      	mov	r5, r2
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	022b      	lsls	r3, r5, #8
 800541c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005420:	0222      	lsls	r2, r4, #8
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	6849      	ldr	r1, [r1, #4]
 8005426:	0849      	lsrs	r1, r1, #1
 8005428:	2000      	movs	r0, #0
 800542a:	4688      	mov	r8, r1
 800542c:	4681      	mov	r9, r0
 800542e:	eb12 0a08 	adds.w	sl, r2, r8
 8005432:	eb43 0b09 	adc.w	fp, r3, r9
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	4650      	mov	r0, sl
 8005446:	4659      	mov	r1, fp
 8005448:	f7fa ff2a 	bl	80002a0 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4613      	mov	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	d308      	bcc.n	800546e <UART_SetConfig+0x3de>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005462:	d204      	bcs.n	800546e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	60da      	str	r2, [r3, #12]
 800546c:	e0b6      	b.n	80055dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005474:	e0b2      	b.n	80055dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547e:	d15e      	bne.n	800553e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005484:	2b08      	cmp	r3, #8
 8005486:	d828      	bhi.n	80054da <UART_SetConfig+0x44a>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x400>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054db 	.word	0x080054db
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054db 	.word	0x080054db
 80054a8:	080054db 	.word	0x080054db
 80054ac:	080054db 	.word	0x080054db
 80054b0:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7fd fd8a 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80054b8:	61f8      	str	r0, [r7, #28]
        break;
 80054ba:	e014      	b.n	80054e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054bc:	f7fd fd9c 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 80054c0:	61f8      	str	r0, [r7, #28]
        break;
 80054c2:	e010      	b.n	80054e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <UART_SetConfig+0x56c>)
 80054c6:	61fb      	str	r3, [r7, #28]
        break;
 80054c8:	e00d      	b.n	80054e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7fd fce7 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 80054ce:	61f8      	str	r0, [r7, #28]
        break;
 80054d0:	e009      	b.n	80054e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	61fb      	str	r3, [r7, #28]
        break;
 80054d8:	e005      	b.n	80054e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d077      	beq.n	80055dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005a      	lsls	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	441a      	add	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b0f      	cmp	r3, #15
 8005506:	d916      	bls.n	8005536 <UART_SetConfig+0x4a6>
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d212      	bcs.n	8005536 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f023 030f 	bic.w	r3, r3, #15
 8005518:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	b29b      	uxth	r3, r3
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	b29a      	uxth	r2, r3
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	4313      	orrs	r3, r2
 800552a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	8afa      	ldrh	r2, [r7, #22]
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	e052      	b.n	80055dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800553c:	e04e      	b.n	80055dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800553e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005542:	2b08      	cmp	r3, #8
 8005544:	d827      	bhi.n	8005596 <UART_SetConfig+0x506>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x4bc>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fd fd2c 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8005574:	61f8      	str	r0, [r7, #28]
        break;
 8005576:	e014      	b.n	80055a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fd fd3e 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <UART_SetConfig+0x56c>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fd fc89 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a0:	bf00      	nop
    }

    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d019      	beq.n	80055dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	085a      	lsrs	r2, r3, #1
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	d909      	bls.n	80055d6 <UART_SetConfig+0x546>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d205      	bcs.n	80055d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e002      	b.n	80055dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	40008000 	.word	0x40008000
 80055fc:	00f42400 	.word	0x00f42400

08005600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01a      	beq.n	8005716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fe:	d10a      	bne.n	8005716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af02      	add	r7, sp, #8
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005754:	f7fc fae0 	bl	8001d18 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b08      	cmp	r3, #8
 8005766:	d10e      	bne.n	8005786 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f82d 	bl	80057d6 <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e023      	b.n	80057ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b04      	cmp	r3, #4
 8005792:	d10e      	bne.n	80057b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f817 	bl	80057d6 <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e00d      	b.n	80057ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b09c      	sub	sp, #112	; 0x70
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e6:	e0a5      	b.n	8005934 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ee:	f000 80a1 	beq.w	8005934 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fc fa91 	bl	8001d18 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <UART_WaitOnFlagUntilTimeout+0x32>
 8005802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13e      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800581c:	667b      	str	r3, [r7, #100]	; 0x64
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005828:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800582c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e6      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800585a:	64ba      	str	r2, [r7, #72]	; 0x48
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e067      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d04f      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d147      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
 80058ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e6      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3308      	adds	r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	613b      	str	r3, [r7, #16]
   return(result);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005900:	623a      	str	r2, [r7, #32]
 8005902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	61bb      	str	r3, [r7, #24]
   return(result);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e5      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e010      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	429a      	cmp	r2, r3
 8005950:	f43f af4a 	beq.w	80057e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3770      	adds	r7, #112	; 0x70
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005960:	b480      	push	{r7}
 8005962:	b097      	sub	sp, #92	; 0x5c
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d10e      	bne.n	80059b2 <UART_Start_Receive_IT+0x52>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <UART_Start_Receive_IT+0x48>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a6:	e02d      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	22ff      	movs	r2, #255	; 0xff
 80059ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059b0:	e028      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <UART_Start_Receive_IT+0x76>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <UART_Start_Receive_IT+0x6c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	22ff      	movs	r2, #255	; 0xff
 80059c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ca:	e01b      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	227f      	movs	r2, #127	; 0x7f
 80059d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059d4:	e016      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059de:	d10d      	bne.n	80059fc <UART_Start_Receive_IT+0x9c>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <UART_Start_Receive_IT+0x92>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	227f      	movs	r2, #127	; 0x7f
 80059ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059f0:	e008      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	223f      	movs	r2, #63	; 0x3f
 80059f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059fa:	e003      	b.n	8005a04 <UART_Start_Receive_IT+0xa4>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2222      	movs	r2, #34	; 0x22
 8005a10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d107      	bne.n	8005a60 <UART_Start_Receive_IT+0x100>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a24      	ldr	r2, [pc, #144]	; (8005aec <UART_Start_Receive_IT+0x18c>)
 8005a5c:	665a      	str	r2, [r3, #100]	; 0x64
 8005a5e:	e002      	b.n	8005a66 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <UART_Start_Receive_IT+0x190>)
 8005a64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d019      	beq.n	8005aaa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e6      	bne.n	8005a76 <UART_Start_Receive_IT+0x116>
 8005aa8:	e018      	b.n	8005adc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f043 0320 	orr.w	r3, r3, #32
 8005abe:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	69f9      	ldr	r1, [r7, #28]
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e6      	bne.n	8005aaa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	375c      	adds	r7, #92	; 0x5c
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	08005f13 	.word	0x08005f13
 8005af0:	08005db3 	.word	0x08005db3

08005af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b095      	sub	sp, #84	; 0x54
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e5      	bne.n	8005b2e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d118      	bne.n	8005b9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bae:	bf00      	nop
 8005bb0:	3754      	adds	r7, #84	; 0x54
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fa43 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b08f      	sub	sp, #60	; 0x3c
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf2:	2b21      	cmp	r3, #33	; 0x21
 8005bf4:	d14d      	bne.n	8005c92 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d132      	bne.n	8005c68 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c48:	633b      	str	r3, [r7, #48]	; 0x30
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005c66:	e014      	b.n	8005c92 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	b292      	uxth	r2, r2
 8005c74:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c92:	bf00      	nop
 8005c94:	373c      	adds	r7, #60	; 0x3c
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b091      	sub	sp, #68	; 0x44
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005caa:	2b21      	cmp	r3, #33	; 0x21
 8005cac:	d151      	bne.n	8005d52 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d132      	bne.n	8005d20 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e6      	bne.n	8005cba <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	69b9      	ldr	r1, [r7, #24]
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	617b      	str	r3, [r7, #20]
   return(result);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e6      	bne.n	8005cec <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005d1e:	e018      	b.n	8005d52 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	881a      	ldrh	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d32:	b292      	uxth	r2, r2
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d52:	bf00      	nop
 8005d54:	3744      	adds	r7, #68	; 0x44
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b088      	sub	sp, #32
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6979      	ldr	r1, [r7, #20]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	613b      	str	r3, [r7, #16]
   return(result);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fb fd81 	bl	80018ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b096      	sub	sp, #88	; 0x58
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc8:	2b22      	cmp	r3, #34	; 0x22
 8005dca:	f040 8094 	bne.w	8005ef6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ddc:	b2d9      	uxtb	r1, r3
 8005dde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	400a      	ands	r2, r1
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d179      	bne.n	8005f0a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e68:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d12e      	bne.n	8005eee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0310 	bic.w	r3, r3, #16
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d103      	bne.n	8005ede <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2210      	movs	r2, #16
 8005edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f8c6 	bl	8005078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eec:	e00d      	b.n	8005f0a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb fc20 	bl	8001734 <HAL_UART_RxCpltCallback>
}
 8005ef4:	e009      	b.n	8005f0a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	8b1b      	ldrh	r3, [r3, #24]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0208 	orr.w	r2, r2, #8
 8005f06:	b292      	uxth	r2, r2
 8005f08:	831a      	strh	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	3758      	adds	r7, #88	; 0x58
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b096      	sub	sp, #88	; 0x58
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f28:	2b22      	cmp	r3, #34	; 0x22
 8005f2a:	f040 8094 	bne.w	8006056 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f46:	4013      	ands	r3, r2
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d179      	bne.n	800606a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f94:	643b      	str	r3, [r7, #64]	; 0x40
 8005f96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e5      	bne.n	8005fa8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d12e      	bne.n	800604e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	60bb      	str	r3, [r7, #8]
   return(result);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	647b      	str	r3, [r7, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	613b      	str	r3, [r7, #16]
   return(result);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d103      	bne.n	800603e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2210      	movs	r2, #16
 800603c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff f816 	bl	8005078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800604c:	e00d      	b.n	800606a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb fb70 	bl	8001734 <HAL_UART_RxCpltCallback>
}
 8006054:	e009      	b.n	800606a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	8b1b      	ldrh	r3, [r3, #24]
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0208 	orr.w	r2, r2, #8
 8006066:	b292      	uxth	r2, r2
 8006068:	831a      	strh	r2, [r3, #24]
}
 800606a:	bf00      	nop
 800606c:	3758      	adds	r7, #88	; 0x58
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <atoi>:
 8006086:	220a      	movs	r2, #10
 8006088:	2100      	movs	r1, #0
 800608a:	f000 b8eb 	b.w	8006264 <strtol>
	...

08006090 <__errno>:
 8006090:	4b01      	ldr	r3, [pc, #4]	; (8006098 <__errno+0x8>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	2000000c 	.word	0x2000000c

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4d0d      	ldr	r5, [pc, #52]	; (80060d4 <__libc_init_array+0x38>)
 80060a0:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a2:	1b64      	subs	r4, r4, r5
 80060a4:	10a4      	asrs	r4, r4, #2
 80060a6:	2600      	movs	r6, #0
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	4d0b      	ldr	r5, [pc, #44]	; (80060dc <__libc_init_array+0x40>)
 80060ae:	4c0c      	ldr	r4, [pc, #48]	; (80060e0 <__libc_init_array+0x44>)
 80060b0:	f000 fd22 	bl	8006af8 <_init>
 80060b4:	1b64      	subs	r4, r4, r5
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	2600      	movs	r6, #0
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	08006d2c 	.word	0x08006d2c
 80060d8:	08006d2c 	.word	0x08006d2c
 80060dc:	08006d2c 	.word	0x08006d2c
 80060e0:	08006d30 	.word	0x08006d30

080060e4 <memcpy>:
 80060e4:	440a      	add	r2, r1
 80060e6:	4291      	cmp	r1, r2
 80060e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060ec:	d100      	bne.n	80060f0 <memcpy+0xc>
 80060ee:	4770      	bx	lr
 80060f0:	b510      	push	{r4, lr}
 80060f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060fa:	4291      	cmp	r1, r2
 80060fc:	d1f9      	bne.n	80060f2 <memcpy+0xe>
 80060fe:	bd10      	pop	{r4, pc}

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <siprintf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	b500      	push	{lr}
 8006114:	b09c      	sub	sp, #112	; 0x70
 8006116:	ab1d      	add	r3, sp, #116	; 0x74
 8006118:	9002      	str	r0, [sp, #8]
 800611a:	9006      	str	r0, [sp, #24]
 800611c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006120:	4809      	ldr	r0, [pc, #36]	; (8006148 <siprintf+0x38>)
 8006122:	9107      	str	r1, [sp, #28]
 8006124:	9104      	str	r1, [sp, #16]
 8006126:	4909      	ldr	r1, [pc, #36]	; (800614c <siprintf+0x3c>)
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	9105      	str	r1, [sp, #20]
 800612e:	6800      	ldr	r0, [r0, #0]
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	a902      	add	r1, sp, #8
 8006134:	f000 f8fc 	bl	8006330 <_svfiprintf_r>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	b01c      	add	sp, #112	; 0x70
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	2000000c 	.word	0x2000000c
 800614c:	ffff0208 	.word	0xffff0208

08006150 <strcpy>:
 8006150:	4603      	mov	r3, r0
 8006152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006156:	f803 2b01 	strb.w	r2, [r3], #1
 800615a:	2a00      	cmp	r2, #0
 800615c:	d1f9      	bne.n	8006152 <strcpy+0x2>
 800615e:	4770      	bx	lr

08006160 <_strtol_l.constprop.0>:
 8006160:	2b01      	cmp	r3, #1
 8006162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006166:	d001      	beq.n	800616c <_strtol_l.constprop.0+0xc>
 8006168:	2b24      	cmp	r3, #36	; 0x24
 800616a:	d906      	bls.n	800617a <_strtol_l.constprop.0+0x1a>
 800616c:	f7ff ff90 	bl	8006090 <__errno>
 8006170:	2316      	movs	r3, #22
 8006172:	6003      	str	r3, [r0, #0]
 8006174:	2000      	movs	r0, #0
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006260 <_strtol_l.constprop.0+0x100>
 800617e:	460d      	mov	r5, r1
 8006180:	462e      	mov	r6, r5
 8006182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006186:	f814 700c 	ldrb.w	r7, [r4, ip]
 800618a:	f017 0708 	ands.w	r7, r7, #8
 800618e:	d1f7      	bne.n	8006180 <_strtol_l.constprop.0+0x20>
 8006190:	2c2d      	cmp	r4, #45	; 0x2d
 8006192:	d132      	bne.n	80061fa <_strtol_l.constprop.0+0x9a>
 8006194:	782c      	ldrb	r4, [r5, #0]
 8006196:	2701      	movs	r7, #1
 8006198:	1cb5      	adds	r5, r6, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d05b      	beq.n	8006256 <_strtol_l.constprop.0+0xf6>
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d109      	bne.n	80061b6 <_strtol_l.constprop.0+0x56>
 80061a2:	2c30      	cmp	r4, #48	; 0x30
 80061a4:	d107      	bne.n	80061b6 <_strtol_l.constprop.0+0x56>
 80061a6:	782c      	ldrb	r4, [r5, #0]
 80061a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061ac:	2c58      	cmp	r4, #88	; 0x58
 80061ae:	d14d      	bne.n	800624c <_strtol_l.constprop.0+0xec>
 80061b0:	786c      	ldrb	r4, [r5, #1]
 80061b2:	2310      	movs	r3, #16
 80061b4:	3502      	adds	r5, #2
 80061b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80061be:	f04f 0c00 	mov.w	ip, #0
 80061c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80061c6:	4666      	mov	r6, ip
 80061c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80061cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061d0:	f1be 0f09 	cmp.w	lr, #9
 80061d4:	d816      	bhi.n	8006204 <_strtol_l.constprop.0+0xa4>
 80061d6:	4674      	mov	r4, lr
 80061d8:	42a3      	cmp	r3, r4
 80061da:	dd24      	ble.n	8006226 <_strtol_l.constprop.0+0xc6>
 80061dc:	f1bc 0f00 	cmp.w	ip, #0
 80061e0:	db1e      	blt.n	8006220 <_strtol_l.constprop.0+0xc0>
 80061e2:	45b1      	cmp	r9, r6
 80061e4:	d31c      	bcc.n	8006220 <_strtol_l.constprop.0+0xc0>
 80061e6:	d101      	bne.n	80061ec <_strtol_l.constprop.0+0x8c>
 80061e8:	45a2      	cmp	sl, r4
 80061ea:	db19      	blt.n	8006220 <_strtol_l.constprop.0+0xc0>
 80061ec:	fb06 4603 	mla	r6, r6, r3, r4
 80061f0:	f04f 0c01 	mov.w	ip, #1
 80061f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061f8:	e7e8      	b.n	80061cc <_strtol_l.constprop.0+0x6c>
 80061fa:	2c2b      	cmp	r4, #43	; 0x2b
 80061fc:	bf04      	itt	eq
 80061fe:	782c      	ldrbeq	r4, [r5, #0]
 8006200:	1cb5      	addeq	r5, r6, #2
 8006202:	e7ca      	b.n	800619a <_strtol_l.constprop.0+0x3a>
 8006204:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006208:	f1be 0f19 	cmp.w	lr, #25
 800620c:	d801      	bhi.n	8006212 <_strtol_l.constprop.0+0xb2>
 800620e:	3c37      	subs	r4, #55	; 0x37
 8006210:	e7e2      	b.n	80061d8 <_strtol_l.constprop.0+0x78>
 8006212:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006216:	f1be 0f19 	cmp.w	lr, #25
 800621a:	d804      	bhi.n	8006226 <_strtol_l.constprop.0+0xc6>
 800621c:	3c57      	subs	r4, #87	; 0x57
 800621e:	e7db      	b.n	80061d8 <_strtol_l.constprop.0+0x78>
 8006220:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006224:	e7e6      	b.n	80061f4 <_strtol_l.constprop.0+0x94>
 8006226:	f1bc 0f00 	cmp.w	ip, #0
 800622a:	da05      	bge.n	8006238 <_strtol_l.constprop.0+0xd8>
 800622c:	2322      	movs	r3, #34	; 0x22
 800622e:	6003      	str	r3, [r0, #0]
 8006230:	4646      	mov	r6, r8
 8006232:	b942      	cbnz	r2, 8006246 <_strtol_l.constprop.0+0xe6>
 8006234:	4630      	mov	r0, r6
 8006236:	e79e      	b.n	8006176 <_strtol_l.constprop.0+0x16>
 8006238:	b107      	cbz	r7, 800623c <_strtol_l.constprop.0+0xdc>
 800623a:	4276      	negs	r6, r6
 800623c:	2a00      	cmp	r2, #0
 800623e:	d0f9      	beq.n	8006234 <_strtol_l.constprop.0+0xd4>
 8006240:	f1bc 0f00 	cmp.w	ip, #0
 8006244:	d000      	beq.n	8006248 <_strtol_l.constprop.0+0xe8>
 8006246:	1e69      	subs	r1, r5, #1
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	e7f3      	b.n	8006234 <_strtol_l.constprop.0+0xd4>
 800624c:	2430      	movs	r4, #48	; 0x30
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1b1      	bne.n	80061b6 <_strtol_l.constprop.0+0x56>
 8006252:	2308      	movs	r3, #8
 8006254:	e7af      	b.n	80061b6 <_strtol_l.constprop.0+0x56>
 8006256:	2c30      	cmp	r4, #48	; 0x30
 8006258:	d0a5      	beq.n	80061a6 <_strtol_l.constprop.0+0x46>
 800625a:	230a      	movs	r3, #10
 800625c:	e7ab      	b.n	80061b6 <_strtol_l.constprop.0+0x56>
 800625e:	bf00      	nop
 8006260:	08006bf1 	.word	0x08006bf1

08006264 <strtol>:
 8006264:	4613      	mov	r3, r2
 8006266:	460a      	mov	r2, r1
 8006268:	4601      	mov	r1, r0
 800626a:	4802      	ldr	r0, [pc, #8]	; (8006274 <strtol+0x10>)
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f7ff bf77 	b.w	8006160 <_strtol_l.constprop.0>
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c

08006278 <__ssputs_r>:
 8006278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	688e      	ldr	r6, [r1, #8]
 800627e:	429e      	cmp	r6, r3
 8006280:	4682      	mov	sl, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4690      	mov	r8, r2
 8006286:	461f      	mov	r7, r3
 8006288:	d838      	bhi.n	80062fc <__ssputs_r+0x84>
 800628a:	898a      	ldrh	r2, [r1, #12]
 800628c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006290:	d032      	beq.n	80062f8 <__ssputs_r+0x80>
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	6909      	ldr	r1, [r1, #16]
 8006296:	eba5 0901 	sub.w	r9, r5, r1
 800629a:	6965      	ldr	r5, [r4, #20]
 800629c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a4:	3301      	adds	r3, #1
 80062a6:	444b      	add	r3, r9
 80062a8:	106d      	asrs	r5, r5, #1
 80062aa:	429d      	cmp	r5, r3
 80062ac:	bf38      	it	cc
 80062ae:	461d      	movcc	r5, r3
 80062b0:	0553      	lsls	r3, r2, #21
 80062b2:	d531      	bpl.n	8006318 <__ssputs_r+0xa0>
 80062b4:	4629      	mov	r1, r5
 80062b6:	f000 fb55 	bl	8006964 <_malloc_r>
 80062ba:	4606      	mov	r6, r0
 80062bc:	b950      	cbnz	r0, 80062d4 <__ssputs_r+0x5c>
 80062be:	230c      	movs	r3, #12
 80062c0:	f8ca 3000 	str.w	r3, [sl]
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d4:	6921      	ldr	r1, [r4, #16]
 80062d6:	464a      	mov	r2, r9
 80062d8:	f7ff ff04 	bl	80060e4 <memcpy>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	6126      	str	r6, [r4, #16]
 80062ea:	6165      	str	r5, [r4, #20]
 80062ec:	444e      	add	r6, r9
 80062ee:	eba5 0509 	sub.w	r5, r5, r9
 80062f2:	6026      	str	r6, [r4, #0]
 80062f4:	60a5      	str	r5, [r4, #8]
 80062f6:	463e      	mov	r6, r7
 80062f8:	42be      	cmp	r6, r7
 80062fa:	d900      	bls.n	80062fe <__ssputs_r+0x86>
 80062fc:	463e      	mov	r6, r7
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	4632      	mov	r2, r6
 8006302:	4641      	mov	r1, r8
 8006304:	f000 faa8 	bl	8006858 <memmove>
 8006308:	68a3      	ldr	r3, [r4, #8]
 800630a:	1b9b      	subs	r3, r3, r6
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	4433      	add	r3, r6
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	2000      	movs	r0, #0
 8006316:	e7db      	b.n	80062d0 <__ssputs_r+0x58>
 8006318:	462a      	mov	r2, r5
 800631a:	f000 fb97 	bl	8006a4c <_realloc_r>
 800631e:	4606      	mov	r6, r0
 8006320:	2800      	cmp	r0, #0
 8006322:	d1e1      	bne.n	80062e8 <__ssputs_r+0x70>
 8006324:	6921      	ldr	r1, [r4, #16]
 8006326:	4650      	mov	r0, sl
 8006328:	f000 fab0 	bl	800688c <_free_r>
 800632c:	e7c7      	b.n	80062be <__ssputs_r+0x46>
	...

08006330 <_svfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	4698      	mov	r8, r3
 8006336:	898b      	ldrh	r3, [r1, #12]
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	b09d      	sub	sp, #116	; 0x74
 800633c:	4607      	mov	r7, r0
 800633e:	460d      	mov	r5, r1
 8006340:	4614      	mov	r4, r2
 8006342:	d50e      	bpl.n	8006362 <_svfiprintf_r+0x32>
 8006344:	690b      	ldr	r3, [r1, #16]
 8006346:	b963      	cbnz	r3, 8006362 <_svfiprintf_r+0x32>
 8006348:	2140      	movs	r1, #64	; 0x40
 800634a:	f000 fb0b 	bl	8006964 <_malloc_r>
 800634e:	6028      	str	r0, [r5, #0]
 8006350:	6128      	str	r0, [r5, #16]
 8006352:	b920      	cbnz	r0, 800635e <_svfiprintf_r+0x2e>
 8006354:	230c      	movs	r3, #12
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800635c:	e0d1      	b.n	8006502 <_svfiprintf_r+0x1d2>
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	616b      	str	r3, [r5, #20]
 8006362:	2300      	movs	r3, #0
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	2320      	movs	r3, #32
 8006368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800636c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006370:	2330      	movs	r3, #48	; 0x30
 8006372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800651c <_svfiprintf_r+0x1ec>
 8006376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800637a:	f04f 0901 	mov.w	r9, #1
 800637e:	4623      	mov	r3, r4
 8006380:	469a      	mov	sl, r3
 8006382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006386:	b10a      	cbz	r2, 800638c <_svfiprintf_r+0x5c>
 8006388:	2a25      	cmp	r2, #37	; 0x25
 800638a:	d1f9      	bne.n	8006380 <_svfiprintf_r+0x50>
 800638c:	ebba 0b04 	subs.w	fp, sl, r4
 8006390:	d00b      	beq.n	80063aa <_svfiprintf_r+0x7a>
 8006392:	465b      	mov	r3, fp
 8006394:	4622      	mov	r2, r4
 8006396:	4629      	mov	r1, r5
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff ff6d 	bl	8006278 <__ssputs_r>
 800639e:	3001      	adds	r0, #1
 80063a0:	f000 80aa 	beq.w	80064f8 <_svfiprintf_r+0x1c8>
 80063a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a6:	445a      	add	r2, fp
 80063a8:	9209      	str	r2, [sp, #36]	; 0x24
 80063aa:	f89a 3000 	ldrb.w	r3, [sl]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80a2 	beq.w	80064f8 <_svfiprintf_r+0x1c8>
 80063b4:	2300      	movs	r3, #0
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063be:	f10a 0a01 	add.w	sl, sl, #1
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	9307      	str	r3, [sp, #28]
 80063c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ca:	931a      	str	r3, [sp, #104]	; 0x68
 80063cc:	4654      	mov	r4, sl
 80063ce:	2205      	movs	r2, #5
 80063d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d4:	4851      	ldr	r0, [pc, #324]	; (800651c <_svfiprintf_r+0x1ec>)
 80063d6:	f7f9 ff13 	bl	8000200 <memchr>
 80063da:	9a04      	ldr	r2, [sp, #16]
 80063dc:	b9d8      	cbnz	r0, 8006416 <_svfiprintf_r+0xe6>
 80063de:	06d0      	lsls	r0, r2, #27
 80063e0:	bf44      	itt	mi
 80063e2:	2320      	movmi	r3, #32
 80063e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e8:	0711      	lsls	r1, r2, #28
 80063ea:	bf44      	itt	mi
 80063ec:	232b      	movmi	r3, #43	; 0x2b
 80063ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f2:	f89a 3000 	ldrb.w	r3, [sl]
 80063f6:	2b2a      	cmp	r3, #42	; 0x2a
 80063f8:	d015      	beq.n	8006426 <_svfiprintf_r+0xf6>
 80063fa:	9a07      	ldr	r2, [sp, #28]
 80063fc:	4654      	mov	r4, sl
 80063fe:	2000      	movs	r0, #0
 8006400:	f04f 0c0a 	mov.w	ip, #10
 8006404:	4621      	mov	r1, r4
 8006406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800640a:	3b30      	subs	r3, #48	; 0x30
 800640c:	2b09      	cmp	r3, #9
 800640e:	d94e      	bls.n	80064ae <_svfiprintf_r+0x17e>
 8006410:	b1b0      	cbz	r0, 8006440 <_svfiprintf_r+0x110>
 8006412:	9207      	str	r2, [sp, #28]
 8006414:	e014      	b.n	8006440 <_svfiprintf_r+0x110>
 8006416:	eba0 0308 	sub.w	r3, r0, r8
 800641a:	fa09 f303 	lsl.w	r3, r9, r3
 800641e:	4313      	orrs	r3, r2
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	46a2      	mov	sl, r4
 8006424:	e7d2      	b.n	80063cc <_svfiprintf_r+0x9c>
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	1d19      	adds	r1, r3, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	9103      	str	r1, [sp, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfbb      	ittet	lt
 8006432:	425b      	neglt	r3, r3
 8006434:	f042 0202 	orrlt.w	r2, r2, #2
 8006438:	9307      	strge	r3, [sp, #28]
 800643a:	9307      	strlt	r3, [sp, #28]
 800643c:	bfb8      	it	lt
 800643e:	9204      	strlt	r2, [sp, #16]
 8006440:	7823      	ldrb	r3, [r4, #0]
 8006442:	2b2e      	cmp	r3, #46	; 0x2e
 8006444:	d10c      	bne.n	8006460 <_svfiprintf_r+0x130>
 8006446:	7863      	ldrb	r3, [r4, #1]
 8006448:	2b2a      	cmp	r3, #42	; 0x2a
 800644a:	d135      	bne.n	80064b8 <_svfiprintf_r+0x188>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	9203      	str	r2, [sp, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfb8      	it	lt
 8006458:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800645c:	3402      	adds	r4, #2
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800652c <_svfiprintf_r+0x1fc>
 8006464:	7821      	ldrb	r1, [r4, #0]
 8006466:	2203      	movs	r2, #3
 8006468:	4650      	mov	r0, sl
 800646a:	f7f9 fec9 	bl	8000200 <memchr>
 800646e:	b140      	cbz	r0, 8006482 <_svfiprintf_r+0x152>
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	eba0 000a 	sub.w	r0, r0, sl
 8006476:	fa03 f000 	lsl.w	r0, r3, r0
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	4303      	orrs	r3, r0
 800647e:	3401      	adds	r4, #1
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006486:	4826      	ldr	r0, [pc, #152]	; (8006520 <_svfiprintf_r+0x1f0>)
 8006488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800648c:	2206      	movs	r2, #6
 800648e:	f7f9 feb7 	bl	8000200 <memchr>
 8006492:	2800      	cmp	r0, #0
 8006494:	d038      	beq.n	8006508 <_svfiprintf_r+0x1d8>
 8006496:	4b23      	ldr	r3, [pc, #140]	; (8006524 <_svfiprintf_r+0x1f4>)
 8006498:	bb1b      	cbnz	r3, 80064e2 <_svfiprintf_r+0x1b2>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	3307      	adds	r3, #7
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	3308      	adds	r3, #8
 80064a4:	9303      	str	r3, [sp, #12]
 80064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a8:	4433      	add	r3, r6
 80064aa:	9309      	str	r3, [sp, #36]	; 0x24
 80064ac:	e767      	b.n	800637e <_svfiprintf_r+0x4e>
 80064ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80064b2:	460c      	mov	r4, r1
 80064b4:	2001      	movs	r0, #1
 80064b6:	e7a5      	b.n	8006404 <_svfiprintf_r+0xd4>
 80064b8:	2300      	movs	r3, #0
 80064ba:	3401      	adds	r4, #1
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	4619      	mov	r1, r3
 80064c0:	f04f 0c0a 	mov.w	ip, #10
 80064c4:	4620      	mov	r0, r4
 80064c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ca:	3a30      	subs	r2, #48	; 0x30
 80064cc:	2a09      	cmp	r2, #9
 80064ce:	d903      	bls.n	80064d8 <_svfiprintf_r+0x1a8>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0c5      	beq.n	8006460 <_svfiprintf_r+0x130>
 80064d4:	9105      	str	r1, [sp, #20]
 80064d6:	e7c3      	b.n	8006460 <_svfiprintf_r+0x130>
 80064d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80064dc:	4604      	mov	r4, r0
 80064de:	2301      	movs	r3, #1
 80064e0:	e7f0      	b.n	80064c4 <_svfiprintf_r+0x194>
 80064e2:	ab03      	add	r3, sp, #12
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	462a      	mov	r2, r5
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <_svfiprintf_r+0x1f8>)
 80064ea:	a904      	add	r1, sp, #16
 80064ec:	4638      	mov	r0, r7
 80064ee:	f3af 8000 	nop.w
 80064f2:	1c42      	adds	r2, r0, #1
 80064f4:	4606      	mov	r6, r0
 80064f6:	d1d6      	bne.n	80064a6 <_svfiprintf_r+0x176>
 80064f8:	89ab      	ldrh	r3, [r5, #12]
 80064fa:	065b      	lsls	r3, r3, #25
 80064fc:	f53f af2c 	bmi.w	8006358 <_svfiprintf_r+0x28>
 8006500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006502:	b01d      	add	sp, #116	; 0x74
 8006504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006508:	ab03      	add	r3, sp, #12
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	462a      	mov	r2, r5
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <_svfiprintf_r+0x1f8>)
 8006510:	a904      	add	r1, sp, #16
 8006512:	4638      	mov	r0, r7
 8006514:	f000 f87a 	bl	800660c <_printf_i>
 8006518:	e7eb      	b.n	80064f2 <_svfiprintf_r+0x1c2>
 800651a:	bf00      	nop
 800651c:	08006cf1 	.word	0x08006cf1
 8006520:	08006cfb 	.word	0x08006cfb
 8006524:	00000000 	.word	0x00000000
 8006528:	08006279 	.word	0x08006279
 800652c:	08006cf7 	.word	0x08006cf7

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4699      	mov	r9, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006540:	4293      	cmp	r3, r2
 8006542:	bfb8      	it	lt
 8006544:	4613      	movlt	r3, r2
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc26      	bgt.n	80065c6 <_printf_common+0x96>
 8006578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800657c:	1e13      	subs	r3, r2, #0
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d42b      	bmi.n	80065e0 <_printf_common+0xb0>
 8006588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800658c:	4649      	mov	r1, r9
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d01e      	beq.n	80065d4 <_printf_common+0xa4>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	68e5      	ldr	r5, [r4, #12]
 800659a:	6832      	ldr	r2, [r6, #0]
 800659c:	f003 0306 	and.w	r3, r3, #6
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	bf08      	it	eq
 80065a4:	1aad      	subeq	r5, r5, r2
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	bf0c      	ite	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	2500      	movne	r5, #0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bfc4      	itt	gt
 80065b6:	1a9b      	subgt	r3, r3, r2
 80065b8:	18ed      	addgt	r5, r5, r3
 80065ba:	2600      	movs	r6, #0
 80065bc:	341a      	adds	r4, #26
 80065be:	42b5      	cmp	r5, r6
 80065c0:	d11a      	bne.n	80065f8 <_printf_common+0xc8>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e008      	b.n	80065d8 <_printf_common+0xa8>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	4649      	mov	r1, r9
 80065cc:	4638      	mov	r0, r7
 80065ce:	47c0      	blx	r8
 80065d0:	3001      	adds	r0, #1
 80065d2:	d103      	bne.n	80065dc <_printf_common+0xac>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	3501      	adds	r5, #1
 80065de:	e7c6      	b.n	800656e <_printf_common+0x3e>
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	2030      	movs	r0, #48	; 0x30
 80065e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ea:	4422      	add	r2, r4
 80065ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f4:	3302      	adds	r3, #2
 80065f6:	e7c7      	b.n	8006588 <_printf_common+0x58>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4622      	mov	r2, r4
 80065fc:	4649      	mov	r1, r9
 80065fe:	4638      	mov	r0, r7
 8006600:	47c0      	blx	r8
 8006602:	3001      	adds	r0, #1
 8006604:	d0e6      	beq.n	80065d4 <_printf_common+0xa4>
 8006606:	3601      	adds	r6, #1
 8006608:	e7d9      	b.n	80065be <_printf_common+0x8e>
	...

0800660c <_printf_i>:
 800660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	7e0f      	ldrb	r7, [r1, #24]
 8006612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006614:	2f78      	cmp	r7, #120	; 0x78
 8006616:	4691      	mov	r9, r2
 8006618:	4680      	mov	r8, r0
 800661a:	460c      	mov	r4, r1
 800661c:	469a      	mov	sl, r3
 800661e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006622:	d807      	bhi.n	8006634 <_printf_i+0x28>
 8006624:	2f62      	cmp	r7, #98	; 0x62
 8006626:	d80a      	bhi.n	800663e <_printf_i+0x32>
 8006628:	2f00      	cmp	r7, #0
 800662a:	f000 80d8 	beq.w	80067de <_printf_i+0x1d2>
 800662e:	2f58      	cmp	r7, #88	; 0x58
 8006630:	f000 80a3 	beq.w	800677a <_printf_i+0x16e>
 8006634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800663c:	e03a      	b.n	80066b4 <_printf_i+0xa8>
 800663e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006642:	2b15      	cmp	r3, #21
 8006644:	d8f6      	bhi.n	8006634 <_printf_i+0x28>
 8006646:	a101      	add	r1, pc, #4	; (adr r1, 800664c <_printf_i+0x40>)
 8006648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800664c:	080066a5 	.word	0x080066a5
 8006650:	080066b9 	.word	0x080066b9
 8006654:	08006635 	.word	0x08006635
 8006658:	08006635 	.word	0x08006635
 800665c:	08006635 	.word	0x08006635
 8006660:	08006635 	.word	0x08006635
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006635 	.word	0x08006635
 800666c:	08006635 	.word	0x08006635
 8006670:	08006635 	.word	0x08006635
 8006674:	08006635 	.word	0x08006635
 8006678:	080067c5 	.word	0x080067c5
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080067a7 	.word	0x080067a7
 8006684:	08006635 	.word	0x08006635
 8006688:	08006635 	.word	0x08006635
 800668c:	080067e7 	.word	0x080067e7
 8006690:	08006635 	.word	0x08006635
 8006694:	080066e9 	.word	0x080066e9
 8006698:	08006635 	.word	0x08006635
 800669c:	08006635 	.word	0x08006635
 80066a0:	080067af 	.word	0x080067af
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0a3      	b.n	8006800 <_printf_i+0x1f4>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	6829      	ldr	r1, [r5, #0]
 80066bc:	0606      	lsls	r6, r0, #24
 80066be:	f101 0304 	add.w	r3, r1, #4
 80066c2:	d50a      	bpl.n	80066da <_printf_i+0xce>
 80066c4:	680e      	ldr	r6, [r1, #0]
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xc8>
 80066cc:	232d      	movs	r3, #45	; 0x2d
 80066ce:	4276      	negs	r6, r6
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d4:	485e      	ldr	r0, [pc, #376]	; (8006850 <_printf_i+0x244>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e019      	b.n	800670e <_printf_i+0x102>
 80066da:	680e      	ldr	r6, [r1, #0]
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e2:	bf18      	it	ne
 80066e4:	b236      	sxthne	r6, r6
 80066e6:	e7ef      	b.n	80066c8 <_printf_i+0xbc>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	6029      	str	r1, [r5, #0]
 80066f0:	0601      	lsls	r1, r0, #24
 80066f2:	d501      	bpl.n	80066f8 <_printf_i+0xec>
 80066f4:	681e      	ldr	r6, [r3, #0]
 80066f6:	e002      	b.n	80066fe <_printf_i+0xf2>
 80066f8:	0646      	lsls	r6, r0, #25
 80066fa:	d5fb      	bpl.n	80066f4 <_printf_i+0xe8>
 80066fc:	881e      	ldrh	r6, [r3, #0]
 80066fe:	4854      	ldr	r0, [pc, #336]	; (8006850 <_printf_i+0x244>)
 8006700:	2f6f      	cmp	r7, #111	; 0x6f
 8006702:	bf0c      	ite	eq
 8006704:	2308      	moveq	r3, #8
 8006706:	230a      	movne	r3, #10
 8006708:	2100      	movs	r1, #0
 800670a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670e:	6865      	ldr	r5, [r4, #4]
 8006710:	60a5      	str	r5, [r4, #8]
 8006712:	2d00      	cmp	r5, #0
 8006714:	bfa2      	ittt	ge
 8006716:	6821      	ldrge	r1, [r4, #0]
 8006718:	f021 0104 	bicge.w	r1, r1, #4
 800671c:	6021      	strge	r1, [r4, #0]
 800671e:	b90e      	cbnz	r6, 8006724 <_printf_i+0x118>
 8006720:	2d00      	cmp	r5, #0
 8006722:	d04d      	beq.n	80067c0 <_printf_i+0x1b4>
 8006724:	4615      	mov	r5, r2
 8006726:	fbb6 f1f3 	udiv	r1, r6, r3
 800672a:	fb03 6711 	mls	r7, r3, r1, r6
 800672e:	5dc7      	ldrb	r7, [r0, r7]
 8006730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006734:	4637      	mov	r7, r6
 8006736:	42bb      	cmp	r3, r7
 8006738:	460e      	mov	r6, r1
 800673a:	d9f4      	bls.n	8006726 <_printf_i+0x11a>
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <_printf_i+0x14c>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07de      	lsls	r6, r3, #31
 8006744:	d508      	bpl.n	8006758 <_printf_i+0x14c>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	4299      	cmp	r1, r3
 800674c:	bfde      	ittt	le
 800674e:	2330      	movle	r3, #48	; 0x30
 8006750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006754:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006758:	1b52      	subs	r2, r2, r5
 800675a:	6122      	str	r2, [r4, #16]
 800675c:	f8cd a000 	str.w	sl, [sp]
 8006760:	464b      	mov	r3, r9
 8006762:	aa03      	add	r2, sp, #12
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fee2 	bl	8006530 <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	d14c      	bne.n	800680a <_printf_i+0x1fe>
 8006770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006774:	b004      	add	sp, #16
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	4835      	ldr	r0, [pc, #212]	; (8006850 <_printf_i+0x244>)
 800677c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f851 6b04 	ldr.w	r6, [r1], #4
 8006788:	6029      	str	r1, [r5, #0]
 800678a:	061d      	lsls	r5, r3, #24
 800678c:	d514      	bpl.n	80067b8 <_printf_i+0x1ac>
 800678e:	07df      	lsls	r7, r3, #31
 8006790:	bf44      	itt	mi
 8006792:	f043 0320 	orrmi.w	r3, r3, #32
 8006796:	6023      	strmi	r3, [r4, #0]
 8006798:	b91e      	cbnz	r6, 80067a2 <_printf_i+0x196>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f023 0320 	bic.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	2310      	movs	r3, #16
 80067a4:	e7b0      	b.n	8006708 <_printf_i+0xfc>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	f043 0320 	orr.w	r3, r3, #32
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	2378      	movs	r3, #120	; 0x78
 80067b0:	4828      	ldr	r0, [pc, #160]	; (8006854 <_printf_i+0x248>)
 80067b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b6:	e7e3      	b.n	8006780 <_printf_i+0x174>
 80067b8:	0659      	lsls	r1, r3, #25
 80067ba:	bf48      	it	mi
 80067bc:	b2b6      	uxthmi	r6, r6
 80067be:	e7e6      	b.n	800678e <_printf_i+0x182>
 80067c0:	4615      	mov	r5, r2
 80067c2:	e7bb      	b.n	800673c <_printf_i+0x130>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	6826      	ldr	r6, [r4, #0]
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	1d18      	adds	r0, r3, #4
 80067cc:	6028      	str	r0, [r5, #0]
 80067ce:	0635      	lsls	r5, r6, #24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0x1cc>
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0x1d2>
 80067d8:	0670      	lsls	r0, r6, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0x1c8>
 80067dc:	8019      	strh	r1, [r3, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	4615      	mov	r5, r2
 80067e4:	e7ba      	b.n	800675c <_printf_i+0x150>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7f9 fd04 	bl	8000200 <memchr>
 80067f8:	b108      	cbz	r0, 80067fe <_printf_i+0x1f2>
 80067fa:	1b40      	subs	r0, r0, r5
 80067fc:	6060      	str	r0, [r4, #4]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006808:	e7a8      	b.n	800675c <_printf_i+0x150>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	462a      	mov	r2, r5
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d0ab      	beq.n	8006770 <_printf_i+0x164>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	d413      	bmi.n	8006846 <_printf_i+0x23a>
 800681e:	68e0      	ldr	r0, [r4, #12]
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	4298      	cmp	r0, r3
 8006824:	bfb8      	it	lt
 8006826:	4618      	movlt	r0, r3
 8006828:	e7a4      	b.n	8006774 <_printf_i+0x168>
 800682a:	2301      	movs	r3, #1
 800682c:	4632      	mov	r2, r6
 800682e:	4649      	mov	r1, r9
 8006830:	4640      	mov	r0, r8
 8006832:	47d0      	blx	sl
 8006834:	3001      	adds	r0, #1
 8006836:	d09b      	beq.n	8006770 <_printf_i+0x164>
 8006838:	3501      	adds	r5, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9903      	ldr	r1, [sp, #12]
 800683e:	1a5b      	subs	r3, r3, r1
 8006840:	42ab      	cmp	r3, r5
 8006842:	dcf2      	bgt.n	800682a <_printf_i+0x21e>
 8006844:	e7eb      	b.n	800681e <_printf_i+0x212>
 8006846:	2500      	movs	r5, #0
 8006848:	f104 0619 	add.w	r6, r4, #25
 800684c:	e7f5      	b.n	800683a <_printf_i+0x22e>
 800684e:	bf00      	nop
 8006850:	08006d02 	.word	0x08006d02
 8006854:	08006d13 	.word	0x08006d13

08006858 <memmove>:
 8006858:	4288      	cmp	r0, r1
 800685a:	b510      	push	{r4, lr}
 800685c:	eb01 0402 	add.w	r4, r1, r2
 8006860:	d902      	bls.n	8006868 <memmove+0x10>
 8006862:	4284      	cmp	r4, r0
 8006864:	4623      	mov	r3, r4
 8006866:	d807      	bhi.n	8006878 <memmove+0x20>
 8006868:	1e43      	subs	r3, r0, #1
 800686a:	42a1      	cmp	r1, r4
 800686c:	d008      	beq.n	8006880 <memmove+0x28>
 800686e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006876:	e7f8      	b.n	800686a <memmove+0x12>
 8006878:	4402      	add	r2, r0
 800687a:	4601      	mov	r1, r0
 800687c:	428a      	cmp	r2, r1
 800687e:	d100      	bne.n	8006882 <memmove+0x2a>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800688a:	e7f7      	b.n	800687c <memmove+0x24>

0800688c <_free_r>:
 800688c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688e:	2900      	cmp	r1, #0
 8006890:	d044      	beq.n	800691c <_free_r+0x90>
 8006892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006896:	9001      	str	r0, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f1a1 0404 	sub.w	r4, r1, #4
 800689e:	bfb8      	it	lt
 80068a0:	18e4      	addlt	r4, r4, r3
 80068a2:	f000 f913 	bl	8006acc <__malloc_lock>
 80068a6:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <_free_r+0x94>)
 80068a8:	9801      	ldr	r0, [sp, #4]
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x30>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	b003      	add	sp, #12
 80068b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b8:	f000 b90e 	b.w	8006ad8 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x46>
 80068c0:	6825      	ldr	r5, [r4, #0]
 80068c2:	1961      	adds	r1, r4, r5
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1949      	addeq	r1, r1, r5
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x22>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x50>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x46>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1855      	adds	r5, r2, r1
 80068e0:	42a5      	cmp	r5, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x70>
 80068e4:	6824      	ldr	r4, [r4, #0]
 80068e6:	4421      	add	r1, r4
 80068e8:	1854      	adds	r4, r2, r1
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x26>
 80068f0:	681c      	ldr	r4, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	4421      	add	r1, r4
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x26>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x78>
 80068fe:	230c      	movs	r3, #12
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x26>
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	1961      	adds	r1, r4, r5
 8006908:	428b      	cmp	r3, r1
 800690a:	bf04      	itt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	bf04      	itt	eq
 8006914:	1949      	addeq	r1, r1, r5
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	6054      	str	r4, [r2, #4]
 800691a:	e7ca      	b.n	80068b2 <_free_r+0x26>
 800691c:	b003      	add	sp, #12
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	20000878 	.word	0x20000878

08006924 <sbrk_aligned>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4e0e      	ldr	r6, [pc, #56]	; (8006960 <sbrk_aligned+0x3c>)
 8006928:	460c      	mov	r4, r1
 800692a:	6831      	ldr	r1, [r6, #0]
 800692c:	4605      	mov	r5, r0
 800692e:	b911      	cbnz	r1, 8006936 <sbrk_aligned+0x12>
 8006930:	f000 f8bc 	bl	8006aac <_sbrk_r>
 8006934:	6030      	str	r0, [r6, #0]
 8006936:	4621      	mov	r1, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 f8b7 	bl	8006aac <_sbrk_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d00a      	beq.n	8006958 <sbrk_aligned+0x34>
 8006942:	1cc4      	adds	r4, r0, #3
 8006944:	f024 0403 	bic.w	r4, r4, #3
 8006948:	42a0      	cmp	r0, r4
 800694a:	d007      	beq.n	800695c <sbrk_aligned+0x38>
 800694c:	1a21      	subs	r1, r4, r0
 800694e:	4628      	mov	r0, r5
 8006950:	f000 f8ac 	bl	8006aac <_sbrk_r>
 8006954:	3001      	adds	r0, #1
 8006956:	d101      	bne.n	800695c <sbrk_aligned+0x38>
 8006958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800695c:	4620      	mov	r0, r4
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	2000087c 	.word	0x2000087c

08006964 <_malloc_r>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4607      	mov	r7, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d905      	bls.n	800698c <_malloc_r+0x28>
 8006980:	230c      	movs	r3, #12
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	2600      	movs	r6, #0
 8006986:	4630      	mov	r0, r6
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	4e2e      	ldr	r6, [pc, #184]	; (8006a48 <_malloc_r+0xe4>)
 800698e:	f000 f89d 	bl	8006acc <__malloc_lock>
 8006992:	6833      	ldr	r3, [r6, #0]
 8006994:	461c      	mov	r4, r3
 8006996:	bb34      	cbnz	r4, 80069e6 <_malloc_r+0x82>
 8006998:	4629      	mov	r1, r5
 800699a:	4638      	mov	r0, r7
 800699c:	f7ff ffc2 	bl	8006924 <sbrk_aligned>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	4604      	mov	r4, r0
 80069a4:	d14d      	bne.n	8006a42 <_malloc_r+0xde>
 80069a6:	6834      	ldr	r4, [r6, #0]
 80069a8:	4626      	mov	r6, r4
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	d140      	bne.n	8006a30 <_malloc_r+0xcc>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	4631      	mov	r1, r6
 80069b2:	4638      	mov	r0, r7
 80069b4:	eb04 0803 	add.w	r8, r4, r3
 80069b8:	f000 f878 	bl	8006aac <_sbrk_r>
 80069bc:	4580      	cmp	r8, r0
 80069be:	d13a      	bne.n	8006a36 <_malloc_r+0xd2>
 80069c0:	6821      	ldr	r1, [r4, #0]
 80069c2:	3503      	adds	r5, #3
 80069c4:	1a6d      	subs	r5, r5, r1
 80069c6:	f025 0503 	bic.w	r5, r5, #3
 80069ca:	3508      	adds	r5, #8
 80069cc:	2d0c      	cmp	r5, #12
 80069ce:	bf38      	it	cc
 80069d0:	250c      	movcc	r5, #12
 80069d2:	4629      	mov	r1, r5
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff ffa5 	bl	8006924 <sbrk_aligned>
 80069da:	3001      	adds	r0, #1
 80069dc:	d02b      	beq.n	8006a36 <_malloc_r+0xd2>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	442b      	add	r3, r5
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	e00e      	b.n	8006a04 <_malloc_r+0xa0>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	1b52      	subs	r2, r2, r5
 80069ea:	d41e      	bmi.n	8006a2a <_malloc_r+0xc6>
 80069ec:	2a0b      	cmp	r2, #11
 80069ee:	d916      	bls.n	8006a1e <_malloc_r+0xba>
 80069f0:	1961      	adds	r1, r4, r5
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	6025      	str	r5, [r4, #0]
 80069f6:	bf18      	it	ne
 80069f8:	6059      	strne	r1, [r3, #4]
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	bf08      	it	eq
 80069fe:	6031      	streq	r1, [r6, #0]
 8006a00:	5162      	str	r2, [r4, r5]
 8006a02:	604b      	str	r3, [r1, #4]
 8006a04:	4638      	mov	r0, r7
 8006a06:	f104 060b 	add.w	r6, r4, #11
 8006a0a:	f000 f865 	bl	8006ad8 <__malloc_unlock>
 8006a0e:	f026 0607 	bic.w	r6, r6, #7
 8006a12:	1d23      	adds	r3, r4, #4
 8006a14:	1af2      	subs	r2, r6, r3
 8006a16:	d0b6      	beq.n	8006986 <_malloc_r+0x22>
 8006a18:	1b9b      	subs	r3, r3, r6
 8006a1a:	50a3      	str	r3, [r4, r2]
 8006a1c:	e7b3      	b.n	8006986 <_malloc_r+0x22>
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	bf0c      	ite	eq
 8006a24:	6032      	streq	r2, [r6, #0]
 8006a26:	605a      	strne	r2, [r3, #4]
 8006a28:	e7ec      	b.n	8006a04 <_malloc_r+0xa0>
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	6864      	ldr	r4, [r4, #4]
 8006a2e:	e7b2      	b.n	8006996 <_malloc_r+0x32>
 8006a30:	4634      	mov	r4, r6
 8006a32:	6876      	ldr	r6, [r6, #4]
 8006a34:	e7b9      	b.n	80069aa <_malloc_r+0x46>
 8006a36:	230c      	movs	r3, #12
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f000 f84c 	bl	8006ad8 <__malloc_unlock>
 8006a40:	e7a1      	b.n	8006986 <_malloc_r+0x22>
 8006a42:	6025      	str	r5, [r4, #0]
 8006a44:	e7de      	b.n	8006a04 <_malloc_r+0xa0>
 8006a46:	bf00      	nop
 8006a48:	20000878 	.word	0x20000878

08006a4c <_realloc_r>:
 8006a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a50:	4680      	mov	r8, r0
 8006a52:	4614      	mov	r4, r2
 8006a54:	460e      	mov	r6, r1
 8006a56:	b921      	cbnz	r1, 8006a62 <_realloc_r+0x16>
 8006a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	f7ff bf81 	b.w	8006964 <_malloc_r>
 8006a62:	b92a      	cbnz	r2, 8006a70 <_realloc_r+0x24>
 8006a64:	f7ff ff12 	bl	800688c <_free_r>
 8006a68:	4625      	mov	r5, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	f000 f838 	bl	8006ae4 <_malloc_usable_size_r>
 8006a74:	4284      	cmp	r4, r0
 8006a76:	4607      	mov	r7, r0
 8006a78:	d802      	bhi.n	8006a80 <_realloc_r+0x34>
 8006a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a7e:	d812      	bhi.n	8006aa6 <_realloc_r+0x5a>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4640      	mov	r0, r8
 8006a84:	f7ff ff6e 	bl	8006964 <_malloc_r>
 8006a88:	4605      	mov	r5, r0
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0ed      	beq.n	8006a6a <_realloc_r+0x1e>
 8006a8e:	42bc      	cmp	r4, r7
 8006a90:	4622      	mov	r2, r4
 8006a92:	4631      	mov	r1, r6
 8006a94:	bf28      	it	cs
 8006a96:	463a      	movcs	r2, r7
 8006a98:	f7ff fb24 	bl	80060e4 <memcpy>
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f7ff fef4 	bl	800688c <_free_r>
 8006aa4:	e7e1      	b.n	8006a6a <_realloc_r+0x1e>
 8006aa6:	4635      	mov	r5, r6
 8006aa8:	e7df      	b.n	8006a6a <_realloc_r+0x1e>
	...

08006aac <_sbrk_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4d06      	ldr	r5, [pc, #24]	; (8006ac8 <_sbrk_r+0x1c>)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	f7fb f84c 	bl	8001b54 <_sbrk>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_sbrk_r+0x1a>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_sbrk_r+0x1a>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	20000880 	.word	0x20000880

08006acc <__malloc_lock>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__malloc_lock+0x8>)
 8006ace:	f000 b811 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20000884 	.word	0x20000884

08006ad8 <__malloc_unlock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_unlock+0x8>)
 8006ada:	f000 b80c 	b.w	8006af6 <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20000884 	.word	0x20000884

08006ae4 <_malloc_usable_size_r>:
 8006ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae8:	1f18      	subs	r0, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bfbc      	itt	lt
 8006aee:	580b      	ldrlt	r3, [r1, r0]
 8006af0:	18c0      	addlt	r0, r0, r3
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
