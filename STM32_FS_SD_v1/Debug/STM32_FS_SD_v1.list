
STM32_FS_SD_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800efcc  0800efcc  0001efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f52c  0800f52c  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800f52c  0800f52c  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f52c  0800f52c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f52c  0800f52c  0001f52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800f534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  20000234  0800f768  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800f768  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acd0  00000000  00000000  000202a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b1d  00000000  00000000  0003af77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ea  00000000  00000000  00041140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b82d  00000000  00000000  0004222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff00  00000000  00000000  0006da57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee2fc  00000000  00000000  0008d957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a8c  00000000  00000000  0017bc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001816e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800efb4 	.word	0x0800efb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	0800efb4 	.word	0x0800efb4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fb2a 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f85a 	bl	8000298 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001e4:	f000 f8aa 	bl	800033c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f91c 	bl	8000424 <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f000 f8f4 	bl	80003d8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80001f0:	f000 f8d2 	bl	8000398 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80001f4:	f007 fd8c 	bl	8007d10 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80001f8:	f00e f874 	bl	800e2e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80001fc:	2200      	movs	r2, #0
 80001fe:	491f      	ldr	r1, [pc, #124]	; (800027c <main+0xa4>)
 8000200:	481f      	ldr	r0, [pc, #124]	; (8000280 <main+0xa8>)
 8000202:	f00d fb2b 	bl	800d85c <f_mount>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d002      	beq.n	8000212 <main+0x3a>
  {
      Error_Handler();
 800020c:	f000 f990 	bl	8000530 <Error_Handler>
 8000210:	e02e      	b.n	8000270 <main+0x98>
//      }
//      else
//      {
          //Open file for writing (Create)
	  //do{
		  HAL_Delay(500);
 8000212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000216:	f000 fb89 	bl	800092c <HAL_Delay>
    	  res = f_open(&SDFile, "STM32_New_File.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800021a:	220a      	movs	r2, #10
 800021c:	4919      	ldr	r1, [pc, #100]	; (8000284 <main+0xac>)
 800021e:	481a      	ldr	r0, [pc, #104]	; (8000288 <main+0xb0>)
 8000220:	f00d fb62 	bl	800d8e8 <f_open>
 8000224:	4603      	mov	r3, r0
 8000226:	461a      	mov	r2, r3
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <main+0xb4>)
 800022a:	701a      	strb	r2, [r3, #0]
	  //}while(res != FR_OK);

          if(res != FR_OK)
 800022c:	4b17      	ldr	r3, [pc, #92]	; (800028c <main+0xb4>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <main+0x62>
          {
              Error_Handler();
 8000234:	f000 f97c 	bl	8000530 <Error_Handler>
 8000238:	e01a      	b.n	8000270 <main+0x98>
          }
          else
          {
              //Write to the text file
              res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800023a:	4815      	ldr	r0, [pc, #84]	; (8000290 <main+0xb8>)
 800023c:	f7ff ffc4 	bl	80001c8 <strlen>
 8000240:	4602      	mov	r2, r0
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <main+0xbc>)
 8000244:	4912      	ldr	r1, [pc, #72]	; (8000290 <main+0xb8>)
 8000246:	4810      	ldr	r0, [pc, #64]	; (8000288 <main+0xb0>)
 8000248:	f00d fd0c 	bl	800dc64 <f_write>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <main+0xb4>)
 8000252:	701a      	strb	r2, [r3, #0]
              if((byteswritten == 0) || (res != FR_OK))
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0xbc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d003      	beq.n	8000264 <main+0x8c>
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <main+0xb4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <main+0x92>
              {
                  Error_Handler();
 8000264:	f000 f964 	bl	8000530 <Error_Handler>
 8000268:	e002      	b.n	8000270 <main+0x98>
              }
              else
              {
                  f_close(&SDFile);
 800026a:	4807      	ldr	r0, [pc, #28]	; (8000288 <main+0xb0>)
 800026c:	f00d feed 	bl	800e04a <f_close>
              }
          }

  }

  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	2100      	movs	r1, #0
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <main+0xa8>)
 8000276:	f00d faf1 	bl	800d85c <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027a:	e7fe      	b.n	800027a <main+0xa2>
 800027c:	20000374 	.word	0x20000374
 8000280:	20000378 	.word	0x20000378
 8000284:	0800efcc 	.word	0x0800efcc
 8000288:	200005ac 	.word	0x200005ac
 800028c:	20000364 	.word	0x20000364
 8000290:	20000000 	.word	0x20000000
 8000294:	20000368 	.word	0x20000368

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b096      	sub	sp, #88	; 0x58
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	2244      	movs	r2, #68	; 0x44
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f00e fe58 	bl	800ef5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002be:	f002 f9cf 	bl	8002660 <HAL_PWREx_ControlVoltageScaling>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c8:	f000 f932 	bl	8000530 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002cc:	2310      	movs	r3, #16
 80002ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d8:	2360      	movs	r3, #96	; 0x60
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002e0:	2301      	movs	r3, #1
 80002e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002e8:	2328      	movs	r3, #40	; 0x28
 80002ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ec:	2307      	movs	r3, #7
 80002ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0314 	add.w	r3, r7, #20
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fa15 	bl	800272c <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000308:	f000 f912 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2303      	movs	r3, #3
 8000312:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000320:	463b      	mov	r3, r7
 8000322:	2104      	movs	r1, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fddd 	bl	8002ee4 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000330:	f000 f8fe 	bl	8000530 <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3758      	adds	r7, #88	; 0x58
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b0a2      	sub	sp, #136	; 0x88
 8000340:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000342:	463b      	mov	r3, r7
 8000344:	2288      	movs	r2, #136	; 0x88
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f00e fe07 	bl	800ef5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 800034e:	f44f 2302 	mov.w	r3, #532480	; 0x82000
 8000352:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000358:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800035a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800035e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000360:	2301      	movs	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000368:	2318      	movs	r3, #24
 800036a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800036c:	2307      	movs	r3, #7
 800036e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000370:	2302      	movs	r3, #2
 8000372:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000374:	2302      	movs	r3, #2
 8000376:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800037c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	4618      	mov	r0, r3
 8000382:	f002 ffd3 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800038c:	f000 f8d0 	bl	8000530 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3788      	adds	r7, #136	; 0x88
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <MX_SDMMC1_SD_Init+0x3c>)
 80003a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <MX_SDMMC1_SD_Init+0x38>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	20000250 	.word	0x20000250
 80003d4:	40012800 	.word	0x40012800

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_DMA_Init+0x48>)
 80003e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <MX_DMA_Init+0x48>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	6493      	str	r3, [r2, #72]	; 0x48
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MX_DMA_Init+0x48>)
 80003ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	203b      	movs	r0, #59	; 0x3b
 80003fc:	f000 fb95 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000400:	203b      	movs	r0, #59	; 0x3b
 8000402:	f000 fbae 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	203c      	movs	r0, #60	; 0x3c
 800040c:	f000 fb8d 	bl	8000b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000410:	203c      	movs	r0, #60	; 0x3c
 8000412:	f000 fba6 	bl	8000b62 <HAL_NVIC_EnableIRQ>

}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043a:	4b3b      	ldr	r3, [pc, #236]	; (8000528 <MX_GPIO_Init+0x104>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a3a      	ldr	r2, [pc, #232]	; (8000528 <MX_GPIO_Init+0x104>)
 8000440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b38      	ldr	r3, [pc, #224]	; (8000528 <MX_GPIO_Init+0x104>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b35      	ldr	r3, [pc, #212]	; (8000528 <MX_GPIO_Init+0x104>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a34      	ldr	r2, [pc, #208]	; (8000528 <MX_GPIO_Init+0x104>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <MX_GPIO_Init+0x104>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <MX_GPIO_Init+0x104>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <MX_GPIO_Init+0x104>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_GPIO_Init+0x104>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_GPIO_Init+0x104>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	4a28      	ldr	r2, [pc, #160]	; (8000528 <MX_GPIO_Init+0x104>)
 8000488:	f043 0308 	orr.w	r3, r3, #8
 800048c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_GPIO_Init+0x104>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	f003 0308 	and.w	r3, r3, #8
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_GPIO_Init+0x104>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	4a22      	ldr	r2, [pc, #136]	; (8000528 <MX_GPIO_Init+0x104>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <MX_GPIO_Init+0x104>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	f003 0302 	and.w	r3, r3, #2
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ba:	f000 fed7 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_Pin_GPIO_Port, OE_Pin_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c4:	4819      	ldr	r0, [pc, #100]	; (800052c <MX_GPIO_Init+0x108>)
 80004c6:	f000 fed1 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004ca:	2320      	movs	r3, #32
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 fd00 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin_Pin */
  GPIO_InitStruct.Pin = OE_Pin_Pin;
 80004e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004ee:	2311      	movs	r3, #17
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_Pin_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <MX_GPIO_Init+0x108>)
 8000502:	f000 fcf1 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SW_Pin */
  GPIO_InitStruct.Pin = SD_SW_Pin;
 8000506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_SW_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_GPIO_Init+0x108>)
 800051c:	f000 fce4 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	; 0x60
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a55      	ldr	r2, [pc, #340]	; (80006f8 <HAL_SD_MspInit+0x174>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	f040 80a3 	bne.w	80006ee <HAL_SD_MspInit+0x16a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80005a8:	4b54      	ldr	r3, [pc, #336]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ac:	4a53      	ldr	r2, [pc, #332]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b2:	6613      	str	r3, [r2, #96]	; 0x60
 80005b4:	4b51      	ldr	r3, [pc, #324]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	4a4d      	ldr	r2, [pc, #308]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005cc:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	f003 0304 	and.w	r3, r3, #4
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	4b48      	ldr	r3, [pc, #288]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005dc:	4a47      	ldr	r2, [pc, #284]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e4:	4b45      	ldr	r3, [pc, #276]	; (80006fc <HAL_SD_MspInit+0x178>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80005f0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000602:	230c      	movs	r3, #12
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	483c      	ldr	r0, [pc, #240]	; (8000700 <HAL_SD_MspInit+0x17c>)
 800060e:	f000 fc6b 	bl	8000ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000612:	2304      	movs	r3, #4
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000622:	230c      	movs	r3, #12
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4835      	ldr	r0, [pc, #212]	; (8000704 <HAL_SD_MspInit+0x180>)
 800062e:	f000 fc5b 	bl	8000ee8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000634:	4a35      	ldr	r2, [pc, #212]	; (800070c <HAL_SD_MspInit+0x188>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <HAL_SD_MspInit+0x184>)
 800063a:	2207      	movs	r2, #7
 800063c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b32      	ldr	r3, [pc, #200]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <HAL_SD_MspInit+0x184>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000656:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <HAL_SD_MspInit+0x184>)
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800066c:	4826      	ldr	r0, [pc, #152]	; (8000708 <HAL_SD_MspInit+0x184>)
 800066e:	f000 fa93 	bl	8000b98 <HAL_DMA_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 8000678:	f7ff ff5a 	bl	8000530 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <HAL_SD_MspInit+0x184>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <HAL_SD_MspInit+0x18c>)
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <HAL_SD_MspInit+0x190>)
 800068c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <HAL_SD_MspInit+0x18c>)
 8000690:	2207      	movs	r2, #7
 8000692:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <HAL_SD_MspInit+0x18c>)
 8000696:	2210      	movs	r2, #16
 8000698:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <HAL_SD_MspInit+0x18c>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006c4:	f000 fa68 	bl	8000b98 <HAL_DMA_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_SD_MspInit+0x14e>
    {
      Error_Handler();
 80006ce:	f7ff ff2f 	bl	8000530 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <HAL_SD_MspInit+0x18c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2031      	movs	r0, #49	; 0x31
 80006e4:	f000 fa21 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006e8:	2031      	movs	r0, #49	; 0x31
 80006ea:	f000 fa3a 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012800 	.word	0x40012800
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000800 	.word	0x48000800
 8000704:	48000c00 	.word	0x48000c00
 8000708:	200002d4 	.word	0x200002d4
 800070c:	40020444 	.word	0x40020444
 8000710:	2000031c 	.word	0x2000031c
 8000714:	40020458 	.word	0x40020458

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8c2 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <SDMMC1_IRQHandler+0x10>)
 8000772:	f004 fd2f 	bl	80051d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000250 	.word	0x20000250

08000780 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <DMA2_Channel4_IRQHandler+0x10>)
 8000786:	f000 fb00 	bl	8000d8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200002d4 	.word	0x200002d4

08000794 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <DMA2_Channel5_IRQHandler+0x10>)
 800079a:	f000 faf6 	bl	8000d8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000031c 	.word	0x2000031c

080007a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <OTG_FS_IRQHandler+0x10>)
 80007ae:	f000 fec8 	bl	8001542 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000ef0 	.word	0x20000ef0

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff ffea 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f00e fbad 	bl	800ef6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000812:	f7ff fce1 	bl	80001d8 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000818:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8000824:	0800f534 	.word	0x0800f534
  ldr r2, =_sbss
 8000828:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 800082c:	20001674 	.word	0x20001674

08000830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_2_IRQHandler>
	...

08000834 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_Init+0x3c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_Init+0x3c>)
 8000844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000848:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084a:	2003      	movs	r0, #3
 800084c:	f000 f962 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000850:	2000      	movs	r0, #0
 8000852:	f000 f80f 	bl	8000874 <HAL_InitTick>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	e001      	b.n	8000866 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000862:	f7ff fe6b 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000866:	79fb      	ldrb	r3, [r7, #7]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_InitTick+0x6c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d023      	beq.n	80008d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_InitTick+0x70>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_InitTick+0x6c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f96d 	bl	8000b7e <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10f      	bne.n	80008ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d809      	bhi.n	80008c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f937 	bl	8000b2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_InitTick+0x74>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e007      	b.n	80008d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e004      	b.n	80008d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e001      	b.n	80008d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000108 	.word	0x20000108
 80008e4:	20000100 	.word	0x20000100
 80008e8:	20000104 	.word	0x20000104

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000108 	.word	0x20000108
 8000910:	2000036c 	.word	0x2000036c

08000914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2000036c 	.word	0x2000036c

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff ffee 	bl	8000914 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffde 	bl	8000914 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000108 	.word	0x20000108

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff29 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff3e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff8e 	bl	8000a68 <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff31 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e098      	b.n	8000cdc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_DMA_Init+0x150>)
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d80f      	bhi.n	8000bd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <HAL_DMA_Init+0x154>)
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a4b      	ldr	r2, [pc, #300]	; (8000cf0 <HAL_DMA_Init+0x158>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	009a      	lsls	r2, r3, #2
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <HAL_DMA_Init+0x15c>)
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd4:	e00e      	b.n	8000bf4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <HAL_DMA_Init+0x160>)
 8000bde:	4413      	add	r3, r2
 8000be0:	4a43      	ldr	r2, [pc, #268]	; (8000cf0 <HAL_DMA_Init+0x158>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a42      	ldr	r2, [pc, #264]	; (8000cfc <HAL_DMA_Init+0x164>)
 8000bf2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4e:	d039      	beq.n	8000cc4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <HAL_DMA_Init+0x15c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d11a      	bne.n	8000c90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_DMA_Init+0x168>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f003 031c 	and.w	r3, r3, #28
 8000c66:	210f      	movs	r1, #15
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	4924      	ldr	r1, [pc, #144]	; (8000d00 <HAL_DMA_Init+0x168>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_DMA_Init+0x168>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6859      	ldr	r1, [r3, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f003 031c 	and.w	r3, r3, #28
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	491d      	ldr	r1, [pc, #116]	; (8000d00 <HAL_DMA_Init+0x168>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
 8000c8e:	e019      	b.n	8000cc4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_DMA_Init+0x16c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	f003 031c 	and.w	r3, r3, #28
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	4917      	ldr	r1, [pc, #92]	; (8000d04 <HAL_DMA_Init+0x16c>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_DMA_Init+0x16c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6859      	ldr	r1, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f003 031c 	and.w	r3, r3, #28
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	4911      	ldr	r1, [pc, #68]	; (8000d04 <HAL_DMA_Init+0x16c>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40020407 	.word	0x40020407
 8000cec:	bffdfff8 	.word	0xbffdfff8
 8000cf0:	cccccccd 	.word	0xcccccccd
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	bffdfbf8 	.word	0xbffdfbf8
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	400200a8 	.word	0x400200a8
 8000d04:	400204a8 	.word	0x400204a8

08000d08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d005      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2204      	movs	r2, #4
 8000d24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e029      	b.n	8000d80 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 020e 	bic.w	r2, r2, #14
 8000d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f003 021c 	and.w	r2, r3, #28
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	4798      	blx	r3
    }
  }
  return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 031c 	and.w	r3, r3, #28
 8000daa:	2204      	movs	r2, #4
 8000dac:	409a      	lsls	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d026      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x7a>
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d021      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0204 	bic.w	r2, r2, #4
 8000ddc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f003 021c 	and.w	r2, r3, #28
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	2104      	movs	r1, #4
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d071      	beq.n	8000ede <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e02:	e06c      	b.n	8000ede <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e08:	f003 031c 	and.w	r3, r3, #28
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d02e      	beq.n	8000e76 <HAL_DMA_IRQHandler+0xec>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d029      	beq.n	8000e76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10b      	bne.n	8000e48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020a 	bic.w	r2, r2, #10
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f003 021c 	and.w	r2, r3, #28
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	2102      	movs	r1, #2
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d038      	beq.n	8000ede <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000e74:	e033      	b.n	8000ede <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f003 031c 	and.w	r3, r3, #28
 8000e7e:	2208      	movs	r2, #8
 8000e80:	409a      	lsls	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d02a      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x156>
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d025      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 020e 	bic.w	r2, r2, #14
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f003 021c 	and.w	r2, r3, #28
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e17f      	b.n	80011f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8171 	beq.w	80011f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x40>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d118      	bne.n	8000fc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	6939      	ldr	r1, [r7, #16]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80ac 	beq.w	80011f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <HAL_GPIO_Init+0x330>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a5e      	ldr	r2, [pc, #376]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_GPIO_Init+0x334>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x242>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x338>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x23e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x33c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x23a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x340>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x236>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x344>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x232>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x348>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x22e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <HAL_GPIO_Init+0x34c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x22a>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x244>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x244>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x244>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x244>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x244>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x244>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x244>
 800112a:	2300      	movs	r3, #0
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113c:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_GPIO_Init+0x334>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x350>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x350>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x350>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x350>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x350>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x350>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x350>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x350>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f ae78 	bne.w	8000ef8 <HAL_GPIO_Init+0x10>
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	48000c00 	.word	0x48000c00
 800122c:	48001000 	.word	0x48001000
 8001230:	48001400 	.word	0x48001400
 8001234:	48001800 	.word	0x48001800
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b08f      	sub	sp, #60	; 0x3c
 80012a0:	af0a      	add	r7, sp, #40	; 0x28
 80012a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e116      	b.n	80014dc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f00d f9f9 	bl	800e6c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fb86 	bl	80069fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	687e      	ldr	r6, [r7, #4]
 80012fa:	466d      	mov	r5, sp
 80012fc:	f106 0410 	add.w	r4, r6, #16
 8001300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001308:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001310:	1d33      	adds	r3, r6, #4
 8001312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f005 fa99 	bl	800684c <USB_CoreInit>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0d7      	b.n	80014dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fb74 	bl	8006a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e04a      	b.n	80013d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	333d      	adds	r3, #61	; 0x3d
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	333c      	adds	r3, #60	; 0x3c
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	b298      	uxth	r0, r3
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3356      	adds	r3, #86	; 0x56
 800137a:	4602      	mov	r2, r0
 800137c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3340      	adds	r3, #64	; 0x40
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3344      	adds	r3, #68	; 0x44
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3348      	adds	r3, #72	; 0x48
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	334c      	adds	r3, #76	; 0x4c
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3af      	bcc.n	800133e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e044      	b.n	800146e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3301      	adds	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3b5      	bcc.n	80013e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	687e      	ldr	r6, [r7, #4]
 8001480:	466d      	mov	r5, sp
 8001482:	f106 0410 	add.w	r4, r6, #16
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001492:	e885 0003 	stmia.w	r5, {r0, r1}
 8001496:	1d33      	adds	r3, r6, #4
 8001498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f005 fb0c 	bl	8006ab8 <USB_DevInit>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2202      	movs	r2, #2
 80014aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e014      	b.n	80014dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 f896 	bl	80025fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 faba 	bl	8007a4e <USB_DevDisconnect>

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Start+0x1c>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e01c      	b.n	800153a <HAL_PCD_Start+0x56>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fa5b 	bl	80069dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fa6e 	bl	8007a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b08d      	sub	sp, #52	; 0x34
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fb2c 	bl	8007bb6 <USB_GetMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 847e 	bne.w	8001e62 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f006 fa90 	bl	8007a90 <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 8474 	beq.w	8001e60 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fa7d 	bl	8007a90 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b02      	cmp	r3, #2
 800159e:	d107      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f002 0202 	and.w	r2, r2, #2
 80015ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 fa6b 	bl	8007a90 <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d161      	bne.n	8001688 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0210 	bic.w	r2, r2, #16
 80015d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f003 020f 	and.w	r2, r3, #15
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	0c5b      	lsrs	r3, r3, #17
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d124      	bne.n	800164a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d035      	beq.n	8001678 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	6a38      	ldr	r0, [r7, #32]
 8001620:	f006 f8a2 	bl	8007768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001630:	441a      	add	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001642:	441a      	add	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	e016      	b.n	8001678 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	0c5b      	lsrs	r3, r3, #17
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	2b06      	cmp	r3, #6
 8001654:	d110      	bne.n	8001678 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800165c:	2208      	movs	r2, #8
 800165e:	4619      	mov	r1, r3
 8001660:	6a38      	ldr	r0, [r7, #32]
 8001662:	f006 f881 	bl	8007768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	441a      	add	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0210 	orr.w	r2, r2, #16
 8001686:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f006 f9ff 	bl	8007a90 <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001698:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800169c:	f040 80a7 	bne.w	80017ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fa04 	bl	8007ab6 <USB_ReadDevAllOutEpInterrupt>
 80016ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016b0:	e099      	b.n	80017e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 808e 	beq.w	80017da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 fa28 	bl	8007b1e <USB_ReadDevOutEPInterrupt>
 80016ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e6:	461a      	mov	r2, r3
 80016e8:	2301      	movs	r3, #1
 80016ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 feaa 	bl	8002448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170a:	461a      	mov	r2, r3
 800170c:	2308      	movs	r3, #8
 800170e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fee6 	bl	80024e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172e:	461a      	mov	r2, r3
 8001730:	2310      	movs	r3, #16
 8001732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d030      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b80      	cmp	r3, #128	; 0x80
 8001748:	d109      	bne.n	800175e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2200      	movs	r2, #0
 8001780:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f00d f8c1 	bl	800e910 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	461a      	mov	r2, r3
 800179c:	2302      	movs	r3, #2
 800179e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	461a      	mov	r2, r3
 80017b8:	2320      	movs	r3, #32
 80017ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f af62 	bne.w	80016b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 f94c 	bl	8007a90 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001802:	f040 80a4 	bne.w	800194e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f006 f96d 	bl	8007aea <USB_ReadDevAllInEpInterrupt>
 8001810:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001816:	e096      	b.n	8001946 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 808b 	beq.w	800193a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f006 f993 	bl	8007b5a <USB_ReadDevInEPInterrupt>
 8001834:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	2201      	movs	r2, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	69f9      	ldr	r1, [r7, #28]
 800185c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001860:	4013      	ands	r3, r2
 8001862:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001870:	461a      	mov	r2, r3
 8001872:	2301      	movs	r3, #1
 8001874:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f00c ffb2 	bl	800e7e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001898:	461a      	mov	r2, r3
 800189a:	2308      	movs	r3, #8
 800189c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b4:	461a      	mov	r2, r3
 80018b6:	2310      	movs	r3, #16
 80018b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d0:	461a      	mov	r2, r3
 80018d2:	2340      	movs	r3, #64	; 0x40
 80018d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e2:	6a38      	ldr	r0, [r7, #32]
 80018e4:	f005 fa2a 	bl	8006d3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	3338      	adds	r3, #56	; 0x38
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f00d f80f 	bl	800e934 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	2302      	movs	r3, #2
 8001926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fcff 	bl	8002338 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f af65 	bne.w	8001818 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f006 f89c 	bl	8007a90 <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800195e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001962:	d122      	bne.n	80019aa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f00d fa79 	bl	800ee84 <HAL_PCDEx_LPM_Callback>
 8001992:	e002      	b.n	800199a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f00c ff93 	bl	800e8c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f006 f86e 	bl	8007a90 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019be:	d112      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f00c ff4f 	bl	800e874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f006 f850 	bl	8007a90 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019fa:	d121      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a0a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d111      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a30:	2101      	movs	r1, #1
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f00d fa26 	bl	800ee84 <HAL_PCDEx_LPM_Callback>
 8001a38:	e002      	b.n	8001a40 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f00c ff1a 	bl	800e874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 f823 	bl	8007a90 <USB_ReadInterrupts>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a54:	f040 80b5 	bne.w	8001bc2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2110      	movs	r1, #16
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 f962 	bl	8006d3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7c:	e046      	b.n	8001b0c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa2:	0151      	lsls	r1, r2, #5
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ac4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	0151      	lsls	r1, r2, #5
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	440a      	add	r2, r1
 8001afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	3301      	adds	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3b3      	bcc.n	8001a7e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b42:	f043 030b 	orr.w	r3, r3, #11
 8001b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b58:	f043 030b 	orr.w	r3, r3, #11
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	e015      	b.n	8001b8c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b72:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b86:	f043 030b 	orr.w	r3, r3, #11
 8001b8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f006 f833 	bl	8007c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 ff62 	bl	8007a90 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd6:	d124      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f005 fff8 	bl	8007bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 f925 	bl	8006e36 <USB_GetDevSpeed>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	f001 fb00 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	4620      	mov	r0, r4
 8001c08:	f004 fe4c 	bl	80068a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f00c fe12 	bl	800e836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f005 ff32 	bl	8007a90 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d10a      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f00c fdef 	bl	800e81a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f002 0208 	and.w	r2, r2, #8
 8001c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 ff1d 	bl	8007a90 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d122      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	e014      	b.n	8001c9c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 faf3 	bl	800227c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d3e5      	bcc.n	8001c72 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 fef0 	bl	8007a90 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cba:	d13b      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc0:	e02b      	b.n	8001d1a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3340      	adds	r3, #64	; 0x40
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d115      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da12      	bge.n	8001d14 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333f      	adds	r3, #63	; 0x3f
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fab4 	bl	800227c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3301      	adds	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3ce      	bcc.n	8001cc2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fea9 	bl	8007a90 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d48:	d155      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	e045      	b.n	8001ddc <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d12e      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da2b      	bge.n	8001dd6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d121      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd2:	6053      	str	r3, [r2, #4]
            break;
 8001dd4:	e007      	b.n	8001de6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3301      	adds	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3b4      	bcc.n	8001d50 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f005 fe48 	bl	8007a90 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d10a      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f00c fda3 	bl	800e958 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 fe32 	bl	8007a90 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d115      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f00c fd93 	bl	800e974 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e000      	b.n	8001e62 <HAL_PCD_IRQHandler+0x920>
      return;
 8001e60:	bf00      	nop
    }
  }
}
 8001e62:	3734      	adds	r7, #52	; 0x34
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_SetAddress+0x1a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e013      	b.n	8001eaa <HAL_PCD_SetAddress+0x42>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fd90 	bl	80079c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	4608      	mov	r0, r1
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	70fb      	strb	r3, [r7, #3]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	803b      	strh	r3, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da0f      	bge.n	8001ef8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	705a      	strb	r2, [r3, #1]
 8001ef6:	e00f      	b.n	8001f18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f24:	883a      	ldrh	r2, [r7, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	78ba      	ldrb	r2, [r7, #2]
 8001f2e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d102      	bne.n	8001f4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_PCD_EP_Open+0xaa>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e00e      	b.n	8001f7a <HAL_PCD_EP_Open+0xc8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68f9      	ldr	r1, [r7, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 ff82 	bl	8006e74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0f      	bge.n	8001fb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3338      	adds	r3, #56	; 0x38
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	e00f      	b.n	8001fd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_Close+0x6e>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_Close+0x8c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 ffc0 	bl	8006f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	b2da      	uxtb	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	4618      	mov	r0, r3
 800206c:	f005 f866 	bl	800713c <USB_EPStartXfer>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800209c:	681b      	ldr	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	460b      	mov	r3, r1
 80020b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3338      	adds	r3, #56	; 0x38
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2201      	movs	r2, #1
 80020e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6979      	ldr	r1, [r7, #20]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 f81d 	bl	800713c <USB_EPStartXfer>

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d901      	bls.n	800212a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e04e      	b.n	80021c8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da0f      	bge.n	8002152 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	3338      	adds	r3, #56	; 0x38
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	3304      	adds	r3, #4
 8002148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	705a      	strb	r2, [r3, #1]
 8002150:	e00d      	b.n	800216e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_EP_SetStall+0x82>
 800218a:	2302      	movs	r3, #2
 800218c:	e01c      	b.n	80021c8 <HAL_PCD_EP_SetStall+0xbc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	4618      	mov	r0, r3
 800219e:	f005 fb3b 	bl	8007818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f005 fd2d 	bl	8007c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d901      	bls.n	80021ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e042      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0f      	bge.n	8002216 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	705a      	strb	r2, [r3, #1]
 8002214:	e00f      	b.n	8002236 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PCD_EP_ClrStall+0x86>
 8002252:	2302      	movs	r3, #2
 8002254:	e00e      	b.n	8002274 <HAL_PCD_EP_ClrStall+0xa4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fb45 	bl	80078f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0c      	bge.n	80022aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e00c      	b.n	80022c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 f968 	bl	80075a0 <USB_EPStopXfer>
 80022d0:	4603      	mov	r3, r0
 80022d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022d4:	7afb      	ldrb	r3, [r7, #11]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_PCD_EP_Flush+0x1a>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e01b      	b.n	8002330 <HAL_PCD_EP_Flush+0x52>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da09      	bge.n	800231c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f004 fd11 	bl	8006d3c <USB_FlushTxFifo>
 800231a:	e004      	b.n	8002326 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fd3f 	bl	8006da4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	3338      	adds	r3, #56	; 0x38
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d901      	bls.n	8002370 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e067      	b.n	8002440 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	429a      	cmp	r2, r3
 8002384:	d902      	bls.n	800238c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3303      	adds	r3, #3
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002394:	e026      	b.n	80023e4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d902      	bls.n	80023b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3303      	adds	r3, #3
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68d9      	ldr	r1, [r3, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f005 f994 	bl	80076f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	441a      	add	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d809      	bhi.n	800240e <PCD_WriteEmptyTxFifo+0xd6>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002402:	429a      	cmp	r2, r3
 8002404:	d203      	bcs.n	800240e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1c3      	bne.n	8002396 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d811      	bhi.n	800243e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	2201      	movs	r2, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	43db      	mvns	r3, r3
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800243a:	4013      	ands	r3, r2
 800243c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <PCD_EP_OutXfrComplete_int+0x98>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d124      	bne.n	80024c8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	e01a      	b.n	80024d4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2320      	movs	r3, #32
 80024b8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f00c f975 	bl	800e7b0 <HAL_PCD_DataOutStageCallback>
 80024c6:	e005      	b.n	80024d4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f00c f96e 	bl	800e7b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	4f54310a 	.word	0x4f54310a

080024e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	333c      	adds	r3, #60	; 0x3c
 80024fc:	3304      	adds	r3, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <PCD_EP_OutSetupPacket_int+0x64>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d90e      	bls.n	8002538 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002530:	461a      	mov	r2, r3
 8002532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002536:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f00c f927 	bl	800e78c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	4f54300a 	.word	0x4f54300a

0800254c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	4613      	mov	r3, r2
 800255a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	0419      	lsls	r1, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	430a      	orrs	r2, r1
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
 8002578:	e028      	b.n	80025cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e00d      	b.n	80025aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3340      	adds	r3, #64	; 0x40
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	3301      	adds	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3ec      	bcc.n	800258e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025b4:	883b      	ldrh	r3, [r7, #0]
 80025b6:	0418      	lsls	r0, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	3b01      	subs	r3, #1
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4302      	orrs	r2, r0
 80025c4:	3340      	adds	r3, #64	; 0x40
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262e:	f043 0303 	orr.w	r3, r3, #3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_PWREx_GetVoltageRange+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40007000 	.word	0x40007000

08002660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266e:	d130      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d038      	beq.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002686:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2232      	movs	r2, #50	; 0x32
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	3301      	adds	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a4:	e002      	b.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b8:	d102      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f2      	bne.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d110      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e00f      	b.n	80026f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d007      	beq.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40007000 	.word	0x40007000
 8002704:	20000100 	.word	0x20000100
 8002708:	431bde83 	.word	0x431bde83

0800270c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271a:	6053      	str	r3, [r2, #4]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e3ca      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80e4 	beq.w	8002928 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_RCC_OscConfig+0x4a>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	f040 808b 	bne.w	8002884 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 8087 	bne.w	8002884 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002776:	4b89      	ldr	r3, [pc, #548]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x62>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e3a2      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <HAL_RCC_OscConfig+0x7c>
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_OscConfig+0x88>
 80027a8:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d223      	bcs.n	8002800 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fd55 	bl	800326c <RCC_SetFlashLatencyFromMSIRange>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e383      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027cc:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	496d      	ldr	r1, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4968      	ldr	r1, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
 80027fe:	e025      	b.n	800284c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002800:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002806:	f043 0308 	orr.w	r3, r3, #8
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4960      	ldr	r1, [pc, #384]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	495b      	ldr	r1, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fd15 	bl	800326c <RCC_SetFlashLatencyFromMSIRange>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e343      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284c:	f000 fc4a 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	4950      	ldr	r1, [pc, #320]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_RCC_OscConfig+0x278>)
 800286a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800286c:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_RCC_OscConfig+0x27c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd ffff 	bl	8000874 <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d052      	beq.n	8002926 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	e327      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d032      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a42      	ldr	r2, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002898:	f7fe f83c 	bl	8000914 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a0:	f7fe f838 	bl	8000914 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e310      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028be:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a36      	ldr	r2, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4931      	ldr	r1, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	492c      	ldr	r1, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
 80028f0:	e01a      	b.n	8002928 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a29      	ldr	r2, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028fe:	f7fe f809 	bl	8000914 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002906:	f7fe f805 	bl	8000914 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e2dd      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x1da>
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002926:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d074      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x21a>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d10e      	bne.n	800295e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d10b      	bne.n	800295e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d064      	beq.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d160      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e2ba      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x24a>
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e026      	b.n	80029c4 <HAL_RCC_OscConfig+0x298>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297e:	d115      	bne.n	80029ac <HAL_RCC_OscConfig+0x280>
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e014      	b.n	80029c4 <HAL_RCC_OscConfig+0x298>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	0800f06c 	.word	0x0800f06c
 80029a4:	20000100 	.word	0x20000100
 80029a8:	20000104 	.word	0x20000104
 80029ac:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a9f      	ldr	r2, [pc, #636]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a9c      	ldr	r2, [pc, #624]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fd ffa2 	bl	8000914 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fd ff9e 	bl	8000914 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e276      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e6:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2a8>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fd ff8e 	bl	8000914 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fd ff8a 	bl	8000914 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e262      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x2d0>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d060      	beq.n	8002aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x310>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d116      	bne.n	8002a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3c:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x328>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e23f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	4973      	ldr	r1, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a68:	e040      	b.n	8002aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d023      	beq.n	8002aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a72:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fd ff49 	bl	8000914 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fd ff45 	bl	8000914 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e21d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	495f      	ldr	r1, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e018      	b.n	8002aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fd ff25 	bl	8000914 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fd ff21 	bl	8000914 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1f9      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d03c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	4a4a      	ldr	r2, [pc, #296]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fd ff00 	bl	8000914 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fd fefc 	bl	8000914 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1d4      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3ec>
 8002b38:	e01b      	b.n	8002b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b40:	4a3b      	ldr	r2, [pc, #236]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fd fee3 	bl	8000914 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fd fedf 	bl	8000914 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1b7      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ef      	bne.n	8002b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a6 	beq.w	8002ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d118      	bne.n	8002bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7fd fea6 	bl	8000914 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fd fea2 	bl	8000914 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e17a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4d8>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c02:	e029      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_OscConfig+0x50c>
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c2c:	e014      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
 8002c38:	4b9c      	ldr	r3, [pc, #624]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	4a9b      	ldr	r2, [pc, #620]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c48:	4b98      	ldr	r3, [pc, #608]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a97      	ldr	r2, [pc, #604]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d016      	beq.n	8002c8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fd fe58 	bl	8000914 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fd fe54 	bl	8000914 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e12a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ed      	beq.n	8002c68 <HAL_RCC_OscConfig+0x53c>
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fd fe41 	bl	8000914 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fd fe3d 	bl	8000914 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e113      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cac:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ed      	bne.n	8002c96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cba:	7ffb      	ldrb	r3, [r7, #31]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b7a      	ldr	r3, [pc, #488]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	4a79      	ldr	r2, [pc, #484]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80fe 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f040 80d0 	bne.w	8002e80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ce0:	4b72      	ldr	r3, [pc, #456]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d130      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d127      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d11f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d20:	2a07      	cmp	r2, #7
 8002d22:	bf14      	ite	ne
 8002d24:	2201      	movne	r2, #1
 8002d26:	2200      	moveq	r2, #0
 8002d28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d113      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d06e      	beq.n	8002e34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d069      	beq.n	8002e30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0ad      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d84:	f7fd fdc6 	bl	8000914 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fd fdc2 	bl	8000914 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e09a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dc4:	0212      	lsls	r2, r2, #8
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dcc:	0852      	lsrs	r2, r2, #1
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0552      	lsls	r2, r2, #21
 8002dd2:	4311      	orrs	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd8:	0852      	lsrs	r2, r2, #1
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	0652      	lsls	r2, r2, #25
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de4:	0912      	lsrs	r2, r2, #4
 8002de6:	0452      	lsls	r2, r2, #17
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4930      	ldr	r1, [pc, #192]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e08:	f7fd fd84 	bl	8000914 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fd fd80 	bl	8000914 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e058      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2e:	e050      	b.n	8002ed2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e04f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d148      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e58:	f7fd fd5c 	bl	8000914 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fd fd58 	bl	8000914 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e030      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x734>
 8002e7e:	e028      	b.n	8002ed2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d023      	beq.n	8002ece <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x780>)
 8002e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fd fd3f 	bl	8000914 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	e00c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fd fd3b 	bl	8000914 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d905      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e013      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_OscConfig+0x7b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ec      	bne.n	8002e9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_OscConfig+0x7b0>)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4905      	ldr	r1, [pc, #20]	; (8002edc <HAL_RCC_OscConfig+0x7b0>)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_OscConfig+0x7b4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
 8002ecc:	e001      	b.n	8002ed2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	feeefffc 	.word	0xfeeefffc

08002ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0e7      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d910      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 0207 	bic.w	r2, r3, #7
 8002f0e:	4970      	ldr	r1, [pc, #448]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0cf      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d908      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4960      	ldr	r1, [pc, #384]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d04c      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d121      	bne.n	8002fba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0a6      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f82:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d115      	bne.n	8002fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e09a      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f9a:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e08e      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e086      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4943      	ldr	r1, [pc, #268]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fcc:	f7fd fca2 	bl	8000914 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7fd fc9e 	bl	8000914 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e06e      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	429a      	cmp	r2, r3
 8003016:	d208      	bcs.n	800302a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	492b      	ldr	r1, [pc, #172]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d210      	bcs.n	800305a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 0207 	bic.w	r2, r3, #7
 8003040:	4923      	ldr	r1, [pc, #140]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_ClockConfig+0x1ec>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e036      	b.n	80030c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4918      	ldr	r1, [pc, #96]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4910      	ldr	r1, [pc, #64]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003098:	f000 f824 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	490b      	ldr	r1, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1f4>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1f8>)
 80030b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1fc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fbd9 	bl	8000874 <HAL_InitTick>
 80030c2:	4603      	mov	r3, r0
 80030c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	0800f06c 	.word	0x0800f06c
 80030dc:	20000100 	.word	0x20000100
 80030e0:	20000104 	.word	0x20000104

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030fc:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d121      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d11e      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003118:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	e005      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10d      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003154:	e00a      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d102      	bne.n	8003162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e004      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d101      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800316a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d134      	bne.n	80031dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0xa6>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d003      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0xac>
 8003188:	e005      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800318a:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800318c:	617b      	str	r3, [r7, #20]
      break;
 800318e:	e005      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003192:	617b      	str	r3, [r7, #20]
      break;
 8003194:	e002      	b.n	800319c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	617b      	str	r3, [r7, #20]
      break;
 800319a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	3301      	adds	r3, #1
 80031a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	fb03 f202 	mul.w	r2, r3, r2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	0e5b      	lsrs	r3, r3, #25
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	3301      	adds	r3, #1
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031dc:	69bb      	ldr	r3, [r7, #24]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	0800f084 	.word	0x0800f084
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	007a1200 	.word	0x007a1200

080031fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_RCC_GetHCLKFreq+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000100 	.word	0x20000100

08003214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003218:	f7ff fff0 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4904      	ldr	r1, [pc, #16]	; (800323c <HAL_RCC_GetPCLK1Freq+0x28>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	0800f07c 	.word	0x0800f07c

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003244:	f7ff ffda 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4904      	ldr	r1, [pc, #16]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	0800f07c 	.word	0x0800f07c

0800326c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003284:	f7ff f9de 	bl	8002644 <HAL_PWREx_GetVoltageRange>
 8003288:	6178      	str	r0, [r7, #20]
 800328a:	e014      	b.n	80032b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	6593      	str	r3, [r2, #88]	; 0x58
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032a4:	f7ff f9ce 	bl	8002644 <HAL_PWREx_GetVoltageRange>
 80032a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032bc:	d10b      	bne.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d919      	bls.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2ba0      	cmp	r3, #160	; 0xa0
 80032c8:	d902      	bls.n	80032d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ca:	2302      	movs	r3, #2
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e013      	b.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032d0:	2301      	movs	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e010      	b.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d902      	bls.n	80032e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032dc:	2303      	movs	r3, #3
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e00a      	b.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d102      	bne.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e8:	2302      	movs	r3, #2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e004      	b.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d101      	bne.n	80032f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f4:	2301      	movs	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	4909      	ldr	r1, [pc, #36]	; (8003328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	40022000 	.word	0x40022000

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003334:	2300      	movs	r3, #0
 8003336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003338:	2300      	movs	r3, #0
 800333a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	2b00      	cmp	r3, #0
 8003346:	d041      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003350:	d02a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003356:	d824      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800335c:	d008      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800335e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003362:	d81e      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336c:	d010      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800336e:	e018      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003370:	4b86      	ldr	r3, [pc, #536]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a85      	ldr	r2, [pc, #532]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800337c:	e015      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f829 	bl	80043dc <RCCEx_PLLSAI1_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3320      	adds	r3, #32
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f001 f914 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	74fb      	strb	r3, [r7, #19]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b0:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033be:	4973      	ldr	r1, [pc, #460]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033c6:	e001      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d041      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e0:	d02a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e6:	d824      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ec:	d008      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f2:	d81e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fc:	d010      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033fe:	e018      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003400:	4b62      	ldr	r3, [pc, #392]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a61      	ldr	r2, [pc, #388]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800340c:	e015      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ffe1 	bl	80043dc <RCCEx_PLLSAI1_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800341e:	e00c      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3320      	adds	r3, #32
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f001 f8cc 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	74fb      	strb	r3, [r7, #19]
      break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003440:	4b52      	ldr	r3, [pc, #328]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344e:	494f      	ldr	r1, [pc, #316]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a0 	beq.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a40      	ldr	r2, [pc, #256]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349c:	2301      	movs	r3, #1
 800349e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ac:	f7fd fa32 	bl	8000914 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b2:	e009      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd fa2e 	bl	8000914 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	74fb      	strb	r3, [r7, #19]
        break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ef      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d15c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01f      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d019      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003502:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	4a20      	ldr	r2, [pc, #128]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd f9ed 	bl	8000914 <HAL_GetTick>
 800353a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353c:	e00b      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd f9e9 	bl	8000914 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d902      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	74fb      	strb	r3, [r7, #19]
            break;
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ec      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357a:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003582:	e009      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003598:	7c7b      	ldrb	r3, [r7, #17]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b9e      	ldr	r3, [pc, #632]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4a9d      	ldr	r2, [pc, #628]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b6:	4b98      	ldr	r3, [pc, #608]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 0203 	bic.w	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	4994      	ldr	r1, [pc, #592]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d8:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 020c 	bic.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	498c      	ldr	r1, [pc, #560]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035fa:	4b87      	ldr	r3, [pc, #540]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	4983      	ldr	r1, [pc, #524]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800361c:	4b7e      	ldr	r3, [pc, #504]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	497b      	ldr	r1, [pc, #492]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800363e:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	4972      	ldr	r1, [pc, #456]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003660:	4b6d      	ldr	r3, [pc, #436]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	496a      	ldr	r1, [pc, #424]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	4961      	ldr	r1, [pc, #388]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a4:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	4959      	ldr	r1, [pc, #356]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c6:	4b54      	ldr	r3, [pc, #336]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	4950      	ldr	r1, [pc, #320]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e8:	4b4b      	ldr	r3, [pc, #300]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	4948      	ldr	r1, [pc, #288]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	493f      	ldr	r1, [pc, #252]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d028      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372c:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	4937      	ldr	r1, [pc, #220]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374a:	d106      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a31      	ldr	r2, [pc, #196]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	e011      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003762:	d10c      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fe36 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d028      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	491f      	ldr	r1, [pc, #124]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a8:	d106      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b4:	60d3      	str	r3, [r2, #12]
 80037b6:	e011      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe07 	bl	80043dc <RCCEx_PLLSAI1_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02b      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003806:	d109      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a02      	ldr	r2, [pc, #8]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003812:	60d3      	str	r3, [r2, #12]
 8003814:	e014      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003824:	d10c      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fdd5 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02f      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800384c:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385a:	4928      	ldr	r1, [pc, #160]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800386a:	d10d      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fdb2 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d014      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	74bb      	strb	r3, [r7, #18]
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003890:	d10c      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3320      	adds	r3, #32
 8003896:	2102      	movs	r1, #2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fe93 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c6:	490d      	ldr	r1, [pc, #52]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ea:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000

08003900 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003912:	d13e      	bne.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003914:	4bb2      	ldr	r3, [pc, #712]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003926:	d028      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392e:	f200 8542 	bhi.w	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003938:	d005      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d00e      	beq.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003942:	f000 bd38 	b.w	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003946:	4ba6      	ldr	r3, [pc, #664]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	f040 8532 	bne.w	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	61fb      	str	r3, [r7, #28]
      break;
 800395c:	f000 bd2d 	b.w	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003960:	4b9f      	ldr	r3, [pc, #636]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	f040 8527 	bne.w	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003970:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003974:	61fb      	str	r3, [r7, #28]
      break;
 8003976:	f000 bd22 	b.w	80043be <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800397a:	4b99      	ldr	r3, [pc, #612]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003986:	f040 851c 	bne.w	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800398a:	4b96      	ldr	r3, [pc, #600]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800398c:	61fb      	str	r3, [r7, #28]
      break;
 800398e:	f000 bd18 	b.w	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003992:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d036      	beq.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d840      	bhi.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d020      	beq.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80039b4:	e039      	b.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80039b6:	4b8a      	ldr	r3, [pc, #552]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d116      	bne.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80039c2:	4b87      	ldr	r3, [pc, #540]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80039ce:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	e005      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039da:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039ee:	e01f      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
      break;
 80039f4:	e01c      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039f6:	4b7a      	ldr	r3, [pc, #488]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d102      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003a04:	4b79      	ldr	r3, [pc, #484]	; (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003a06:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a08:	e012      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
      break;
 8003a0e:	e00f      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a1c:	d102      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003a1e:	4b74      	ldr	r3, [pc, #464]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
      break;
 8003a2e:	bf00      	nop
    }

    switch(PeriphClk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a36:	f000 80dd 	beq.w	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a40:	f200 84c1 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a4a:	f000 80d3 	beq.w	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a54:	f200 84b7 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5e:	f000 835f 	beq.w	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	f200 84ad 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	f000 847e 	beq.w	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	f200 84a3 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a86:	f000 82cd 	beq.w	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a90:	f200 8499 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f000 80ab 	beq.w	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa4:	f200 848f 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	f000 8090 	beq.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	f200 8485 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac2:	d07f      	beq.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aca:	f200 847c 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	f000 8403 	beq.w	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	f200 8472 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	f000 83af 	beq.w	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af2:	f200 8468 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afc:	f000 8379 	beq.w	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	f200 845e 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	f000 8344 	beq.w	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	f200 8456 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d84b      	bhi.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 844f 	beq.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b1f      	cmp	r3, #31
 8003b2e:	f200 844a 	bhi.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003d21 	.word	0x08003d21
 8003b3c:	08003d8f 	.word	0x08003d8f
 8003b40:	080043c7 	.word	0x080043c7
 8003b44:	08003e23 	.word	0x08003e23
 8003b48:	080043c7 	.word	0x080043c7
 8003b4c:	080043c7 	.word	0x080043c7
 8003b50:	080043c7 	.word	0x080043c7
 8003b54:	08003ea9 	.word	0x08003ea9
 8003b58:	080043c7 	.word	0x080043c7
 8003b5c:	080043c7 	.word	0x080043c7
 8003b60:	080043c7 	.word	0x080043c7
 8003b64:	080043c7 	.word	0x080043c7
 8003b68:	080043c7 	.word	0x080043c7
 8003b6c:	080043c7 	.word	0x080043c7
 8003b70:	080043c7 	.word	0x080043c7
 8003b74:	08003f21 	.word	0x08003f21
 8003b78:	080043c7 	.word	0x080043c7
 8003b7c:	080043c7 	.word	0x080043c7
 8003b80:	080043c7 	.word	0x080043c7
 8003b84:	080043c7 	.word	0x080043c7
 8003b88:	080043c7 	.word	0x080043c7
 8003b8c:	080043c7 	.word	0x080043c7
 8003b90:	080043c7 	.word	0x080043c7
 8003b94:	080043c7 	.word	0x080043c7
 8003b98:	080043c7 	.word	0x080043c7
 8003b9c:	080043c7 	.word	0x080043c7
 8003ba0:	080043c7 	.word	0x080043c7
 8003ba4:	080043c7 	.word	0x080043c7
 8003ba8:	080043c7 	.word	0x080043c7
 8003bac:	080043c7 	.word	0x080043c7
 8003bb0:	080043c7 	.word	0x080043c7
 8003bb4:	08003fa3 	.word	0x08003fa3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	f000 82c1 	beq.w	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003bc0:	f000 bc01 	b.w	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bca:	f000 fdd9 	bl	8004780 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bce:	61f8      	str	r0, [r7, #28]
      break;
 8003bd0:	e3fa      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bd8:	f000 fdd2 	bl	8004780 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bdc:	61f8      	str	r0, [r7, #28]
      break;
 8003bde:	e3f3      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	0003d090 	.word	0x0003d090
 8003be8:	0800f084 	.word	0x0800f084
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bf4:	4ba9      	ldr	r3, [pc, #676]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c06:	d00c      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c0e:	d87f      	bhi.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c16:	d04e      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1e:	d01d      	beq.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003c20:	e076      	b.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c22:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d172      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c2e:	4b9b      	ldr	r3, [pc, #620]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003c3a:	4b98      	ldr	r3, [pc, #608]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003c46:	4b95      	ldr	r3, [pc, #596]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a93      	ldr	r2, [pc, #588]	; (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	61fb      	str	r3, [r7, #28]
          break;
 8003c5a:	e05b      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c68:	d156      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c6a:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c76:	d14f      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c82:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	fb03 f202 	mul.w	r2, r3, r2
 8003c8c:	4b83      	ldr	r3, [pc, #524]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	3301      	adds	r3, #1
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c9e:	4b7f      	ldr	r3, [pc, #508]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	0d5b      	lsrs	r3, r3, #21
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
          break;
 8003cb4:	e030      	b.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003cb6:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d12b      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003cc4:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd0:	d124      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	fb03 f202 	mul.w	r2, r3, r2
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	0d5b      	lsrs	r3, r3, #21
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
          break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003d10:	bf00      	nop
 8003d12:	e359      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d14:	bf00      	nop
 8003d16:	e357      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d18:	bf00      	nop
 8003d1a:	e355      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d1c:	bf00      	nop
        break;
 8003d1e:	e353      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d20:	4b5e      	ldr	r3, [pc, #376]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d827      	bhi.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d6d 	.word	0x08003d6d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff fa7a 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61f8      	str	r0, [r7, #28]
          break;
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d50:	f7ff f9c8 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003d54:	61f8      	str	r0, [r7, #28]
          break;
 8003d56:	e019      	b.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d10f      	bne.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003d66:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003d68:	61fb      	str	r3, [r7, #28]
          break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7e:	61fb      	str	r3, [r7, #28]
          break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003d82:	bf00      	nop
 8003d84:	e320      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d86:	bf00      	nop
 8003d88:	e31e      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d8a:	bf00      	nop
        break;
 8003d8c:	e31c      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d83a      	bhi.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003e17 	.word	0x08003e17
 8003db0:	08003e17 	.word	0x08003e17
 8003db4:	08003e17 	.word	0x08003e17
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003e17 	.word	0x08003e17
 8003dc0:	08003e17 	.word	0x08003e17
 8003dc4:	08003e17 	.word	0x08003e17
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e17 	.word	0x08003e17
 8003dd0:	08003e17 	.word	0x08003e17
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003e01 	.word	0x08003e01
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7ff fa1a 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61f8      	str	r0, [r7, #28]
          break;
 8003de2:	e01d      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003de4:	f7ff f97e 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003de8:	61f8      	str	r0, [r7, #28]
          break;
 8003dea:	e019      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d10f      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003dfc:	61fb      	str	r3, [r7, #28]
          break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	61fb      	str	r3, [r7, #28]
          break;
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003e16:	bf00      	nop
 8003e18:	e2d6      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e1a:	bf00      	nop
 8003e1c:	e2d4      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e1e:	bf00      	nop
        break;
 8003e20:	e2d2      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d021      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d829      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d011      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d823      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d004      	beq.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003e52:	e01c      	b.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff f9de 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003e58:	61f8      	str	r0, [r7, #28]
          break;
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e5c:	f7ff f942 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003e60:	61f8      	str	r0, [r7, #28]
          break;
 8003e62:	e019      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d10f      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003e74:	61fb      	str	r3, [r7, #28]
          break;
 8003e76:	e00c      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	61fb      	str	r3, [r7, #28]
          break;
 8003e8c:	e003      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003e8e:	bf00      	nop
 8003e90:	e29a      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e92:	bf00      	nop
 8003e94:	e298      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e96:	bf00      	nop
        break;
 8003e98:	e296      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	0800f084 	.word	0x0800f084
 8003ea4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ea8:	4b9b      	ldr	r3, [pc, #620]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb8:	d021      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2bc0      	cmp	r3, #192	; 0xc0
 8003ebe:	d829      	bhi.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d011      	beq.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d823      	bhi.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d004      	beq.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003ed8:	e01c      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eda:	f7ff f99b 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003ede:	61f8      	str	r0, [r7, #28]
          break;
 8003ee0:	e01d      	b.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7ff f8ff 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003ee6:	61f8      	str	r0, [r7, #28]
          break;
 8003ee8:	e019      	b.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef6:	d10f      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003ef8:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003efa:	61fb      	str	r3, [r7, #28]
          break;
 8003efc:	e00c      	b.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003efe:	4b86      	ldr	r3, [pc, #536]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f10:	61fb      	str	r3, [r7, #28]
          break;
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003f14:	bf00      	nop
 8003f16:	e257      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f18:	bf00      	nop
 8003f1a:	e255      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f1c:	bf00      	nop
        break;
 8003f1e:	e253      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f20:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d025      	beq.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3a:	d82c      	bhi.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d013      	beq.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4a:	d824      	bhi.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d004      	beq.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003f5a:	e01c      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff f95a 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61f8      	str	r0, [r7, #28]
          break;
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f64:	f7ff f8be 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003f68:	61f8      	str	r0, [r7, #28]
          break;
 8003f6a:	e019      	b.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d10f      	bne.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003f7a:	4b68      	ldr	r3, [pc, #416]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003f7c:	61fb      	str	r3, [r7, #28]
          break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f80:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61fb      	str	r3, [r7, #28]
          break;
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003f96:	bf00      	nop
 8003f98:	e216      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f9a:	bf00      	nop
 8003f9c:	e214      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f9e:	bf00      	nop
        break;
 8003fa0:	e212      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d025      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fbc:	d82c      	bhi.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d013      	beq.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d824      	bhi.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d004      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003fdc:	e01c      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fde:	f7ff f919 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8003fe2:	61f8      	str	r0, [r7, #28]
          break;
 8003fe4:	e01d      	b.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7ff f87d 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003fea:	61f8      	str	r0, [r7, #28]
          break;
 8003fec:	e019      	b.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d10f      	bne.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003ffc:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ffe:	61fb      	str	r3, [r7, #28]
          break;
 8004000:	e00c      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004002:	4b45      	ldr	r3, [pc, #276]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b02      	cmp	r3, #2
 800400e:	d107      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004014:	61fb      	str	r3, [r7, #28]
          break;
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004018:	bf00      	nop
 800401a:	e1d5      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800401c:	bf00      	nop
 800401e:	e1d3      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004020:	bf00      	nop
        break;
 8004022:	e1d1      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004024:	4b3c      	ldr	r3, [pc, #240]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004036:	d00c      	beq.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403e:	d864      	bhi.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d030      	beq.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004050:	e05b      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004052:	f7ff f847 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8004056:	61f8      	str	r0, [r7, #28]
          break;
 8004058:	e05c      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004066:	d152      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04c      	beq.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	fb03 f202 	mul.w	r2, r3, r2
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	3301      	adds	r3, #1
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800409a:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	0e5b      	lsrs	r3, r3, #25
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	3301      	adds	r3, #1
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	61fb      	str	r3, [r7, #28]
          break;
 80040b0:	e02d      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80040b2:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040be:	d128      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80040c0:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	3301      	adds	r3, #1
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	0e5b      	lsrs	r3, r3, #25
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	3301      	adds	r3, #1
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	61fb      	str	r3, [r7, #28]
          break;
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800410a:	bf00      	nop
 800410c:	e15c      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800410e:	bf00      	nop
 8004110:	e15a      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004112:	bf00      	nop
        break;
 8004114:	e158      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004120:	4b9d      	ldr	r3, [pc, #628]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800412a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004132:	f7ff f885 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004136:	61f8      	str	r0, [r7, #28]
        break;
 8004138:	e146      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800413a:	f7fe ffd3 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800413e:	61f8      	str	r0, [r7, #28]
        break;
 8004140:	e142      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004142:	4b95      	ldr	r3, [pc, #596]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004154:	d013      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415c:	d819      	bhi.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d004      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800416c:	e011      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800416e:	f7ff f851 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8004172:	61f8      	str	r0, [r7, #28]
          break;
 8004174:	e010      	b.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004176:	f7fe ffb5 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800417a:	61f8      	str	r0, [r7, #28]
          break;
 800417c:	e00c      	b.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800417e:	4b86      	ldr	r3, [pc, #536]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d104      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800418c:	4b83      	ldr	r3, [pc, #524]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800418e:	61fb      	str	r3, [r7, #28]
          break;
 8004190:	e001      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004192:	bf00      	nop
 8004194:	e118      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004196:	bf00      	nop
        break;
 8004198:	e116      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800419a:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	d013      	beq.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d819      	bhi.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80041c4:	e011      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c6:	f7ff f825 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 80041ca:	61f8      	str	r0, [r7, #28]
          break;
 80041cc:	e010      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80041ce:	f7fe ff89 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80041d2:	61f8      	str	r0, [r7, #28]
          break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041d6:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d104      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80041e4:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80041e6:	61fb      	str	r3, [r7, #28]
          break;
 80041e8:	e001      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80041ea:	bf00      	nop
 80041ec:	e0ec      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041ee:	bf00      	nop
        break;
 80041f0:	e0ea      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041f2:	4b69      	ldr	r3, [pc, #420]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004204:	d013      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420c:	d819      	bhi.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800421c:	e011      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800421e:	f7fe fff9 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8004222:	61f8      	str	r0, [r7, #28]
          break;
 8004224:	e010      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe ff5d 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
          break;
 800422c:	e00c      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800422e:	4b5a      	ldr	r3, [pc, #360]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d104      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800423c:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800423e:	61fb      	str	r3, [r7, #28]
          break;
 8004240:	e001      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004242:	bf00      	nop
 8004244:	e0c0      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004246:	bf00      	nop
        break;
 8004248:	e0be      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800424a:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800425c:	d02c      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004264:	d833      	bhi.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800426c:	d01a      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004274:	d82b      	bhi.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004282:	d004      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004284:	e023      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe ffc5 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 800428a:	61f8      	str	r0, [r7, #28]
          break;
 800428c:	e026      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800428e:	4b42      	ldr	r3, [pc, #264]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d11a      	bne.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800429c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80042a0:	61fb      	str	r3, [r7, #28]
          break;
 80042a2:	e016      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042a4:	4b3c      	ldr	r3, [pc, #240]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b0:	d111      	bne.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80042b2:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80042b4:	61fb      	str	r3, [r7, #28]
          break;
 80042b6:	e00e      	b.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042b8:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d109      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	61fb      	str	r3, [r7, #28]
          break;
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80042ce:	bf00      	nop
 80042d0:	e07a      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042d2:	bf00      	nop
 80042d4:	e078      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042d6:	bf00      	nop
 80042d8:	e076      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042da:	bf00      	nop
        break;
 80042dc:	e074      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042f0:	d02c      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042f8:	d833      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004300:	d01a      	beq.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004308:	d82b      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004316:	d004      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004318:	e023      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800431a:	f7fe ff7b 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 800431e:	61f8      	str	r0, [r7, #28]
          break;
 8004320:	e026      	b.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d11a      	bne.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004330:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004334:	61fb      	str	r3, [r7, #28]
          break;
 8004336:	e016      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004344:	d111      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004348:	61fb      	str	r3, [r7, #28]
          break;
 800434a:	e00e      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800434c:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d109      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	61fb      	str	r3, [r7, #28]
          break;
 8004360:	e005      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004362:	bf00      	nop
 8004364:	e030      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004366:	bf00      	nop
 8004368:	e02e      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800436a:	bf00      	nop
 800436c:	e02c      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800436e:	bf00      	nop
        break;
 8004370:	e02a      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d009      	beq.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800438c:	e012      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fe ff41 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 8004392:	61f8      	str	r0, [r7, #28]
          break;
 8004394:	e00e      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80043b0:	61fb      	str	r3, [r7, #28]
          break;
 80043b2:	bf00      	nop
        break;
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043b6:	bf00      	nop
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043ba:	bf00      	nop
 80043bc:	e004      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043c6:	bf00      	nop
    }
  }

  return(frequency);
 80043c8:	69fb      	ldr	r3, [r7, #28]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	00f42400 	.word	0x00f42400

080043dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ea:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d10d      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
       ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800440e:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
       ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d047      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e044      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d018      	beq.n	8004462 <RCCEx_PLLSAI1_Config+0x86>
 8004430:	2b03      	cmp	r3, #3
 8004432:	d825      	bhi.n	8004480 <RCCEx_PLLSAI1_Config+0xa4>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x62>
 8004438:	2b02      	cmp	r3, #2
 800443a:	d009      	beq.n	8004450 <RCCEx_PLLSAI1_Config+0x74>
 800443c:	e020      	b.n	8004480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443e:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11d      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e01a      	b.n	8004486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004450:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e013      	b.n	800448a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004462:	4b57      	ldr	r3, [pc, #348]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447e:	e006      	b.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e004      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800448e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	430b      	orrs	r3, r1
 80044ac:	4944      	ldr	r1, [pc, #272]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d17d      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044b8:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fc fa26 	bl	8000914 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ca:	e009      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044cc:	f7fc fa22 	bl	8000914 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
        break;
 80044de:	e005      	b.n	80044ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e0:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ef      	bne.n	80044cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d160      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d111      	bne.n	800451c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	0211      	lsls	r1, r2, #8
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	0912      	lsrs	r2, r2, #4
 8004510:	0452      	lsls	r2, r2, #17
 8004512:	430a      	orrs	r2, r1
 8004514:	492a      	ldr	r1, [pc, #168]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
 800451a:	e027      	b.n	800456c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d112      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800452a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	0211      	lsls	r1, r2, #8
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6912      	ldr	r2, [r2, #16]
 8004538:	0852      	lsrs	r2, r2, #1
 800453a:	3a01      	subs	r2, #1
 800453c:	0552      	lsls	r2, r2, #21
 800453e:	430a      	orrs	r2, r1
 8004540:	491f      	ldr	r1, [pc, #124]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
 8004546:	e011      	b.n	800456c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6952      	ldr	r2, [r2, #20]
 800455e:	0852      	lsrs	r2, r2, #1
 8004560:	3a01      	subs	r2, #1
 8004562:	0652      	lsls	r2, r2, #25
 8004564:	430a      	orrs	r2, r1
 8004566:	4916      	ldr	r1, [pc, #88]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fc f9cc 	bl	8000914 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800457e:	e009      	b.n	8004594 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004580:	f7fc f9c8 	bl	8000914 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d902      	bls.n	8004594 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	73fb      	strb	r3, [r7, #15]
          break;
 8004592:	e005      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ef      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4904      	ldr	r1, [pc, #16]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000

080045c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045d2:	4b6a      	ldr	r3, [pc, #424]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0203 	and.w	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d10d      	bne.n	800460a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
       ||
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
       ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d047      	beq.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	e044      	b.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d018      	beq.n	800464a <RCCEx_PLLSAI2_Config+0x86>
 8004618:	2b03      	cmp	r3, #3
 800461a:	d825      	bhi.n	8004668 <RCCEx_PLLSAI2_Config+0xa4>
 800461c:	2b01      	cmp	r3, #1
 800461e:	d002      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x62>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d009      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x74>
 8004624:	e020      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004626:	4b55      	ldr	r3, [pc, #340]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11d      	bne.n	800466e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004636:	e01a      	b.n	800466e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004648:	e013      	b.n	8004672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800464a:	4b4c      	ldr	r3, [pc, #304]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004666:	e006      	b.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e004      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004676:	bf00      	nop
    }

    if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	430b      	orrs	r3, r1
 8004694:	4939      	ldr	r1, [pc, #228]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d167      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046a0:	4b36      	ldr	r3, [pc, #216]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a35      	ldr	r2, [pc, #212]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fc f932 	bl	8000914 <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b2:	e009      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b4:	f7fc f92e 	bl	8000914 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	73fb      	strb	r3, [r7, #15]
        break;
 80046c6:	e005      	b.n	80046d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ef      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d14a      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d111      	bne.n	8004704 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046e0:	4b26      	ldr	r3, [pc, #152]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	0211      	lsls	r1, r2, #8
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	0912      	lsrs	r2, r2, #4
 80046f8:	0452      	lsls	r2, r2, #17
 80046fa:	430a      	orrs	r2, r1
 80046fc:	491f      	ldr	r1, [pc, #124]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	614b      	str	r3, [r1, #20]
 8004702:	e011      	b.n	8004728 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800470c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6892      	ldr	r2, [r2, #8]
 8004714:	0211      	lsls	r1, r2, #8
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6912      	ldr	r2, [r2, #16]
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	430a      	orrs	r2, r1
 8004722:	4916      	ldr	r1, [pc, #88]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc f8ee 	bl	8000914 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800473a:	e009      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800473c:	f7fc f8ea 	bl	8000914 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
          break;
 800474e:	e005      	b.n	800475c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	4904      	ldr	r1, [pc, #16]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d10c      	bne.n	80047b8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800479e:	4b6e      	ldr	r3, [pc, #440]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047b0:	d112      	bne.n	80047d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047b2:	4b6a      	ldr	r3, [pc, #424]	; (800495c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e00f      	b.n	80047d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d10b      	bne.n	80047d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80047c0:	4b65      	ldr	r3, [pc, #404]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80047ca:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047d2:	d101      	bne.n	80047d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80047d6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 80b4 	bne.w	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ea:	d003      	beq.n	80047f4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f2:	d135      	bne.n	8004860 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80047f4:	4b58      	ldr	r3, [pc, #352]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004800:	f040 80a1 	bne.w	8004946 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004804:	4b54      	ldr	r3, [pc, #336]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 809a 	beq.w	8004946 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	3301      	adds	r3, #1
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004826:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004830:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004838:	4b47      	ldr	r3, [pc, #284]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004844:	2311      	movs	r3, #17
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e001      	b.n	800484e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800484a:	2307      	movs	r3, #7
 800484c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	fb03 f202 	mul.w	r2, r3, r2
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800485e:	e072      	b.n	8004946 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d133      	bne.n	80048ce <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004866:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004872:	d169      	bne.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004874:	4b38      	ldr	r3, [pc, #224]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d063      	beq.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004880:	4b35      	ldr	r3, [pc, #212]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	3301      	adds	r3, #1
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004894:	4b30      	ldr	r3, [pc, #192]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	0a1b      	lsrs	r3, r3, #8
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80048b2:	2311      	movs	r3, #17
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e001      	b.n	80048bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80048b8:	2307      	movs	r3, #7
 80048ba:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	fb03 f202 	mul.w	r2, r3, r2
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e03c      	b.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d003      	beq.n	80048de <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048dc:	d134      	bne.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ea:	d12d      	bne.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d027      	beq.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	3301      	adds	r3, #1
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004916:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800492a:	2311      	movs	r3, #17
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e001      	b.n	8004934 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004930:	2307      	movs	r3, #7
 8004932:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	fb03 f202 	mul.w	r2, r3, r2
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e000      	b.n	8004948 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004946:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004948:	69fb      	ldr	r3, [r7, #28]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3724      	adds	r7, #36	; 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	001fff68 	.word	0x001fff68

08004960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fb fdfd 	bl	8000584 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f814 	bl	80049c0 <HAL_SD_InitCard>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e00a      	b.n	80049b8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80049dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049e0:	f7fe ff8e 	bl	8003900 <HAL_RCCEx_GetPeriphCLKFreq>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e07b      	b.n	8004af8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <HAL_SD_InitCard+0x140>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	3b02      	subs	r3, #2
 8004a0e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681d      	ldr	r5, [r3, #0]
 8004a14:	466c      	mov	r4, sp
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f001 f9db 	bl	8005de4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a3c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fa19 	bl	8005e7a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a56:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <HAL_SD_InitCard+0x144>)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fb ff5c 	bl	800092c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 f859 	bl	8005b2c <SD_PowerON>
 8004a7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02e      	b.n	8004af8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 ff78 	bl	8005990 <SD_InitCard>
 8004aa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e01b      	b.n	8004af8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fa69 	bl	8005fa0 <SDMMC_CmdBlockLength>
 8004ace:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00f      	beq.n	8004af6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <HAL_SD_InitCard+0x148>)
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bdb0      	pop	{r4, r5, r7, pc}
 8004b00:	014f8b59 	.word	0x014f8b59
 8004b04:	00012110 	.word	0x00012110
 8004b08:	004005ff 	.word	0x004005ff

08004b0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b092      	sub	sp, #72	; 0x48
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b1a:	f7fb fefb 	bl	8000914 <HAL_GetTick>
 8004b1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1bd      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	f040 81b0 	bne.w	8004eac <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d907      	bls.n	8004b70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e1a4      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2203      	movs	r2, #3
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d002      	beq.n	8004b8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	025b      	lsls	r3, r3, #9
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004b9a:	2390      	movs	r3, #144	; 0x90
 8004b9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f107 0214 	add.w	r2, r7, #20
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 f9c7 	bl	8005f48 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d90a      	bls.n	8004bd6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 fa2b 	bl	8006028 <SDMMC_CmdReadMultiBlock>
 8004bd2:	6478      	str	r0, [r7, #68]	; 0x44
 8004bd4:	e009      	b.n	8004bea <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f9fe 	bl	8005fe4 <SDMMC_CmdReadSingleBlock>
 8004be8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a7a      	ldr	r2, [pc, #488]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e151      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004c1a:	e061      	b.n	8004ce0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d03c      	beq.n	8004ca4 <HAL_SD_ReadBlocks+0x198>
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d039      	beq.n	8004ca4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
 8004c34:	e033      	b.n	8004c9e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f8ff 	bl	8005e3e <SDMMC_ReadFIFO>
 8004c40:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c52:	3b01      	subs	r3, #1
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	3301      	adds	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	3301      	adds	r3, #1
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8e:	3301      	adds	r3, #1
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c94:	3b01      	subs	r3, #1
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	d9c8      	bls.n	8004c36 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004ca4:	f7fb fe36 	bl	8000914 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d902      	bls.n	8004cba <HAL_SD_ReadBlocks+0x1ae>
 8004cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d112      	bne.n	8004ce0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a48      	ldr	r2, [pc, #288]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0ec      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d096      	beq.n	8004c1c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_SD_ReadBlocks+0x236>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d91f      	bls.n	8004d42 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d01b      	beq.n	8004d42 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f9f0 	bl	80060f4 <SDMMC_CmdStopTransfer>
 8004d14:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0bb      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f043 0208 	orr.w	r2, r3, #8
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0a1      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d012      	beq.n	8004daa <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e087      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d064      	beq.n	8004e82 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <HAL_SD_ReadBlocks+0x2d4>)
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06d      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
 8004dde:	bf00      	nop
 8004de0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 f828 	bl	8005e3e <SDMMC_ReadFIFO>
 8004dee:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e00:	3b01      	subs	r3, #1
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	3301      	adds	r3, #1
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e16:	3b01      	subs	r3, #1
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	3301      	adds	r3, #1
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	0e1b      	lsrs	r3, r3, #24
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	3b01      	subs	r3, #1
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e46:	f7fb fd65 	bl	8000914 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d902      	bls.n	8004e5c <HAL_SD_ReadBlocks+0x350>
 8004e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d112      	bne.n	8004e82 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <HAL_SD_ReadBlocks+0x3b8>)
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e01b      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SD_ReadBlocks+0x38a>
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1a6      	bne.n	8004de4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e006      	b.n	8004eba <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3748      	adds	r7, #72	; 0x48
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	004005ff 	.word	0x004005ff

08004ec8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b092      	sub	sp, #72	; 0x48
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ed6:	f7fb fd1d 	bl	8000914 <HAL_GetTick>
 8004eda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e165      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	f040 8158 	bne.w	80051b8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	441a      	add	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d907      	bls.n	8004f2c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e14c      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d002      	beq.n	8004f4a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	025b      	lsls	r3, r3, #9
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	025b      	lsls	r3, r3, #9
 8004f54:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f56:	2390      	movs	r3, #144	; 0x90
 8004f58:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f107 0218 	add.w	r2, r7, #24
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 ffe9 	bl	8005f48 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d90a      	bls.n	8004f92 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 f891 	bl	80060b0 <SDMMC_CmdWriteMultiBlock>
 8004f8e:	6478      	str	r0, [r7, #68]	; 0x44
 8004f90:	e009      	b.n	8004fa6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2210      	movs	r2, #16
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 f864 	bl	800606c <SDMMC_CmdWriteSingleBlock>
 8004fa4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a87      	ldr	r2, [pc, #540]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0f9      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004fd6:	e065      	b.n	80050a4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d040      	beq.n	8005068 <HAL_SD_WriteBlocks+0x1a0>
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d03d      	beq.n	8005068 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff0:	e037      	b.n	8005062 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005000:	3b01      	subs	r3, #1
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	021a      	lsls	r2, r3, #8
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	3301      	adds	r3, #1
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	3b01      	subs	r3, #1
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	041a      	lsls	r2, r3, #16
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502a:	3301      	adds	r3, #1
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	3b01      	subs	r3, #1
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	061a      	lsls	r2, r3, #24
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	3301      	adds	r3, #1
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	3b01      	subs	r3, #1
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f107 0214 	add.w	r2, r7, #20
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fefe 	bl	8005e58 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800505c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505e:	3301      	adds	r3, #1
 8005060:	643b      	str	r3, [r7, #64]	; 0x40
 8005062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005064:	2b07      	cmp	r3, #7
 8005066:	d9c4      	bls.n	8004ff2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005068:	f7fb fc54 	bl	8000914 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <HAL_SD_WriteBlocks+0x1b6>
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d112      	bne.n	80050a4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a53      	ldr	r2, [pc, #332]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e090      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050aa:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d092      	beq.n	8004fd8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d022      	beq.n	8005106 <HAL_SD_WriteBlocks+0x23e>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d91f      	bls.n	8005106 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d01b      	beq.n	8005106 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 f80e 	bl	80060f4 <SDMMC_CmdStopTransfer>
 80050d8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80050da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e05f      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	f043 0208 	orr.w	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e045      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f043 0202 	orr.w	r2, r3, #2
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e02b      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <HAL_SD_WriteBlocks+0x308>)
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	f043 0210 	orr.w	r2, r3, #16
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e011      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e006      	b.n	80051c6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3748      	adds	r7, #72	; 0x48
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	004005ff 	.word	0x004005ff

080051d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_SD_IRQHandler+0x2e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd4c 	bl	8005c98 <SD_Read_IT>
 8005200:	e155      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 808f 	beq.w	8005330 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800522a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800522e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d039      	beq.n	80052be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d104      	bne.n	800525e <HAL_SD_IRQHandler+0x8a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 ff46 	bl	80060f4 <SDMMC_CmdStopTransfer>
 8005268:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f91f 	bl	80054c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f240 523a 	movw	r2, #1338	; 0x53a
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <HAL_SD_IRQHandler+0xda>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 fdce 	bl	8007e50 <HAL_SD_RxCpltCallback>
 80052b4:	e0fb      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f002 fdc0 	bl	8007e3c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80052bc:	e0f7      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80f2 	beq.w	80054ae <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d011      	beq.n	80052f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 ff0b 	bl	80060f4 <SDMMC_CmdStopTransfer>
 80052de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8e4 	bl	80054c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 80d5 	bne.w	80054ae <HAL_SD_IRQHandler+0x2da>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 80cf 	bne.w	80054ae <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0208 	bic.w	r2, r2, #8
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f002 fd87 	bl	8007e3c <HAL_SD_TxCpltCallback>
}
 800532e:	e0be      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_SD_IRQHandler+0x17c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fcf6 	bl	8005d3a <SD_Write_IT>
 800534e:	e0ae      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80a7 	beq.w	80054ae <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	f043 0202 	orr.w	r2, r3, #2
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f043 0208 	orr.w	r2, r3, #8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	f043 0210 	orr.w	r2, r3, #16
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80053e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fe84 	bl	80060f4 <SDMMC_CmdStopTransfer>
 80053ec:	4602      	mov	r2, r0
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f855 	bl	80054c0 <HAL_SD_ErrorCallback>
}
 8005416:	e04a      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541e:	2b00      	cmp	r3, #0
 8005420:	d045      	beq.n	80054ae <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_SD_IRQHandler+0x262>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d011      	beq.n	800545a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <HAL_SD_IRQHandler+0x2e4>)
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	4618      	mov	r0, r3
 8005444:	f7fb fc60 	bl	8000d08 <HAL_DMA_Abort_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02f      	beq.n	80054ae <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fa2e 	bl	80058b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005458:	e029      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_SD_IRQHandler+0x29a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <HAL_SD_IRQHandler+0x2e8>)
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb fc44 	bl	8000d08 <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa49 	bl	8005922 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005490:	e00d      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f002 fcbe 	bl	8007e28 <HAL_SD_AbortCallback>
}
 80054ac:	e7ff      	b.n	80054ae <HAL_SD_IRQHandler+0x2da>
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	080058b5 	.word	0x080058b5
 80054bc:	08005923 	.word	0x08005923

080054c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e2:	0f9b      	lsrs	r3, r3, #30
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ee:	0e9b      	lsrs	r3, r3, #26
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005500:	0e1b      	lsrs	r3, r3, #24
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	b2da      	uxtb	r2, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	b2da      	uxtb	r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	b2da      	uxtb	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552a:	b2da      	uxtb	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005534:	0d1b      	lsrs	r3, r3, #20
 8005536:	b29a      	uxth	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	b2da      	uxtb	r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005552:	0bdb      	lsrs	r3, r3, #15
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005564:	0b9b      	lsrs	r3, r3, #14
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005588:	0b1b      	lsrs	r3, r3, #12
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d163      	bne.n	800566c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a8:	009a      	lsls	r2, r3, #2
 80055aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80055b4:	0f92      	lsrs	r2, r2, #30
 80055b6:	431a      	orrs	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c0:	0edb      	lsrs	r3, r3, #27
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e4:	0d5b      	lsrs	r3, r3, #21
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f6:	0c9b      	lsrs	r3, r3, #18
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005608:	0bdb      	lsrs	r3, r3, #15
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	b2da      	uxtb	r2, r3
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	7e1b      	ldrb	r3, [r3, #24]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	3302      	adds	r3, #2
 800562c:	2201      	movs	r2, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005636:	fb03 f202 	mul.w	r2, r3, r2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	7a1b      	ldrb	r3, [r3, #8]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	2201      	movs	r2, #1
 800564a:	409a      	lsls	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005658:	0a52      	lsrs	r2, r2, #9
 800565a:	fb03 f202 	mul.w	r2, r3, r2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
 800566a:	e031      	b.n	80056d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	2b01      	cmp	r3, #1
 8005672:	d11d      	bne.n	80056b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	041b      	lsls	r3, r3, #16
 800567a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	3301      	adds	r3, #1
 8005690:	029a      	lsls	r2, r3, #10
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60
 80056ae:	e00f      	b.n	80056d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a58      	ldr	r2, [pc, #352]	; (8005818 <HAL_SD_GetCardCSD+0x344>)
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e09d      	b.n	800580c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d4:	0b9b      	lsrs	r3, r3, #14
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	0fdb      	lsrs	r3, r3, #31
 800570a:	b2da      	uxtb	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	0f5b      	lsrs	r3, r3, #29
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	b2da      	uxtb	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	0e9b      	lsrs	r3, r3, #26
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	b2da      	uxtb	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	0d9b      	lsrs	r3, r3, #22
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	b2da      	uxtb	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	0d5b      	lsrs	r3, r3, #21
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	0bdb      	lsrs	r3, r3, #15
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	0b9b      	lsrs	r3, r3, #14
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	0b5b      	lsrs	r3, r3, #13
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	0b1b      	lsrs	r3, r3, #12
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	004005ff 	.word	0x004005ff

0800581c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9de 	bl	8005c48 <SD_SendStatus>
 800588c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	0a5b      	lsrs	r3, r3, #9
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80058aa:	693b      	ldr	r3, [r7, #16]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ffd1 	bl	8005874 <HAL_SD_GetCardState>
 80058d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d002      	beq.n	80058ee <SD_DMATxAbort+0x3a>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d10a      	bne.n	8005904 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fbfe 	bl	80060f4 <SDMMC_CmdStopTransfer>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f002 fa8b 	bl	8007e28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005912:	e002      	b.n	800591a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fdd3 	bl	80054c0 <HAL_SD_ErrorCallback>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f240 523a 	movw	r2, #1338	; 0x53a
 8005938:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ff9a 	bl	8005874 <HAL_SD_GetCardState>
 8005940:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d002      	beq.n	800595c <SD_DMARxAbort+0x3a>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b05      	cmp	r3, #5
 800595a:	d10a      	bne.n	8005972 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fbc7 	bl	80060f4 <SDMMC_CmdStopTransfer>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f002 fa54 	bl	8007e28 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005980:	e002      	b.n	8005988 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff fd9c 	bl	80054c0 <HAL_SD_ErrorCallback>
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b094      	sub	sp, #80	; 0x50
 8005994:	af04      	add	r7, sp, #16
 8005996:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005998:	2301      	movs	r3, #1
 800599a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fa79 	bl	8005e98 <SDMMC_GetPowerState>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059b0:	e0b8      	b.n	8005b24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d02f      	beq.n	8005a1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fc5f 	bl	8006282 <SDMMC_CmdSendCID>
 80059c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	e0a9      	b.n	8005b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 faa3 	bl	8005f22 <SDMMC_GetResponse>
 80059dc:	4602      	mov	r2, r0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2104      	movs	r1, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fa9a 	bl	8005f22 <SDMMC_GetResponse>
 80059ee:	4602      	mov	r2, r0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2108      	movs	r1, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa91 	bl	8005f22 <SDMMC_GetResponse>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	210c      	movs	r1, #12
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fa88 	bl	8005f22 <SDMMC_GetResponse>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d00d      	beq.n	8005a3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f107 020e 	add.w	r2, r7, #14
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fc65 	bl	80062fc <SDMMC_CmdSetRelAdd>
 8005a32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <SD_InitCard+0xae>
    {
      return errorstate;
 8005a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3c:	e072      	b.n	8005b24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d036      	beq.n	8005ab4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a46:	89fb      	ldrh	r3, [r7, #14]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	041b      	lsls	r3, r3, #16
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f000 fc2f 	bl	80062be <SDMMC_CmdSendCSD>
 8005a60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6a:	e05b      	b.n	8005b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fa55 	bl	8005f22 <SDMMC_GetResponse>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2104      	movs	r1, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fa4c 	bl	8005f22 <SDMMC_GetResponse>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2108      	movs	r1, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa43 	bl	8005f22 <SDMMC_GetResponse>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	210c      	movs	r1, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fa3a 	bl	8005f22 <SDMMC_GetResponse>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa31 	bl	8005f22 <SDMMC_GetResponse>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	0d1a      	lsrs	r2, r3, #20
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fd00 	bl	80054d4 <HAL_SD_GetCardCSD>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ade:	e021      	b.n	8005b24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	2200      	movs	r2, #0
 8005aec:	461c      	mov	r4, r3
 8005aee:	4615      	mov	r5, r2
 8005af0:	4622      	mov	r2, r4
 8005af2:	462b      	mov	r3, r5
 8005af4:	4608      	mov	r0, r1
 8005af6:	f000 fb1f 	bl	8006138 <SDMMC_CmdSelDesel>
 8005afa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <SD_InitCard+0x176>
  {
    return errorstate;
 8005b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b04:	e00e      	b.n	8005b24 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	466c      	mov	r4, sp
 8005b0e:	f103 0210 	add.w	r2, r3, #16
 8005b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b18:	3304      	adds	r3, #4
 8005b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f961 	bl	8005de4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3740      	adds	r7, #64	; 0x40
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bdb0      	pop	{r4, r5, r7, pc}

08005b2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fb1a 	bl	800617e <SDMMC_CmdGoIdleState>
 8005b4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	e072      	b.n	8005c3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fb2d 	bl	80061ba <SDMMC_CmdOperCond>
 8005b60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fb03 	bl	800617e <SDMMC_CmdGoIdleState>
 8005b78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e05b      	b.n	8005c3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d137      	bne.n	8005c02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fb2d 	bl	80061f8 <SDMMC_CmdAppCommand>
 8005b9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02d      	beq.n	8005c02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005baa:	e047      	b.n	8005c3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fb20 	bl	80061f8 <SDMMC_CmdAppCommand>
 8005bb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	e03b      	b.n	8005c3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	491e      	ldr	r1, [pc, #120]	; (8005c44 <SD_PowerON+0x118>)
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fb36 	bl	800623c <SDMMC_CmdAppOperCommand>
 8005bd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bdc:	e02e      	b.n	8005c3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f99c 	bl	8005f22 <SDMMC_GetResponse>
 8005bea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	0fdb      	lsrs	r3, r3, #31
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <SD_PowerON+0xcc>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <SD_PowerON+0xce>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]

    count++;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d802      	bhi.n	8005c12 <SD_PowerON+0xe6>
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0cc      	beq.n	8005bac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d902      	bls.n	8005c22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c20:	e00c      	b.n	8005c3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
 8005c32:	e002      	b.n	8005c3a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	c1100000 	.word	0xc1100000

08005c48 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c5c:	e018      	b.n	8005c90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 fb67 	bl	800633e <SDMMC_CmdSendStatus>
 8005c70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	e009      	b.n	8005c90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f94d 	bl	8005f22 <SDMMC_GetResponse>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d03f      	beq.n	8005d32 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e033      	b.n	8005d20 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 f8be 	bl	8005e3e <SDMMC_ReadFIFO>
 8005cc2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b07      	cmp	r3, #7
 8005d24:	d9c8      	bls.n	8005cb8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005d32:	bf00      	nop
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d043      	beq.n	8005ddc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e037      	b.n	8005dca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	061a      	lsls	r2, r3, #24
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f107 0208 	add.w	r2, r7, #8
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f84a 	bl	8005e58 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d9c4      	bls.n	8005d5a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005de4:	b084      	sub	sp, #16
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	f107 001c 	add.w	r0, r7, #28
 8005df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8005e02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005e06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	b004      	add	sp, #16
 8005e3c:	4770      	bx	lr

08005e3e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2203      	movs	r2, #3
 8005e86:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005e88:	2002      	movs	r0, #2
 8005e8a:	f7fa fd4f 	bl	800092c <HAL_Delay>

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ed2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ed8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ede:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005eee:	f023 030f 	bic.w	r3, r3, #15
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	b2db      	uxtb	r3, r3
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	461a      	mov	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0

}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005fae:	2310      	movs	r3, #16
 8005fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fb2:	2340      	movs	r3, #64	; 0x40
 8005fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fc0:	f107 0308 	add.w	r3, r7, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff74 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	2110      	movs	r1, #16
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9d6 	bl	8006384 <SDMMC_GetCmdResp1>
 8005fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ff2:	2311      	movs	r3, #17
 8005ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff52 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006010:	f241 3288 	movw	r2, #5000	; 0x1388
 8006014:	2111      	movs	r1, #17
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9b4 	bl	8006384 <SDMMC_GetCmdResp1>
 800601c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601e:	69fb      	ldr	r3, [r7, #28]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006036:	2312      	movs	r3, #18
 8006038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800603a:	2340      	movs	r3, #64	; 0x40
 800603c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff30 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	2112      	movs	r1, #18
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f992 	bl	8006384 <SDMMC_GetCmdResp1>
 8006060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006062:	69fb      	ldr	r3, [r7, #28]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800607a:	2318      	movs	r3, #24
 800607c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800607e:	2340      	movs	r3, #64	; 0x40
 8006080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ff0e 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	2118      	movs	r1, #24
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f970 	bl	8006384 <SDMMC_GetCmdResp1>
 80060a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a6:	69fb      	ldr	r3, [r7, #28]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80060be:	2319      	movs	r3, #25
 80060c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff feec 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80060dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e0:	2119      	movs	r1, #25
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f94e 	bl	8006384 <SDMMC_GetCmdResp1>
 80060e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ea:	69fb      	ldr	r3, [r7, #28]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006100:	230c      	movs	r3, #12
 8006102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800610c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006110:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fecb 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800611e:	4a05      	ldr	r2, [pc, #20]	; (8006134 <SDMMC_CmdStopTransfer+0x40>)
 8006120:	210c      	movs	r1, #12
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f92e 	bl	8006384 <SDMMC_GetCmdResp1>
 8006128:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	05f5e100 	.word	0x05f5e100

08006138 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006148:	2307      	movs	r3, #7
 800614a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006158:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800615a:	f107 0310 	add.w	r3, r7, #16
 800615e:	4619      	mov	r1, r3
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fea7 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006166:	f241 3288 	movw	r2, #5000	; 0x1388
 800616a:	2107      	movs	r1, #7
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f909 	bl	8006384 <SDMMC_GetCmdResp1>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006176:	4618      	mov	r0, r3
 8006178:	3728      	adds	r7, #40	; 0x28
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b088      	sub	sp, #32
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800619a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800619c:	f107 0308 	add.w	r3, r7, #8
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fe86 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb23 	bl	80067f4 <SDMMC_GetCmdError>
 80061ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061b0:	69fb      	ldr	r3, [r7, #28]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80061c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80061c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80061c8:	2308      	movs	r3, #8
 80061ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fe67 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fab6 	bl	8006758 <SDMMC_GetCmdResp7>
 80061ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006206:	2337      	movs	r3, #55	; 0x37
 8006208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800620a:	2340      	movs	r3, #64	; 0x40
 800620c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fe48 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006224:	f241 3288 	movw	r2, #5000	; 0x1388
 8006228:	2137      	movs	r1, #55	; 0x37
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8aa 	bl	8006384 <SDMMC_GetCmdResp1>
 8006230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006232:	69fb      	ldr	r3, [r7, #28]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800624c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006250:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006252:	2329      	movs	r3, #41	; 0x29
 8006254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fe22 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f9bd 	bl	80065f0 <SDMMC_GetCmdResp3>
 8006276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006278:	69fb      	ldr	r3, [r7, #28]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b088      	sub	sp, #32
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800628e:	2302      	movs	r3, #2
 8006290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006292:	23c0      	movs	r3, #192	; 0xc0
 8006294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800629a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fe04 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f957 	bl	8006560 <SDMMC_GetCmdResp2>
 80062b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b4:	69fb      	ldr	r3, [r7, #28]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b088      	sub	sp, #32
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80062cc:	2309      	movs	r3, #9
 80062ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80062d0:	23c0      	movs	r3, #192	; 0xc0
 80062d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fde5 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f938 	bl	8006560 <SDMMC_GetCmdResp2>
 80062f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f2:	69fb      	ldr	r3, [r7, #28]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800630a:	2303      	movs	r3, #3
 800630c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800631a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fdc6 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	2103      	movs	r1, #3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f99d 	bl	800666c <SDMMC_GetCmdResp6>
 8006332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006334:	69fb      	ldr	r3, [r7, #28]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b088      	sub	sp, #32
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800634c:	230d      	movs	r3, #13
 800634e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800635c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800635e:	f107 0308 	add.w	r3, r7, #8
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fda5 	bl	8005eb4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	210d      	movs	r1, #13
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f807 	bl	8006384 <SDMMC_GetCmdResp1>
 8006376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006378:	69fb      	ldr	r3, [r7, #28]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006392:	4b70      	ldr	r3, [pc, #448]	; (8006554 <SDMMC_GetCmdResp1+0x1d0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a70      	ldr	r2, [pc, #448]	; (8006558 <SDMMC_GetCmdResp1+0x1d4>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	0a5a      	lsrs	r2, r3, #9
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1e5a      	subs	r2, r3, #1
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063b4:	e0c9      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ef      	beq.n	80063a6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1ea      	bne.n	80063a6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2204      	movs	r2, #4
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063e2:	2304      	movs	r3, #4
 80063e4:	e0b1      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0a6      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	22c5      	movs	r2, #197	; 0xc5
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fd80 	bl	8005f08 <SDMMC_GetCommandResponse>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	4293      	cmp	r3, r2
 8006410:	d001      	beq.n	8006416 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006412:	2301      	movs	r3, #1
 8006414:	e099      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006416:	2100      	movs	r1, #0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff fd82 	bl	8005f22 <SDMMC_GetResponse>
 800641e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4b4e      	ldr	r3, [pc, #312]	; (800655c <SDMMC_GetCmdResp1+0x1d8>)
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	e08d      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	da02      	bge.n	800643a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006438:	e087      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	e080      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	e079      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006464:	e071      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006474:	e069      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006484:	e061      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006494:	e059      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a4:	e051      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064b4:	e049      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80064c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064c4:	e041      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80064d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d4:	e039      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80064e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e4:	e031      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064f4:	e029      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006504:	e021      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006514:	e019      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006524:	e011      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006534:	e009      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006540:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006544:	e001      	b.n	800654a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000100 	.word	0x20000100
 8006558:	10624dd3 	.word	0x10624dd3
 800655c:	fdffe008 	.word	0xfdffe008

08006560 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <SDMMC_GetCmdResp2+0x88>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <SDMMC_GetCmdResp2+0x8c>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	f241 3288 	movw	r2, #5000	; 0x1388
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	60fa      	str	r2, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800658c:	e026      	b.n	80065dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0ef      	beq.n	800657e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ea      	bne.n	800657e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ba:	2304      	movs	r3, #4
 80065bc:	e00e      	b.n	80065dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e003      	b.n	80065dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	22c5      	movs	r2, #197	; 0xc5
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20000100 	.word	0x20000100
 80065ec:	10624dd3 	.word	0x10624dd3

080065f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f8:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <SDMMC_GetCmdResp3+0x74>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <SDMMC_GetCmdResp3+0x78>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0a5b      	lsrs	r3, r3, #9
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800661c:	e01b      	b.n	8006656 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ea      	bne.n	800660e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800664a:	2304      	movs	r3, #4
 800664c:	e003      	b.n	8006656 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	22c5      	movs	r2, #197	; 0xc5
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000100 	.word	0x20000100
 8006668:	10624dd3 	.word	0x10624dd3

0800666c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800667a:	4b35      	ldr	r3, [pc, #212]	; (8006750 <SDMMC_GetCmdResp6+0xe4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a35      	ldr	r2, [pc, #212]	; (8006754 <SDMMC_GetCmdResp6+0xe8>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0a5b      	lsrs	r3, r3, #9
 8006686:	f241 3288 	movw	r2, #5000	; 0x1388
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	61fa      	str	r2, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800669a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800669e:	e052      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ef      	beq.n	8006690 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ea      	bne.n	8006690 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2204      	movs	r2, #4
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066cc:	2304      	movs	r3, #4
 80066ce:	e03a      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e02f      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fc0e 	bl	8005f08 <SDMMC_GetCommandResponse>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d001      	beq.n	80066fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e025      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22c5      	movs	r2, #197	; 0xc5
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006700:	2100      	movs	r1, #0
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fc0d 	bl	8005f22 <SDMMC_GetResponse>
 8006708:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	b29a      	uxth	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800671e:	2300      	movs	r3, #0
 8006720:	e011      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800672c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006730:	e009      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800673c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006740:	e001      	b.n	8006746 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000100 	.word	0x20000100
 8006754:	10624dd3 	.word	0x10624dd3

08006758 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <SDMMC_GetCmdResp7+0x94>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <SDMMC_GetCmdResp7+0x98>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	0a5b      	lsrs	r3, r3, #9
 800676c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	60fa      	str	r2, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006784:	e02c      	b.n	80067e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0ef      	beq.n	8006776 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ea      	bne.n	8006776 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2204      	movs	r2, #4
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067b2:	2304      	movs	r3, #4
 80067b4:	e014      	b.n	80067e0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e009      	b.n	80067e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80067de:	2300      	movs	r3, #0

}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000100 	.word	0x20000100
 80067f0:	10624dd3 	.word	0x10624dd3

080067f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067fc:	4b11      	ldr	r3, [pc, #68]	; (8006844 <SDMMC_GetCmdError+0x50>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a11      	ldr	r2, [pc, #68]	; (8006848 <SDMMC_GetCmdError+0x54>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	0a5b      	lsrs	r3, r3, #9
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	fb02 f303 	mul.w	r3, r2, r3
 8006810:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1e5a      	subs	r2, r3, #1
 8006816:	60fa      	str	r2, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800681c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006820:	e009      	b.n	8006836 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f1      	beq.n	8006812 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	22c5      	movs	r2, #197	; 0xc5
 8006832:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000100 	.word	0x20000100
 8006848:	10624dd3 	.word	0x10624dd3

0800684c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800684c:	b084      	sub	sp, #16
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	f107 001c 	add.w	r0, r7, #28
 800685a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fa1c 	bl	8007ca8 <USB_CoreReset>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	639a      	str	r2, [r3, #56]	; 0x38
 8006886:	e005      	b.n	8006894 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068a0:	b004      	add	sp, #16
 80068a2:	4770      	bx	lr

080068a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d165      	bne.n	8006984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <USB_SetTurnaroundTime+0x110>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d906      	bls.n	80068ce <USB_SetTurnaroundTime+0x2a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <USB_SetTurnaroundTime+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d202      	bcs.n	80068ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068c8:	230f      	movs	r3, #15
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e05c      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4a39      	ldr	r2, [pc, #228]	; (80069b8 <USB_SetTurnaroundTime+0x114>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d306      	bcc.n	80068e4 <USB_SetTurnaroundTime+0x40>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4a38      	ldr	r2, [pc, #224]	; (80069bc <USB_SetTurnaroundTime+0x118>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d202      	bcs.n	80068e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068de:	230e      	movs	r3, #14
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	e051      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4a35      	ldr	r2, [pc, #212]	; (80069bc <USB_SetTurnaroundTime+0x118>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d306      	bcc.n	80068fa <USB_SetTurnaroundTime+0x56>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4a34      	ldr	r2, [pc, #208]	; (80069c0 <USB_SetTurnaroundTime+0x11c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d202      	bcs.n	80068fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068f4:	230d      	movs	r3, #13
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e046      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4a30      	ldr	r2, [pc, #192]	; (80069c0 <USB_SetTurnaroundTime+0x11c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d306      	bcc.n	8006910 <USB_SetTurnaroundTime+0x6c>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <USB_SetTurnaroundTime+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d802      	bhi.n	8006910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800690a:	230c      	movs	r3, #12
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	e03b      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4a2c      	ldr	r2, [pc, #176]	; (80069c4 <USB_SetTurnaroundTime+0x120>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d906      	bls.n	8006926 <USB_SetTurnaroundTime+0x82>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <USB_SetTurnaroundTime+0x124>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d802      	bhi.n	8006926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006920:	230b      	movs	r3, #11
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	e030      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <USB_SetTurnaroundTime+0x124>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d906      	bls.n	800693c <USB_SetTurnaroundTime+0x98>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <USB_SetTurnaroundTime+0x128>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d802      	bhi.n	800693c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006936:	230a      	movs	r3, #10
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e025      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a23      	ldr	r2, [pc, #140]	; (80069cc <USB_SetTurnaroundTime+0x128>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d906      	bls.n	8006952 <USB_SetTurnaroundTime+0xae>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4a22      	ldr	r2, [pc, #136]	; (80069d0 <USB_SetTurnaroundTime+0x12c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d202      	bcs.n	8006952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800694c:	2309      	movs	r3, #9
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e01a      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <USB_SetTurnaroundTime+0x12c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d306      	bcc.n	8006968 <USB_SetTurnaroundTime+0xc4>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <USB_SetTurnaroundTime+0x130>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d802      	bhi.n	8006968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006962:	2308      	movs	r3, #8
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e00f      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <USB_SetTurnaroundTime+0x130>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d906      	bls.n	800697e <USB_SetTurnaroundTime+0xda>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a19      	ldr	r2, [pc, #100]	; (80069d8 <USB_SetTurnaroundTime+0x134>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d202      	bcs.n	800697e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006978:	2307      	movs	r3, #7
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e004      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800697e:	2306      	movs	r3, #6
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e001      	b.n	8006988 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006984:	2309      	movs	r3, #9
 8006986:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	00d8acbf 	.word	0x00d8acbf
 80069b8:	00e4e1c0 	.word	0x00e4e1c0
 80069bc:	00f42400 	.word	0x00f42400
 80069c0:	01067380 	.word	0x01067380
 80069c4:	011a499f 	.word	0x011a499f
 80069c8:	01312cff 	.word	0x01312cff
 80069cc:	014ca43f 	.word	0x014ca43f
 80069d0:	016e3600 	.word	0x016e3600
 80069d4:	01a6ab1f 	.word	0x01a6ab1f
 80069d8:	01e84800 	.word	0x01e84800

080069dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f043 0201 	orr.w	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d115      	bne.n	8006a6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a4e:	2001      	movs	r0, #1
 8006a50:	f7f9 ff6c 	bl	800092c <HAL_Delay>
      ms++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f8ab 	bl	8007bb6 <USB_GetMode>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d01e      	beq.n	8006aa4 <USB_SetCurrentMode+0x84>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b31      	cmp	r3, #49	; 0x31
 8006a6a:	d9f0      	bls.n	8006a4e <USB_SetCurrentMode+0x2e>
 8006a6c:	e01a      	b.n	8006aa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d115      	bne.n	8006aa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a80:	2001      	movs	r0, #1
 8006a82:	f7f9 ff53 	bl	800092c <HAL_Delay>
      ms++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f892 	bl	8007bb6 <USB_GetMode>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <USB_SetCurrentMode+0x84>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b31      	cmp	r3, #49	; 0x31
 8006a9c:	d9f0      	bls.n	8006a80 <USB_SetCurrentMode+0x60>
 8006a9e:	e001      	b.n	8006aa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e005      	b.n	8006ab0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b32      	cmp	r3, #50	; 0x32
 8006aa8:	d101      	bne.n	8006aae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab8:	b084      	sub	sp, #16
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	e009      	b.n	8006aec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3340      	adds	r3, #64	; 0x40
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0e      	cmp	r3, #14
 8006af0:	d9f2      	bls.n	8006ad8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11c      	bne.n	8006b32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e005      	b.n	8006b3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b44:	461a      	mov	r2, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f959 	bl	8006e04 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b52:	2110      	movs	r1, #16
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8f1 	bl	8006d3c <USB_FlushTxFifo>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f91d 	bl	8006da4 <USB_FlushRxFifo>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	461a      	mov	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e043      	b.n	8006c26 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb4:	d118      	bne.n	8006be8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e013      	b.n	8006bfa <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bde:	461a      	mov	r2, r3
 8006be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e008      	b.n	8006bfa <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3301      	adds	r3, #1
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3b7      	bcc.n	8006b9e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e043      	b.n	8006cbc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4a:	d118      	bne.n	8006c7e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e013      	b.n	8006c90 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	461a      	mov	r2, r3
 8006c76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e008      	b.n	8006c90 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d3b7      	bcc.n	8006c34 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f043 0210 	orr.w	r2, r3, #16
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <USB_DevInit+0x280>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f043 0208 	orr.w	r2, r3, #8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d1e:	f043 0304 	orr.w	r3, r3, #4
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d32:	b004      	add	sp, #16
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	803c3800 	.word	0x803c3800

08006d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <USB_FlushTxFifo+0x64>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d901      	bls.n	8006d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e01b      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	daf2      	bge.n	8006d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	019b      	lsls	r3, r3, #6
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3301      	adds	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a08      	ldr	r2, [pc, #32]	; (8006da0 <USB_FlushTxFifo+0x64>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e006      	b.n	8006d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d0f0      	beq.n	8006d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	00030d40 	.word	0x00030d40

08006da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <USB_FlushRxFifo+0x5c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e018      	b.n	8006df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	daf2      	bge.n	8006db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <USB_FlushRxFifo+0x5c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e006      	b.n	8006df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d0f0      	beq.n	8006dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	00030d40 	.word	0x00030d40

08006e04 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e24:	4313      	orrs	r3, r2
 8006e26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0306 	and.w	r3, r3, #6
 8006e4e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d002      	beq.n	8006e5c <USB_GetDevSpeed+0x26>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d102      	bne.n	8006e62 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	75fb      	strb	r3, [r7, #23]
 8006e60:	e001      	b.n	8006e66 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006e62:	230f      	movs	r3, #15
 8006e64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d13a      	bne.n	8006f06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d155      	bne.n	8006f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	791b      	ldrb	r3, [r3, #4]
 8006ee2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ee4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	059b      	lsls	r3, r3, #22
 8006eea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eec:	4313      	orrs	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e036      	b.n	8006f74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	2101      	movs	r1, #1
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d11a      	bne.n	8006f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	791b      	ldrb	r3, [r3, #4]
 8006f58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d161      	bne.n	8007064 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb6:	d11f      	bne.n	8006ff8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	b29b      	uxth	r3, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007018:	4013      	ands	r3, r2
 800701a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	2101      	movs	r1, #1
 800702e:	fa01 f303 	lsl.w	r3, r1, r3
 8007032:	b29b      	uxth	r3, r3
 8007034:	43db      	mvns	r3, r3
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800703c:	4013      	ands	r3, r2
 800703e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	0159      	lsls	r1, r3, #5
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	440b      	add	r3, r1
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	4619      	mov	r1, r3
 800705c:	4b35      	ldr	r3, [pc, #212]	; (8007134 <USB_DeactivateEndpoint+0x1b0>)
 800705e:	4013      	ands	r3, r2
 8007060:	600b      	str	r3, [r1, #0]
 8007062:	e060      	b.n	8007126 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707a:	d11f      	bne.n	80070bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800709a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	2101      	movs	r1, #1
 80070ce:	fa01 f303 	lsl.w	r3, r1, r3
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	43db      	mvns	r3, r3
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070dc:	4013      	ands	r3, r2
 80070de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	2101      	movs	r1, #1
 80070f2:	fa01 f303 	lsl.w	r3, r1, r3
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	43db      	mvns	r3, r3
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007100:	4013      	ands	r3, r2
 8007102:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	0159      	lsls	r1, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	440b      	add	r3, r1
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	4619      	mov	r1, r3
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <USB_DeactivateEndpoint+0x1b4>)
 8007122:	4013      	ands	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	ec337800 	.word	0xec337800
 8007138:	eff37800 	.word	0xeff37800

0800713c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	2b01      	cmp	r3, #1
 8007156:	f040 8128 	bne.w	80073aa <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d132      	bne.n	80071c8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c0:	0cdb      	lsrs	r3, r3, #19
 80071c2:	04db      	lsls	r3, r3, #19
 80071c4:	6113      	str	r3, [r2, #16]
 80071c6:	e092      	b.n	80072ee <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e2:	0cdb      	lsrs	r3, r3, #19
 80071e4:	04db      	lsls	r3, r3, #19
 80071e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007202:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007206:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800720a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11a      	bne.n	8007248 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	429a      	cmp	r2, r3
 800721c:	d903      	bls.n	8007226 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007244:	6113      	str	r3, [r2, #16]
 8007246:	e01b      	b.n	8007280 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6919      	ldr	r1, [r3, #16]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	440b      	add	r3, r1
 8007260:	1e59      	subs	r1, r3, #1
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	fbb1 f3f3 	udiv	r3, r1, r3
 800726a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800726c:	4b8d      	ldr	r3, [pc, #564]	; (80074a4 <USB_EPStartXfer+0x368>)
 800726e:	400b      	ands	r3, r1
 8007270:	6939      	ldr	r1, [r7, #16]
 8007272:	0148      	lsls	r0, r1, #5
 8007274:	6979      	ldr	r1, [r7, #20]
 8007276:	4401      	add	r1, r0
 8007278:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800727c:	4313      	orrs	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007296:	6939      	ldr	r1, [r7, #16]
 8007298:	0148      	lsls	r0, r1, #5
 800729a:	6979      	ldr	r1, [r7, #20]
 800729c:	4401      	add	r1, r0
 800729e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072a2:	4313      	orrs	r3, r2
 80072a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d11f      	bne.n	80072ee <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ec:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007308:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800730c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	791b      	ldrb	r3, [r3, #4]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d015      	beq.n	8007342 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8139 	beq.w	8007592 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	2101      	movs	r1, #1
 8007332:	fa01 f303 	lsl.w	r3, r1, r3
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800733c:	4313      	orrs	r3, r2
 800733e:	634b      	str	r3, [r1, #52]	; 0x34
 8007340:	e127      	b.n	8007592 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	2b00      	cmp	r3, #0
 8007350:	d110      	bne.n	8007374 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e00f      	b.n	8007394 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007392:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68d9      	ldr	r1, [r3, #12]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f9a6 	bl	80076f4 <USB_WritePacket>
 80073a8:	e0f3      	b.n	8007592 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	0cdb      	lsrs	r3, r3, #19
 80073c6:	04db      	lsls	r3, r3, #19
 80073c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ec:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d12f      	bne.n	8007454 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007422:	6939      	ldr	r1, [r7, #16]
 8007424:	0148      	lsls	r0, r1, #5
 8007426:	6979      	ldr	r1, [r7, #20]
 8007428:	4401      	add	r1, r0
 800742a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800742e:	4313      	orrs	r3, r2
 8007430:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6113      	str	r3, [r2, #16]
 8007452:	e061      	b.n	8007518 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d125      	bne.n	80074a8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007472:	6939      	ldr	r1, [r7, #16]
 8007474:	0148      	lsls	r0, r1, #5
 8007476:	6979      	ldr	r1, [r7, #20]
 8007478:	4401      	add	r1, r0
 800747a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800747e:	4313      	orrs	r3, r2
 8007480:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074a0:	6113      	str	r3, [r2, #16]
 80074a2:	e039      	b.n	8007518 <USB_EPStartXfer+0x3dc>
 80074a4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	89fa      	ldrh	r2, [r7, #14]
 80074c4:	fb03 f202 	mul.w	r2, r3, r2
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	04d9      	lsls	r1, r3, #19
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <USB_EPStartXfer+0x460>)
 80074e0:	400b      	ands	r3, r1
 80074e2:	6939      	ldr	r1, [r7, #16]
 80074e4:	0148      	lsls	r0, r1, #5
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	4401      	add	r1, r0
 80074ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074ee:	4313      	orrs	r3, r2
 80074f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007508:	6939      	ldr	r1, [r7, #16]
 800750a:	0148      	lsls	r0, r1, #5
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	4401      	add	r1, r0
 8007510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007514:	4313      	orrs	r3, r2
 8007516:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d128      	bne.n	8007572 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d110      	bne.n	8007552 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e00f      	b.n	8007572 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007590:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	1ff80000 	.word	0x1ff80000

080075a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d14a      	bne.n	8007654 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d6:	f040 8086 	bne.w	80076e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007620:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f242 7210 	movw	r2, #10000	; 0x2710
 800762e:	4293      	cmp	r3, r2
 8007630:	d902      	bls.n	8007638 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
          break;
 8007636:	e056      	b.n	80076e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007650:	d0e7      	beq.n	8007622 <USB_EPStopXfer+0x82>
 8007652:	e048      	b.n	80076e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800766c:	d13b      	bne.n	80076e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007690:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f242 7210 	movw	r2, #10000	; 0x2710
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d902      	bls.n	80076cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ca:	e00c      	b.n	80076e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e4:	d0e7      	beq.n	80076b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b089      	sub	sp, #36	; 0x24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4611      	mov	r1, r2
 8007700:	461a      	mov	r2, r3
 8007702:	460b      	mov	r3, r1
 8007704:	71fb      	strb	r3, [r7, #7]
 8007706:	4613      	mov	r3, r2
 8007708:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007712:	88bb      	ldrh	r3, [r7, #4]
 8007714:	3303      	adds	r3, #3
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	e018      	b.n	8007752 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	031a      	lsls	r2, r3, #12
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	4413      	add	r3, r2
 8007728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772c:	461a      	mov	r2, r3
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	3301      	adds	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	3301      	adds	r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	3301      	adds	r3, #1
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	429a      	cmp	r2, r3
 8007758:	d3e2      	bcc.n	8007720 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3724      	adds	r7, #36	; 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007768:	b480      	push	{r7}
 800776a:	b08b      	sub	sp, #44	; 0x2c
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	089b      	lsrs	r3, r3, #2
 8007782:	b29b      	uxth	r3, r3
 8007784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800778e:	2300      	movs	r3, #0
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	e014      	b.n	80077be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	601a      	str	r2, [r3, #0]
    pDest++;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	3301      	adds	r3, #1
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	3301      	adds	r3, #1
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	3301      	adds	r3, #1
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	3301      	adds	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	3301      	adds	r3, #1
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d3e6      	bcc.n	8007794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077c6:	8bfb      	ldrh	r3, [r7, #30]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01e      	beq.n	800780a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d6:	461a      	mov	r2, r3
 80077d8:	f107 0310 	add.w	r3, r7, #16
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	701a      	strb	r2, [r3, #0]
      i++;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	3301      	adds	r3, #1
 80077f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	3301      	adds	r3, #1
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077fe:	8bfb      	ldrh	r3, [r7, #30]
 8007800:	3b01      	subs	r3, #1
 8007802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007804:	8bfb      	ldrh	r3, [r7, #30]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ea      	bne.n	80077e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800780c:	4618      	mov	r0, r3
 800780e:	372c      	adds	r7, #44	; 0x2c
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d12c      	bne.n	800788e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	db12      	blt.n	800786c <USB_EPSetStall+0x54>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00f      	beq.n	800786c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800786a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e02b      	b.n	80078e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	db12      	blt.n	80078c6 <USB_EPSetStall+0xae>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	0151      	lsls	r1, r2, #5
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	440a      	add	r2, r1
 80078dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d128      	bne.n	8007962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800792e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	791b      	ldrb	r3, [r3, #4]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d003      	beq.n	8007940 <USB_EPClearStall+0x4c>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	791b      	ldrb	r3, [r3, #4]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d138      	bne.n	80079b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	e027      	b.n	80079b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d003      	beq.n	8007992 <USB_EPClearStall+0x9e>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d10f      	bne.n	80079b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079fa:	4313      	orrs	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a3a:	f023 0302 	bic.w	r3, r3, #2
 8007a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
 8007a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	0c1b      	lsrs	r3, r3, #16
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	b29b      	uxth	r3, r3
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8a:	01db      	lsls	r3, r3, #7
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	333c      	adds	r3, #60	; 0x3c
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <USB_EP0_OutStart+0x8c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d90a      	bls.n	8007c4e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c48:	d101      	bne.n	8007c4e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e024      	b.n	8007c98 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	461a      	mov	r2, r3
 8007c56:	2300      	movs	r3, #0
 8007c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7c:	f043 0318 	orr.w	r3, r3, #24
 8007c80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c94:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	4f54300a 	.word	0x4f54300a

08007ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <USB_CoreReset+0x64>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e01b      	b.n	8007cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	daf2      	bge.n	8007cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f043 0201 	orr.w	r2, r3, #1
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <USB_CoreReset+0x64>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d901      	bls.n	8007cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e006      	b.n	8007cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d0f0      	beq.n	8007cde <USB_CoreReset+0x36>

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	00030d40 	.word	0x00030d40

08007d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007d14:	4904      	ldr	r1, [pc, #16]	; (8007d28 <MX_FATFS_Init+0x18>)
 8007d16:	4805      	ldr	r0, [pc, #20]	; (8007d2c <MX_FATFS_Init+0x1c>)
 8007d18:	f006 fa0e 	bl	800e138 <FATFS_LinkDriver>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <MX_FATFS_Init+0x20>)
 8007d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d24:	bf00      	nop
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000374 	.word	0x20000374
 8007d2c:	0800f0b4 	.word	0x0800f0b4
 8007d30:	20000370 	.word	0x20000370

08007d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d4e:	f000 f89e 	bl	8007e8e <BSP_SD_IsDetected>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d001      	beq.n	8007d5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e005      	b.n	8007d68 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007d5c:	4804      	ldr	r0, [pc, #16]	; (8007d70 <BSP_SD_Init+0x2c>)
 8007d5e:	f7fc fdff 	bl	8004960 <HAL_SD_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007d66:	79fb      	ldrb	r3, [r7, #7]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000250 	.word	0x20000250

08007d74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	4806      	ldr	r0, [pc, #24]	; (8007dac <BSP_SD_ReadBlocks+0x38>)
 8007d92:	f7fc febb 	bl	8004b0c <HAL_SD_ReadBlocks>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000250 	.word	0x20000250

08007db0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	4806      	ldr	r0, [pc, #24]	; (8007de8 <BSP_SD_WriteBlocks+0x38>)
 8007dce:	f7fd f87b 	bl	8004ec8 <HAL_SD_WriteBlocks>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000250 	.word	0x20000250

08007dec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007df0:	4805      	ldr	r0, [pc, #20]	; (8007e08 <BSP_SD_GetCardState+0x1c>)
 8007df2:	f7fd fd3f 	bl	8005874 <HAL_SD_GetCardState>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000250 	.word	0x20000250

08007e0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4803      	ldr	r0, [pc, #12]	; (8007e24 <BSP_SD_GetCardInfo+0x18>)
 8007e18:	f7fd fd00 	bl	800581c <HAL_SD_GetCardInfo>
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000250 	.word	0x20000250

08007e28 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007e30:	f000 f818 	bl	8007e64 <BSP_SD_AbortCallback>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007e44:	f000 f815 	bl	8007e72 <BSP_SD_WriteCpltCallback>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007e58:	f000 f812 	bl	8007e80 <BSP_SD_ReadCpltCallback>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0

}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8007e72:	b480      	push	{r7}
 8007e74:	af00      	add	r7, sp, #0

}
 8007e76:	bf00      	nop
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0

}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e94:	2301      	movs	r3, #1
 8007e96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007e98:	f000 f80c 	bl	8007eb4 <BSP_PlatformIsDetected>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	b2db      	uxtb	r3, r3
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ec2:	4806      	ldr	r0, [pc, #24]	; (8007edc <BSP_PlatformIsDetected+0x28>)
 8007ec4:	f7f9 f9ba 	bl	800123c <HAL_GPIO_ReadPin>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	48000400 	.word	0x48000400

08007ee0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007eea:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <SD_CheckStatus+0x38>)
 8007eec:	2201      	movs	r2, #1
 8007eee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007ef0:	f7ff ff7c 	bl	8007dec <BSP_SD_GetCardState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007efa:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <SD_CheckStatus+0x38>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <SD_CheckStatus+0x38>)
 8007f08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007f0a:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <SD_CheckStatus+0x38>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b2db      	uxtb	r3, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000109 	.word	0x20000109

08007f1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <SD_initialize+0x38>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007f2c:	f7ff ff0a 	bl	8007d44 <BSP_SD_Init>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d107      	bne.n	8007f46 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff ffd1 	bl	8007ee0 <SD_CheckStatus>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <SD_initialize+0x38>)
 8007f44:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007f46:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <SD_initialize+0x38>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b2db      	uxtb	r3, r3
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000109 	.word	0x20000109

08007f58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ffbb 	bl	8007ee0 <SD_CheckStatus>
 8007f6a:	4603      	mov	r3, r0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	68b8      	ldr	r0, [r7, #8]
 8007f92:	f7ff feef 	bl	8007d74 <BSP_SD_ReadBlocks>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d107      	bne.n	8007fac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007f9c:	bf00      	nop
 8007f9e:	f7ff ff25 	bl	8007dec <BSP_SD_GetCardState>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1fa      	bne.n	8007f9e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	68b8      	ldr	r0, [r7, #8]
 8007fd4:	f7ff feec 	bl	8007db0 <BSP_SD_WriteBlocks>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007fde:	bf00      	nop
 8007fe0:	f7ff ff04 	bl	8007dec <BSP_SD_GetCardState>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1fa      	bne.n	8007fe0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	; 0x30
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	603a      	str	r2, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
 8008004:	460b      	mov	r3, r1
 8008006:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800800e:	4b25      	ldr	r3, [pc, #148]	; (80080a4 <SD_ioctl+0xac>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <SD_ioctl+0x28>
 800801c:	2303      	movs	r3, #3
 800801e:	e03c      	b.n	800809a <SD_ioctl+0xa2>

  switch (cmd)
 8008020:	79bb      	ldrb	r3, [r7, #6]
 8008022:	2b03      	cmp	r3, #3
 8008024:	d834      	bhi.n	8008090 <SD_ioctl+0x98>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <SD_ioctl+0x34>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008045 	.word	0x08008045
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008077 	.word	0x08008077
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008042:	e028      	b.n	8008096 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fedf 	bl	8007e0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800805a:	e01c      	b.n	8008096 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fed3 	bl	8007e0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	b29a      	uxth	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008074:	e00f      	b.n	8008096 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fec6 	bl	8007e0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	0a5a      	lsrs	r2, r3, #9
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800808e:	e002      	b.n	8008096 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008090:	2304      	movs	r3, #4
 8008092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800809a:	4618      	mov	r0, r3
 800809c:	3730      	adds	r7, #48	; 0x30
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000109 	.word	0x20000109

080080a8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80080b4:	f44f 701d 	mov.w	r0, #628	; 0x274
 80080b8:	f006 ff32 	bl	800ef20 <USBD_static_malloc>
 80080bc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32b0      	adds	r2, #176	; 0xb0
 80080ce:	2100      	movs	r1, #0
 80080d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080d4:	2302      	movs	r3, #2
 80080d6:	e06e      	b.n	80081b6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32b0      	adds	r2, #176	; 0xb0
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32b0      	adds	r2, #176	; 0xb0
 80080f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7c1b      	ldrb	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d12b      	bne.n	800815c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008104:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <USBD_MSC_Init+0x118>)
 8008106:	7819      	ldrb	r1, [r3, #0]
 8008108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810c:	2202      	movs	r2, #2
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f006 fcbc 	bl	800ea8c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008114:	4b2a      	ldr	r3, [pc, #168]	; (80081c0 <USBD_MSC_Init+0x118>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800812c:	2201      	movs	r2, #1
 800812e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008130:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <USBD_MSC_Init+0x11c>)
 8008132:	7819      	ldrb	r1, [r3, #0]
 8008134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008138:	2202      	movs	r2, #2
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f006 fca6 	bl	800ea8c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008140:	4b20      	ldr	r3, [pc, #128]	; (80081c4 <USBD_MSC_Init+0x11c>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f003 020f 	and.w	r2, r3, #15
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3324      	adds	r3, #36	; 0x24
 8008156:	2201      	movs	r2, #1
 8008158:	801a      	strh	r2, [r3, #0]
 800815a:	e028      	b.n	80081ae <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800815c:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <USBD_MSC_Init+0x118>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	2202      	movs	r2, #2
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f006 fc91 	bl	800ea8c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800816a:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <USBD_MSC_Init+0x118>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f003 020f 	and.w	r2, r3, #15
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008182:	2201      	movs	r2, #1
 8008184:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008186:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <USBD_MSC_Init+0x11c>)
 8008188:	7819      	ldrb	r1, [r3, #0]
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	2202      	movs	r2, #2
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f006 fc7c 	bl	800ea8c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008194:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <USBD_MSC_Init+0x11c>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3324      	adds	r3, #36	; 0x24
 80081aa:	2201      	movs	r2, #1
 80081ac:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa2c 	bl	800860c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	2000016f 	.word	0x2000016f
 80081c4:	2000016e 	.word	0x2000016e

080081c8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80081d4:	4b26      	ldr	r3, [pc, #152]	; (8008270 <USBD_MSC_DeInit+0xa8>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f006 fc94 	bl	800eb08 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80081e0:	4b23      	ldr	r3, [pc, #140]	; (8008270 <USBD_MSC_DeInit+0xa8>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f8:	2200      	movs	r2, #0
 80081fa:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80081fc:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <USBD_MSC_DeInit+0xac>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f006 fc80 	bl	800eb08 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008208:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <USBD_MSC_DeInit+0xac>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 020f 	and.w	r2, r3, #15
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	3324      	adds	r3, #36	; 0x24
 800821e:	2200      	movs	r2, #0
 8008220:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	32b0      	adds	r2, #176	; 0xb0
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d018      	beq.n	8008266 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa67 	bl	8008708 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	32b0      	adds	r2, #176	; 0xb0
 8008244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008248:	4618      	mov	r0, r3
 800824a:	f006 fe77 	bl	800ef3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32b0      	adds	r2, #176	; 0xb0
 8008258:	2100      	movs	r1, #0
 800825a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	2000016f 	.word	0x2000016f
 8008274:	2000016e 	.word	0x2000016e

08008278 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32b0      	adds	r2, #176	; 0xb0
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e0e1      	b.n	8008468 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d053      	beq.n	8008358 <USBD_MSC_Setup+0xe0>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	f040 80d1 	bne.w	8008458 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2bfe      	cmp	r3, #254	; 0xfe
 80082bc:	d002      	beq.n	80082c4 <USBD_MSC_Setup+0x4c>
 80082be:	2bff      	cmp	r3, #255	; 0xff
 80082c0:	d02a      	beq.n	8008318 <USBD_MSC_Setup+0xa0>
 80082c2:	e041      	b.n	8008348 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d11e      	bne.n	800830a <USBD_MSC_Setup+0x92>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d11a      	bne.n	800830a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da15      	bge.n	800830a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	33b0      	adds	r3, #176	; 0xb0
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	4798      	blx	r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	461a      	mov	r2, r3
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2201      	movs	r2, #1
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f003 f92b 	bl	800b55c <USBD_CtlSendData>
 8008306:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008308:	e025      	b.n	8008356 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f003 f8b4 	bl	800b47a <USBD_CtlError>
            ret = USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	75fb      	strb	r3, [r7, #23]
          break;
 8008316:	e01e      	b.n	8008356 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10c      	bne.n	800833a <USBD_MSC_Setup+0xc2>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	88db      	ldrh	r3, [r3, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800832e:	2b00      	cmp	r3, #0
 8008330:	db03      	blt.n	800833a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9b4 	bl	80086a0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008338:	e00d      	b.n	8008356 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f003 f89c 	bl	800b47a <USBD_CtlError>
            ret = USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	75fb      	strb	r3, [r7, #23]
          break;
 8008346:	e006      	b.n	8008356 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f003 f895 	bl	800b47a <USBD_CtlError>
          ret = USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	75fb      	strb	r3, [r7, #23]
          break;
 8008354:	bf00      	nop
      }
      break;
 8008356:	e086      	b.n	8008466 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b0b      	cmp	r3, #11
 800835e:	d872      	bhi.n	8008446 <USBD_MSC_Setup+0x1ce>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USBD_MSC_Setup+0xf0>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	08008399 	.word	0x08008399
 800836c:	08008415 	.word	0x08008415
 8008370:	08008447 	.word	0x08008447
 8008374:	08008447 	.word	0x08008447
 8008378:	08008447 	.word	0x08008447
 800837c:	08008447 	.word	0x08008447
 8008380:	08008447 	.word	0x08008447
 8008384:	08008447 	.word	0x08008447
 8008388:	08008447 	.word	0x08008447
 800838c:	08008447 	.word	0x08008447
 8008390:	080083c3 	.word	0x080083c3
 8008394:	080083ed 	.word	0x080083ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d107      	bne.n	80083b4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083a4:	f107 030e 	add.w	r3, r7, #14
 80083a8:	2202      	movs	r2, #2
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f003 f8d5 	bl	800b55c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083b2:	e050      	b.n	8008456 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f003 f85f 	bl	800b47a <USBD_CtlError>
            ret = USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	75fb      	strb	r3, [r7, #23]
          break;
 80083c0:	e049      	b.n	8008456 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d107      	bne.n	80083de <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3304      	adds	r3, #4
 80083d2:	2201      	movs	r2, #1
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f003 f8c0 	bl	800b55c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083dc:	e03b      	b.n	8008456 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f003 f84a 	bl	800b47a <USBD_CtlError>
            ret = USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ea:	e034      	b.n	8008456 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d106      	bne.n	8008406 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	885b      	ldrh	r3, [r3, #2]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008404:	e027      	b.n	8008456 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f003 f836 	bl	800b47a <USBD_CtlError>
            ret = USBD_FAIL;
 800840e:	2303      	movs	r3, #3
 8008410:	75fb      	strb	r3, [r7, #23]
          break;
 8008412:	e020      	b.n	8008456 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b03      	cmp	r3, #3
 800841e:	d119      	bne.n	8008454 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	885b      	ldrh	r3, [r3, #2]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d115      	bne.n	8008454 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	889b      	ldrh	r3, [r3, #4]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f006 fb9f 	bl	800eb74 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	889b      	ldrh	r3, [r3, #4]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fb2e 	bl	8008aa0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008444:	e006      	b.n	8008454 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f003 f816 	bl	800b47a <USBD_CtlError>
          ret = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	75fb      	strb	r3, [r7, #23]
          break;
 8008452:	e000      	b.n	8008456 <USBD_MSC_Setup+0x1de>
          break;
 8008454:	bf00      	nop
      }
      break;
 8008456:	e006      	b.n	8008466 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f003 f80d 	bl	800b47a <USBD_CtlError>
      ret = USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	75fb      	strb	r3, [r7, #23]
      break;
 8008464:	bf00      	nop
  }

  return (uint8_t)ret;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f959 	bl	8008738 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f983 	bl	80087ac <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80084b8:	2181      	movs	r1, #129	; 0x81
 80084ba:	4812      	ldr	r0, [pc, #72]	; (8008504 <USBD_MSC_GetHSCfgDesc+0x54>)
 80084bc:	f002 f97a 	bl	800a7b4 <USBD_GetEpDesc>
 80084c0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80084c2:	2101      	movs	r1, #1
 80084c4:	480f      	ldr	r0, [pc, #60]	; (8008504 <USBD_MSC_GetHSCfgDesc+0x54>)
 80084c6:	f002 f975 	bl	800a7b4 <USBD_GetEpDesc>
 80084ca:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d006      	beq.n	80084e0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	711a      	strb	r2, [r3, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f042 0202 	orr.w	r2, r2, #2
 80084de:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2200      	movs	r2, #0
 80084ea:	711a      	strb	r2, [r3, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f042 0202 	orr.w	r2, r2, #2
 80084f2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80084fa:	4b02      	ldr	r3, [pc, #8]	; (8008504 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20000144 	.word	0x20000144

08008508 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008510:	2181      	movs	r1, #129	; 0x81
 8008512:	4812      	ldr	r0, [pc, #72]	; (800855c <USBD_MSC_GetFSCfgDesc+0x54>)
 8008514:	f002 f94e 	bl	800a7b4 <USBD_GetEpDesc>
 8008518:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800851a:	2101      	movs	r1, #1
 800851c:	480f      	ldr	r0, [pc, #60]	; (800855c <USBD_MSC_GetFSCfgDesc+0x54>)
 800851e:	f002 f949 	bl	800a7b4 <USBD_GetEpDesc>
 8008522:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d006      	beq.n	8008538 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008532:	711a      	strb	r2, [r3, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008546:	711a      	strb	r2, [r3, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008552:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000144 	.word	0x20000144

08008560 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008568:	2181      	movs	r1, #129	; 0x81
 800856a:	4812      	ldr	r0, [pc, #72]	; (80085b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800856c:	f002 f922 	bl	800a7b4 <USBD_GetEpDesc>
 8008570:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008572:	2101      	movs	r1, #1
 8008574:	480f      	ldr	r0, [pc, #60]	; (80085b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008576:	f002 f91d 	bl	800a7b4 <USBD_GetEpDesc>
 800857a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800858a:	711a      	strb	r2, [r3, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d006      	beq.n	80085a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2200      	movs	r2, #0
 800859a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800859e:	711a      	strb	r2, [r3, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80085aa:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000144 	.word	0x20000144

080085b8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	220a      	movs	r2, #10
 80085c4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80085c6:	4b03      	ldr	r3, [pc, #12]	; (80085d4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20000164 	.word	0x20000164

080085d8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e009      	b.n	8008600 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	33b0      	adds	r3, #176	; 0xb0
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32b0      	adds	r2, #176	; 0xb0
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d032      	beq.n	8008690 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	33b0      	adds	r3, #176	; 0xb0
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2000      	movs	r0, #0
 8008662:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <MSC_BOT_Init+0x8c>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f006 fa82 	bl	800eb74 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <MSC_BOT_Init+0x90>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f006 fa7c 	bl	800eb74 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <MSC_BOT_Init+0x8c>)
 800867e:	7819      	ldrb	r1, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008686:	231f      	movs	r3, #31
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f006 fbaf 	bl	800edec <USBD_LL_PrepareReceive>
 800868e:	e000      	b.n	8008692 <MSC_BOT_Init+0x86>
    return;
 8008690:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000016f 	.word	0x2000016f
 800869c:	2000016e 	.word	0x2000016e

080086a0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32b0      	adds	r2, #176	; 0xb0
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d01b      	beq.n	80086f6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80086ca:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <MSC_BOT_Reset+0x60>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f006 fabb 	bl	800ec4c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <MSC_BOT_Reset+0x64>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f006 fab5 	bl	800ec4c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <MSC_BOT_Reset+0x64>)
 80086e4:	7819      	ldrb	r1, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80086ec:	231f      	movs	r3, #31
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f006 fb7c 	bl	800edec <USBD_LL_PrepareReceive>
 80086f4:	e000      	b.n	80086f8 <MSC_BOT_Reset+0x58>
    return;
 80086f6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	2000016e 	.word	0x2000016e
 8008704:	2000016f 	.word	0x2000016f

08008708 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	32b0      	adds	r2, #176	; 0xb0
 800871a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	721a      	strb	r2, [r3, #8]
  }
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	32b0      	adds	r2, #176	; 0xb0
 800874e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008752:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d020      	beq.n	800879c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	7a1b      	ldrb	r3, [r3, #8]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d005      	beq.n	800876e <MSC_BOT_DataIn+0x36>
 8008762:	2b02      	cmp	r3, #2
 8008764:	db1c      	blt.n	80087a0 <MSC_BOT_DataIn+0x68>
 8008766:	3b03      	subs	r3, #3
 8008768:	2b01      	cmp	r3, #1
 800876a:	d819      	bhi.n	80087a0 <MSC_BOT_DataIn+0x68>
 800876c:	e011      	b.n	8008792 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800877a:	461a      	mov	r2, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f9c9 	bl	8008b14 <SCSI_ProcessCmd>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	da0d      	bge.n	80087a4 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008788:	2101      	movs	r1, #1
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f90c 	bl	80089a8 <MSC_BOT_SendCSW>
      }
      break;
 8008790:	e008      	b.n	80087a4 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f907 	bl	80089a8 <MSC_BOT_SendCSW>
      break;
 800879a:	e004      	b.n	80087a6 <MSC_BOT_DataIn+0x6e>
    return;
 800879c:	bf00      	nop
 800879e:	e002      	b.n	80087a6 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80087a0:	bf00      	nop
 80087a2:	e000      	b.n	80087a6 <MSC_BOT_DataIn+0x6e>
      break;
 80087a4:	bf00      	nop
  }
}
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	; 0xb0
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01c      	beq.n	8008808 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	7a1b      	ldrb	r3, [r3, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <MSC_BOT_DataOut+0x30>
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d004      	beq.n	80087e4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80087da:	e018      	b.n	800880e <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f819 	bl	8008814 <MSC_BOT_CBW_Decode>
      break;
 80087e2:	e014      	b.n	800880e <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80087f0:	461a      	mov	r2, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f98e 	bl	8008b14 <SCSI_ProcessCmd>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da06      	bge.n	800880c <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80087fe:	2101      	movs	r1, #1
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f8d1 	bl	80089a8 <MSC_BOT_SendCSW>
      break;
 8008806:	e001      	b.n	800880c <MSC_BOT_DataOut+0x60>
    return;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <MSC_BOT_DataOut+0x62>
      break;
 800880c:	bf00      	nop
  }
}
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32b0      	adds	r2, #176	; 0xb0
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d079      	beq.n	8008926 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800884a:	4b3a      	ldr	r3, [pc, #232]	; (8008934 <MSC_BOT_CBW_Decode+0x120>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f006 fb03 	bl	800ee5c <USBD_LL_GetRxDataSize>
 8008856:	4603      	mov	r3, r0
 8008858:	2b1f      	cmp	r3, #31
 800885a:	d114      	bne.n	8008886 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008862:	4a35      	ldr	r2, [pc, #212]	; (8008938 <MSC_BOT_CBW_Decode+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d10e      	bne.n	8008886 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800886e:	2b01      	cmp	r3, #1
 8008870:	d809      	bhi.n	8008886 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008882:	2b10      	cmp	r3, #16
 8008884:	d90e      	bls.n	80088a4 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800888c:	2320      	movs	r3, #32
 800888e:	2205      	movs	r2, #5
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fe2a 	bl	80094ea <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2202      	movs	r2, #2
 800889a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8bd 	bl	8008a1c <MSC_BOT_Abort>
 80088a2:	e043      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80088b0:	461a      	mov	r2, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f92e 	bl	8008b14 <SCSI_ProcessCmd>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da0c      	bge.n	80088d8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7a1b      	ldrb	r3, [r3, #8]
 80088c2:	2b05      	cmp	r3, #5
 80088c4:	d104      	bne.n	80088d0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80088c6:	2101      	movs	r1, #1
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f86d 	bl	80089a8 <MSC_BOT_SendCSW>
 80088ce:	e02d      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8a3 	bl	8008a1c <MSC_BOT_Abort>
 80088d6:	e029      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	7a1b      	ldrb	r3, [r3, #8]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d024      	beq.n	800892a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d020      	beq.n	800892a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d01c      	beq.n	800892a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f103 0110 	add.w	r1, r3, #16
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	461a      	mov	r2, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f819 	bl	800893c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800890a:	e00f      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f846 	bl	80089a8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800891c:	e006      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f87c 	bl	8008a1c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008924:	e002      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
    return;
 8008926:	bf00      	nop
 8008928:	e000      	b.n	800892c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800892a:	bf00      	nop
    }
  }
}
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	2000016f 	.word	0x2000016f
 8008938:	43425355 	.word	0x43425355

0800893c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	32b0      	adds	r2, #176	; 0xb0
 8008952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008956:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01e      	beq.n	800899c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	4293      	cmp	r3, r2
 8008968:	bf28      	it	cs
 800896a:	4613      	movcs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2204      	movs	r2, #4
 800898a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <MSC_BOT_SendData+0x68>)
 800898e:	7819      	ldrb	r1, [r3, #0]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f006 f9f1 	bl	800ed7c <USBD_LL_Transmit>
 800899a:	e000      	b.n	800899e <MSC_BOT_SendData+0x62>
    return;
 800899c:	bf00      	nop
}
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	2000016e 	.word	0x2000016e

080089a8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	32b0      	adds	r2, #176	; 0xb0
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01d      	beq.n	8008a06 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a10      	ldr	r2, [pc, #64]	; (8008a10 <MSC_BOT_SendCSW+0x68>)
 80089ce:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <MSC_BOT_SendCSW+0x6c>)
 80089e2:	7819      	ldrb	r1, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80089ea:	230d      	movs	r3, #13
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f006 f9c5 	bl	800ed7c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <MSC_BOT_SendCSW+0x70>)
 80089f4:	7819      	ldrb	r1, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80089fc:	231f      	movs	r3, #31
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f006 f9f4 	bl	800edec <USBD_LL_PrepareReceive>
 8008a04:	e000      	b.n	8008a08 <MSC_BOT_SendCSW+0x60>
    return;
 8008a06:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	53425355 	.word	0x53425355
 8008a14:	2000016e 	.word	0x2000016e
 8008a18:	2000016f 	.word	0x2000016f

08008a1c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	32b0      	adds	r2, #176	; 0xb0
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d02a      	beq.n	8008a90 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10e      	bne.n	8008a62 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <MSC_BOT_Abort+0x7c>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f006 f8bf 	bl	800ebe0 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008a62:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <MSC_BOT_Abort+0x80>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f006 f8b9 	bl	800ebe0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7a5b      	ldrb	r3, [r3, #9]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d10d      	bne.n	8008a92 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <MSC_BOT_Abort+0x80>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f006 f8af 	bl	800ebe0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <MSC_BOT_Abort+0x7c>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f006 f8a9 	bl	800ebe0 <USBD_LL_StallEP>
 8008a8e:	e000      	b.n	8008a92 <MSC_BOT_Abort+0x76>
    return;
 8008a90:	bf00      	nop
  }
}
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	2000016f 	.word	0x2000016f
 8008a9c:	2000016e 	.word	0x2000016e

08008aa0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	32b0      	adds	r2, #176	; 0xb0
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01d      	beq.n	8008afe <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	7a5b      	ldrb	r3, [r3, #9]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d10c      	bne.n	8008ae4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008aca:	4b10      	ldr	r3, [pc, #64]	; (8008b0c <MSC_BOT_CplClrFeature+0x6c>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f006 f885 	bl	800ebe0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <MSC_BOT_CplClrFeature+0x70>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f006 f87f 	bl	800ebe0 <USBD_LL_StallEP>
 8008ae2:	e00f      	b.n	8008b04 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da0a      	bge.n	8008b02 <MSC_BOT_CplClrFeature+0x62>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	7a5b      	ldrb	r3, [r3, #9]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d006      	beq.n	8008b02 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008af4:	2101      	movs	r1, #1
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff ff56 	bl	80089a8 <MSC_BOT_SendCSW>
 8008afc:	e002      	b.n	8008b04 <MSC_BOT_CplClrFeature+0x64>
    return;
 8008afe:	bf00      	nop
 8008b00:	e000      	b.n	8008b04 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008b02:	bf00      	nop
  }
}
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	2000016e 	.word	0x2000016e
 8008b10:	2000016f 	.word	0x2000016f

08008b14 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	32b0      	adds	r2, #176	; 0xb0
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	e168      	b.n	8008e10 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2baa      	cmp	r3, #170	; 0xaa
 8008b44:	f000 8144 	beq.w	8008dd0 <SCSI_ProcessCmd+0x2bc>
 8008b48:	2baa      	cmp	r3, #170	; 0xaa
 8008b4a:	f300 8153 	bgt.w	8008df4 <SCSI_ProcessCmd+0x2e0>
 8008b4e:	2ba8      	cmp	r3, #168	; 0xa8
 8008b50:	f000 812c 	beq.w	8008dac <SCSI_ProcessCmd+0x298>
 8008b54:	2ba8      	cmp	r3, #168	; 0xa8
 8008b56:	f300 814d 	bgt.w	8008df4 <SCSI_ProcessCmd+0x2e0>
 8008b5a:	2b5a      	cmp	r3, #90	; 0x5a
 8008b5c:	f300 80c0 	bgt.w	8008ce0 <SCSI_ProcessCmd+0x1cc>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f2c0 8147 	blt.w	8008df4 <SCSI_ProcessCmd+0x2e0>
 8008b66:	2b5a      	cmp	r3, #90	; 0x5a
 8008b68:	f200 8144 	bhi.w	8008df4 <SCSI_ProcessCmd+0x2e0>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <SCSI_ProcessCmd+0x60>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008ce7 	.word	0x08008ce7
 8008b78:	08008df5 	.word	0x08008df5
 8008b7c:	08008df5 	.word	0x08008df5
 8008b80:	08008cf9 	.word	0x08008cf9
 8008b84:	08008df5 	.word	0x08008df5
 8008b88:	08008df5 	.word	0x08008df5
 8008b8c:	08008df5 	.word	0x08008df5
 8008b90:	08008df5 	.word	0x08008df5
 8008b94:	08008df5 	.word	0x08008df5
 8008b98:	08008df5 	.word	0x08008df5
 8008b9c:	08008df5 	.word	0x08008df5
 8008ba0:	08008df5 	.word	0x08008df5
 8008ba4:	08008df5 	.word	0x08008df5
 8008ba8:	08008df5 	.word	0x08008df5
 8008bac:	08008df5 	.word	0x08008df5
 8008bb0:	08008df5 	.word	0x08008df5
 8008bb4:	08008df5 	.word	0x08008df5
 8008bb8:	08008df5 	.word	0x08008df5
 8008bbc:	08008d0b 	.word	0x08008d0b
 8008bc0:	08008df5 	.word	0x08008df5
 8008bc4:	08008df5 	.word	0x08008df5
 8008bc8:	08008df5 	.word	0x08008df5
 8008bcc:	08008df5 	.word	0x08008df5
 8008bd0:	08008df5 	.word	0x08008df5
 8008bd4:	08008df5 	.word	0x08008df5
 8008bd8:	08008df5 	.word	0x08008df5
 8008bdc:	08008d41 	.word	0x08008d41
 8008be0:	08008d1d 	.word	0x08008d1d
 8008be4:	08008df5 	.word	0x08008df5
 8008be8:	08008df5 	.word	0x08008df5
 8008bec:	08008d2f 	.word	0x08008d2f
 8008bf0:	08008df5 	.word	0x08008df5
 8008bf4:	08008df5 	.word	0x08008df5
 8008bf8:	08008df5 	.word	0x08008df5
 8008bfc:	08008df5 	.word	0x08008df5
 8008c00:	08008d65 	.word	0x08008d65
 8008c04:	08008df5 	.word	0x08008df5
 8008c08:	08008d77 	.word	0x08008d77
 8008c0c:	08008df5 	.word	0x08008df5
 8008c10:	08008df5 	.word	0x08008df5
 8008c14:	08008d9b 	.word	0x08008d9b
 8008c18:	08008df5 	.word	0x08008df5
 8008c1c:	08008dbf 	.word	0x08008dbf
 8008c20:	08008df5 	.word	0x08008df5
 8008c24:	08008df5 	.word	0x08008df5
 8008c28:	08008df5 	.word	0x08008df5
 8008c2c:	08008df5 	.word	0x08008df5
 8008c30:	08008de3 	.word	0x08008de3
 8008c34:	08008df5 	.word	0x08008df5
 8008c38:	08008df5 	.word	0x08008df5
 8008c3c:	08008df5 	.word	0x08008df5
 8008c40:	08008df5 	.word	0x08008df5
 8008c44:	08008df5 	.word	0x08008df5
 8008c48:	08008df5 	.word	0x08008df5
 8008c4c:	08008df5 	.word	0x08008df5
 8008c50:	08008df5 	.word	0x08008df5
 8008c54:	08008df5 	.word	0x08008df5
 8008c58:	08008df5 	.word	0x08008df5
 8008c5c:	08008df5 	.word	0x08008df5
 8008c60:	08008df5 	.word	0x08008df5
 8008c64:	08008df5 	.word	0x08008df5
 8008c68:	08008df5 	.word	0x08008df5
 8008c6c:	08008df5 	.word	0x08008df5
 8008c70:	08008df5 	.word	0x08008df5
 8008c74:	08008df5 	.word	0x08008df5
 8008c78:	08008df5 	.word	0x08008df5
 8008c7c:	08008df5 	.word	0x08008df5
 8008c80:	08008df5 	.word	0x08008df5
 8008c84:	08008df5 	.word	0x08008df5
 8008c88:	08008df5 	.word	0x08008df5
 8008c8c:	08008df5 	.word	0x08008df5
 8008c90:	08008df5 	.word	0x08008df5
 8008c94:	08008df5 	.word	0x08008df5
 8008c98:	08008df5 	.word	0x08008df5
 8008c9c:	08008df5 	.word	0x08008df5
 8008ca0:	08008df5 	.word	0x08008df5
 8008ca4:	08008df5 	.word	0x08008df5
 8008ca8:	08008df5 	.word	0x08008df5
 8008cac:	08008df5 	.word	0x08008df5
 8008cb0:	08008df5 	.word	0x08008df5
 8008cb4:	08008df5 	.word	0x08008df5
 8008cb8:	08008df5 	.word	0x08008df5
 8008cbc:	08008df5 	.word	0x08008df5
 8008cc0:	08008df5 	.word	0x08008df5
 8008cc4:	08008df5 	.word	0x08008df5
 8008cc8:	08008df5 	.word	0x08008df5
 8008ccc:	08008df5 	.word	0x08008df5
 8008cd0:	08008df5 	.word	0x08008df5
 8008cd4:	08008df5 	.word	0x08008df5
 8008cd8:	08008df5 	.word	0x08008df5
 8008cdc:	08008d53 	.word	0x08008d53
 8008ce0:	2b9e      	cmp	r3, #158	; 0x9e
 8008ce2:	d051      	beq.n	8008d88 <SCSI_ProcessCmd+0x274>
 8008ce4:	e086      	b.n	8008df4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4619      	mov	r1, r3
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f893 	bl	8008e18 <SCSI_TestUnitReady>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf6:	e089      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fb70 	bl	80093e4 <SCSI_RequestSense>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75fb      	strb	r3, [r7, #23]
      break;
 8008d08:	e080      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f8db 	bl	8008ecc <SCSI_Inquiry>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1a:	e077      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	4619      	mov	r1, r3
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fc2c 	bl	8009580 <SCSI_StartStopUnit>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2c:	e06e      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fc78 	bl	800962a <SCSI_AllowPreventRemovable>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3e:	e065      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	4619      	mov	r1, r3
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 faec 	bl	8009324 <SCSI_ModeSense6>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d50:	e05c      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4619      	mov	r1, r3
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fb13 	bl	8009384 <SCSI_ModeSense10>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]
      break;
 8008d62:	e053      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 fa5e 	bl	800922c <SCSI_ReadFormatCapacity>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
      break;
 8008d74:	e04a      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f923 	bl	8008fc8 <SCSI_ReadCapacity10>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]
      break;
 8008d86:	e041      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f998 	bl	80090c4 <SCSI_ReadCapacity16>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]
      break;
 8008d98:	e038      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fc6f 	bl	8009684 <SCSI_Read10>
 8008da6:	4603      	mov	r3, r0
 8008da8:	75fb      	strb	r3, [r7, #23]
      break;
 8008daa:	e02f      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4619      	mov	r1, r3
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 fd10 	bl	80097d8 <SCSI_Read12>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	e026      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fdbb 	bl	8009940 <SCSI_Write10>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dce:	e01d      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fe88 	bl	8009aec <SCSI_Write12>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
      break;
 8008de0:	e014      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 ff65 	bl	8009cb8 <SCSI_Verify10>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
      break;
 8008df2:	e00b      	b.n	8008e0c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008df4:	7af9      	ldrb	r1, [r7, #11]
 8008df6:	2320      	movs	r3, #32
 8008df8:	2205      	movs	r2, #5
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fb75 	bl	80094ea <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2202      	movs	r2, #2
 8008e04:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8008e06:	23ff      	movs	r3, #255	; 0xff
 8008e08:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0a:	bf00      	nop
  }

  return ret;
 8008e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	460b      	mov	r3, r1
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	32b0      	adds	r2, #176	; 0xb0
 8008e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8008e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e40:	e03f      	b.n	8008ec2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008e52:	2320      	movs	r3, #32
 8008e54:	2205      	movs	r2, #5
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fb47 	bl	80094ea <SCSI_SenseCode>

    return -1;
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	e02f      	b.n	8008ec2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d10b      	bne.n	8008e84 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008e6c:	7af9      	ldrb	r1, [r7, #11]
 8008e6e:	233a      	movs	r3, #58	; 0x3a
 8008e70:	2202      	movs	r2, #2
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fb39 	bl	80094ea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2205      	movs	r2, #5
 8008e7c:	721a      	strb	r2, [r3, #8]
    return -1;
 8008e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e82:	e01e      	b.n	8008ec2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	33b0      	adds	r3, #176	; 0xb0
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	7afa      	ldrb	r2, [r7, #11]
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008ea2:	7af9      	ldrb	r1, [r7, #11]
 8008ea4:	233a      	movs	r3, #58	; 0x3a
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fb1e 	bl	80094ea <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	721a      	strb	r2, [r3, #8]

    return -1;
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb8:	e003      	b.n	8008ec2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	60da      	str	r2, [r3, #12]

  return 0;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	32b0      	adds	r2, #176	; 0xb0
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef4:	e05f      	b.n	8008fb6 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008f06:	2320      	movs	r3, #32
 8008f08:	2205      	movs	r2, #5
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 faed 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8008f10:	f04f 33ff 	mov.w	r3, #4294967295
 8008f14:	e04f      	b.n	8008fb6 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d020      	beq.n	8008f66 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3302      	adds	r3, #2
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008f2e:	2206      	movs	r2, #6
 8008f30:	4923      	ldr	r1, [pc, #140]	; (8008fc0 <SCSI_Inquiry+0xf4>)
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f001 f846 	bl	8009fc4 <SCSI_UpdateBotData>
 8008f38:	e03c      	b.n	8008fb4 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b80      	cmp	r3, #128	; 0x80
 8008f42:	d105      	bne.n	8008f50 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8008f44:	2208      	movs	r2, #8
 8008f46:	491f      	ldr	r1, [pc, #124]	; (8008fc4 <SCSI_Inquiry+0xf8>)
 8008f48:	69b8      	ldr	r0, [r7, #24]
 8008f4a:	f001 f83b 	bl	8009fc4 <SCSI_UpdateBotData>
 8008f4e:	e031      	b.n	8008fb4 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008f56:	2324      	movs	r3, #36	; 0x24
 8008f58:	2205      	movs	r2, #5
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fac5 	bl	80094ea <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8008f60:	f04f 33ff 	mov.w	r3, #4294967295
 8008f64:	e027      	b.n	8008fb6 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	33b0      	adds	r3, #176	; 0xb0
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008f76:	69d9      	ldr	r1, [r3, #28]
 8008f78:	7afa      	ldrb	r2, [r7, #11]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008f82:	440b      	add	r3, r1
 8008f84:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	3305      	adds	r3, #5
 8008f90:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3304      	adds	r3, #4
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	8bfa      	ldrh	r2, [r7, #30]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d303      	bcc.n	8008fa8 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008fa8:	8bfb      	ldrh	r3, [r7, #30]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6979      	ldr	r1, [r7, #20]
 8008fae:	69b8      	ldr	r0, [r7, #24]
 8008fb0:	f001 f808 	bl	8009fc4 <SCSI_UpdateBotData>
  }

  return 0;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000170 	.word	0x20000170
 8008fc4:	20000178 	.word	0x20000178

08008fc8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	32b0      	adds	r2, #176	; 0xb0
 8008fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8008fec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff0:	e064      	b.n	80090bc <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	33b0      	adds	r3, #176	; 0xb0
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8009010:	7af8      	ldrb	r0, [r7, #11]
 8009012:	4798      	blx	r3
 8009014:	4603      	mov	r3, r0
 8009016:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009018:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <SCSI_ReadCapacity10+0x62>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009026:	2b02      	cmp	r3, #2
 8009028:	d108      	bne.n	800903c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800902a:	7af9      	ldrb	r1, [r7, #11]
 800902c:	233a      	movs	r3, #58	; 0x3a
 800902e:	2202      	movs	r2, #2
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fa5a 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009036:	f04f 33ff 	mov.w	r3, #4294967295
 800903a:	e03f      	b.n	80090bc <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009042:	3b01      	subs	r3, #1
 8009044:	0e1b      	lsrs	r3, r3, #24
 8009046:	b2da      	uxtb	r2, r3
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009052:	3b01      	subs	r3, #1
 8009054:	0c1b      	lsrs	r3, r3, #16
 8009056:	b2da      	uxtb	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009062:	3b01      	subs	r3, #1
 8009064:	0a1b      	lsrs	r3, r3, #8
 8009066:	b2da      	uxtb	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009082:	161b      	asrs	r3, r3, #24
 8009084:	b2da      	uxtb	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009090:	141b      	asrs	r3, r3, #16
 8009092:	b2da      	uxtb	r2, r3
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2208      	movs	r2, #8
 80090b8:	60da      	str	r2, [r3, #12]

  return 0;
 80090ba:	2300      	movs	r3, #0

}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	460b      	mov	r3, r1
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	32b0      	adds	r2, #176	; 0xb0
 80090dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	e09a      	b.n	8009224 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	33b0      	adds	r3, #176	; 0xb0
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800910c:	7af8      	ldrb	r0, [r7, #11]
 800910e:	4798      	blx	r3
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d104      	bne.n	8009126 <SCSI_ReadCapacity16+0x62>
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009122:	2b02      	cmp	r3, #2
 8009124:	d108      	bne.n	8009138 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009126:	7af9      	ldrb	r1, [r7, #11]
 8009128:	233a      	movs	r3, #58	; 0x3a
 800912a:	2202      	movs	r2, #2
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 f9dc 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	e075      	b.n	8009224 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	330a      	adds	r3, #10
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	330b      	adds	r3, #11
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009148:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	330c      	adds	r3, #12
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009152:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	320d      	adds	r2, #13
 8009158:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800915a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009160:	2300      	movs	r3, #0
 8009162:	61fb      	str	r3, [r7, #28]
 8009164:	e008      	b.n	8009178 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	3310      	adds	r3, #16
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3301      	adds	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	429a      	cmp	r2, r3
 8009180:	d3f1      	bcc.n	8009166 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009188:	3b01      	subs	r3, #1
 800918a:	0e1b      	lsrs	r3, r3, #24
 800918c:	b2da      	uxtb	r2, r3
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009198:	3b01      	subs	r3, #1
 800919a:	0c1b      	lsrs	r3, r3, #16
 800919c:	b2da      	uxtb	r2, r3
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80091a8:	3b01      	subs	r3, #1
 80091aa:	0a1b      	lsrs	r3, r3, #8
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091c8:	161b      	asrs	r3, r3, #24
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091d6:	141b      	asrs	r3, r3, #16
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	330a      	adds	r3, #10
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	330b      	adds	r3, #11
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800920a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	330c      	adds	r3, #12
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009214:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	320d      	adds	r2, #13
 800921a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800921c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	60da      	str	r2, [r3, #12]

  return 0;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	460b      	mov	r3, r1
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	32b0      	adds	r2, #176	; 0xb0
 8009244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009248:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	e061      	b.n	800931a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	33b0      	adds	r3, #176	; 0xb0
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f107 0214 	add.w	r2, r7, #20
 800926c:	f107 0110 	add.w	r1, r7, #16
 8009270:	7af8      	ldrb	r0, [r7, #11]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <SCSI_ReadFormatCapacity+0x5e>
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009286:	2b02      	cmp	r3, #2
 8009288:	d108      	bne.n	800929c <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800928a:	7af9      	ldrb	r1, [r7, #11]
 800928c:	233a      	movs	r3, #58	; 0x3a
 800928e:	2202      	movs	r2, #2
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f92a 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	e03e      	b.n	800931a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800929c:	2300      	movs	r3, #0
 800929e:	83fb      	strh	r3, [r7, #30]
 80092a0:	e007      	b.n	80092b2 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80092a2:	8bfb      	ldrh	r3, [r7, #30]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	4413      	add	r3, r2
 80092a8:	2200      	movs	r2, #0
 80092aa:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80092ac:	8bfb      	ldrh	r3, [r7, #30]
 80092ae:	3301      	adds	r3, #1
 80092b0:	83fb      	strh	r3, [r7, #30]
 80092b2:	8bfb      	ldrh	r3, [r7, #30]
 80092b4:	2b0b      	cmp	r3, #11
 80092b6:	d9f4      	bls.n	80092a2 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2208      	movs	r2, #8
 80092bc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	0e1b      	lsrs	r3, r3, #24
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	0c1b      	lsrs	r3, r3, #16
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2202      	movs	r2, #2
 80092f2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80092f4:	8abb      	ldrh	r3, [r7, #20]
 80092f6:	141b      	asrs	r3, r3, #16
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80092fe:	8abb      	ldrh	r3, [r7, #20]
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	b29b      	uxth	r3, r3
 8009304:	b2da      	uxtb	r2, r3
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800930a:	8abb      	ldrh	r3, [r7, #20]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	220c      	movs	r2, #12
 8009316:	60da      	str	r2, [r3, #12]

  return 0;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	32b0      	adds	r2, #176	; 0xb0
 800933c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009340:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009342:	2317      	movs	r3, #23
 8009344:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800934c:	f04f 33ff 	mov.w	r3, #4294967295
 8009350:	e011      	b.n	8009376 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3304      	adds	r3, #4
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	b29b      	uxth	r3, r3
 800935a:	8afa      	ldrh	r2, [r7, #22]
 800935c:	429a      	cmp	r2, r3
 800935e:	d303      	bcc.n	8009368 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009368:	8afb      	ldrh	r3, [r7, #22]
 800936a:	461a      	mov	r2, r3
 800936c:	4904      	ldr	r1, [pc, #16]	; (8009380 <SCSI_ModeSense6+0x5c>)
 800936e:	6938      	ldr	r0, [r7, #16]
 8009370:	f000 fe28 	bl	8009fc4 <SCSI_UpdateBotData>

  return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000180 	.word	0x20000180

08009384 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	460b      	mov	r3, r1
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	32b0      	adds	r2, #176	; 0xb0
 800939c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80093a2:	231b      	movs	r3, #27
 80093a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295
 80093b0:	e011      	b.n	80093d6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	8afa      	ldrh	r2, [r7, #22]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d303      	bcc.n	80093c8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3308      	adds	r3, #8
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80093c8:	8afb      	ldrh	r3, [r7, #22]
 80093ca:	461a      	mov	r2, r3
 80093cc:	4904      	ldr	r1, [pc, #16]	; (80093e0 <SCSI_ModeSense10+0x5c>)
 80093ce:	6938      	ldr	r0, [r7, #16]
 80093d0:	f000 fdf8 	bl	8009fc4 <SCSI_UpdateBotData>

  return 0;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000198 	.word	0x20000198

080093e4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	460b      	mov	r3, r1
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	32b0      	adds	r2, #176	; 0xb0
 80093fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009400:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009408:	f04f 33ff 	mov.w	r3, #4294967295
 800940c:	e069      	b.n	80094e2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800941e:	2320      	movs	r3, #32
 8009420:	2205      	movs	r2, #5
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f861 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	e059      	b.n	80094e2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
 8009432:	e007      	b.n	8009444 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	3301      	adds	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	2b11      	cmp	r3, #17
 8009448:	d9f4      	bls.n	8009434 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2270      	movs	r2, #112	; 0x70
 800944e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	220c      	movs	r2, #12
 8009454:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009462:	429a      	cmp	r2, r3
 8009464:	d02e      	beq.n	80094c4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800946c:	461a      	mov	r2, r3
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3248      	adds	r2, #72	; 0x48
 8009472:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	3348      	adds	r3, #72	; 0x48
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	4413      	add	r3, r2
 8009488:	791a      	ldrb	r2, [r3, #4]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	3348      	adds	r3, #72	; 0x48
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	4413      	add	r3, r2
 800949c:	795a      	ldrb	r2, [r3, #5]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80094a8:	3301      	adds	r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d103      	bne.n	80094c4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2212      	movs	r2, #18
 80094c8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3304      	adds	r3, #4
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b12      	cmp	r3, #18
 80094d2:	d805      	bhi.n	80094e0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	461a      	mov	r2, r3
 80094f8:	4603      	mov	r3, r0
 80094fa:	70fb      	strb	r3, [r7, #3]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70bb      	strb	r3, [r7, #2]
 8009500:	4613      	mov	r3, r2
 8009502:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32b0      	adds	r2, #176	; 0xb0
 800950e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009512:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d02c      	beq.n	8009574 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009520:	461a      	mov	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3248      	adds	r2, #72	; 0x48
 8009526:	78b9      	ldrb	r1, [r7, #2]
 8009528:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	3348      	adds	r3, #72	; 0x48
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	787a      	ldrb	r2, [r7, #1]
 800953c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	3348      	adds	r3, #72	; 0x48
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4413      	add	r3, r2
 800954c:	2200      	movs	r2, #0
 800954e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009556:	3301      	adds	r3, #1
 8009558:	b2da      	uxtb	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009566:	2b04      	cmp	r3, #4
 8009568:	d105      	bne.n	8009576 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8009572:	e000      	b.n	8009576 <SCSI_SenseCode+0x8c>
    return;
 8009574:	bf00      	nop
  }
}
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	460b      	mov	r3, r1
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	32b0      	adds	r2, #176	; 0xb0
 8009598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80095a4:	f04f 33ff 	mov.w	r3, #4294967295
 80095a8:	e03b      	b.n	8009622 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d10f      	bne.n	80095d4 <SCSI_StartStopUnit+0x54>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f003 0303 	and.w	r3, r3, #3
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d108      	bne.n	80095d4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80095c2:	7af9      	ldrb	r1, [r7, #11]
 80095c4:	2324      	movs	r3, #36	; 0x24
 80095c6:	2205      	movs	r2, #5
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7ff ff8e 	bl	80094ea <SCSI_SenseCode>

    return -1;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	e026      	b.n	8009622 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3304      	adds	r3, #4
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d104      	bne.n	80095ec <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80095ea:	e016      	b.n	800961a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3304      	adds	r3, #4
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d104      	bne.n	8009604 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009602:	e00a      	b.n	800961a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	2b03      	cmp	r3, #3
 8009610:	d103      	bne.n	800961a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2200      	movs	r2, #0
 800961e:	60da      	str	r2, [r3, #12]

  return 0;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800962a:	b480      	push	{r7}
 800962c:	b087      	sub	sp, #28
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	460b      	mov	r3, r1
 8009634:	607a      	str	r2, [r7, #4]
 8009636:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	32b0      	adds	r2, #176	; 0xb0
 8009642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009646:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800964e:	f04f 33ff 	mov.w	r3, #4294967295
 8009652:	e011      	b.n	8009678 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d104      	bne.n	8009668 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009666:	e003      	b.n	8009670 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2200      	movs	r2, #0
 8009674:	60da      	str	r2, [r3, #12]

  return 0;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	371c      	adds	r7, #28
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	460b      	mov	r3, r1
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	32b0      	adds	r2, #176	; 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <SCSI_Read10+0x2a>
  {
    return -1;
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ac:	e090      	b.n	80097d0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	7a1b      	ldrb	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f040 8082 	bne.w	80097bc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	db0a      	blt.n	80096da <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80096ca:	2320      	movs	r3, #32
 80096cc:	2205      	movs	r2, #5
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ff0b 	bl	80094ea <SCSI_SenseCode>
      return -1;
 80096d4:	f04f 33ff 	mov.w	r3, #4294967295
 80096d8:	e07a      	b.n	80097d0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d108      	bne.n	80096f6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80096e4:	7af9      	ldrb	r1, [r7, #11]
 80096e6:	233a      	movs	r3, #58	; 0x3a
 80096e8:	2202      	movs	r2, #2
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff fefd 	bl	80094ea <SCSI_SenseCode>

      return -1;
 80096f0:	f04f 33ff 	mov.w	r3, #4294967295
 80096f4:	e06c      	b.n	80097d0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	33b0      	adds	r3, #176	; 0xb0
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	7afa      	ldrb	r2, [r7, #11]
 800970a:	4610      	mov	r0, r2
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d008      	beq.n	8009726 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009714:	7af9      	ldrb	r1, [r7, #11]
 8009716:	233a      	movs	r3, #58	; 0x3a
 8009718:	2202      	movs	r2, #2
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff fee5 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009720:	f04f 33ff 	mov.w	r3, #4294967295
 8009724:	e054      	b.n	80097d0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3302      	adds	r3, #2
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3303      	adds	r3, #3
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009736:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3304      	adds	r3, #4
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009740:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	3205      	adds	r2, #5
 8009746:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009748:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3307      	adds	r3, #7
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	3208      	adds	r2, #8
 800975c:	7812      	ldrb	r2, [r2, #0]
 800975e:	431a      	orrs	r2, r3
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009772:	7af9      	ldrb	r1, [r7, #11]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 fadc 	bl	8009d32 <SCSI_CheckAddressRange>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	da02      	bge.n	8009786 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009780:	f04f 33ff 	mov.w	r3, #4294967295
 8009784:	e024      	b.n	80097d0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	429a      	cmp	r2, r3
 800979e:	d00a      	beq.n	80097b6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80097a6:	2320      	movs	r3, #32
 80097a8:	2205      	movs	r2, #5
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fe9d 	bl	80094ea <SCSI_SenseCode>
      return -1;
 80097b0:	f04f 33ff 	mov.w	r3, #4294967295
 80097b4:	e00c      	b.n	80097d0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2202      	movs	r2, #2
 80097ba:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80097c4:	7afb      	ldrb	r3, [r7, #11]
 80097c6:	4619      	mov	r1, r3
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fadf 	bl	8009d8c <SCSI_ProcessRead>
 80097ce:	4603      	mov	r3, r0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	460b      	mov	r3, r1
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	32b0      	adds	r2, #176	; 0xb0
 80097f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d102      	bne.n	8009802 <SCSI_Read12+0x2a>
  {
    return -1;
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	e09a      	b.n	8009938 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	7a1b      	ldrb	r3, [r3, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f040 808c 	bne.w	8009924 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009812:	b25b      	sxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	db0a      	blt.n	800982e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800981e:	2320      	movs	r3, #32
 8009820:	2205      	movs	r2, #5
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff fe61 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009828:	f04f 33ff 	mov.w	r3, #4294967295
 800982c:	e084      	b.n	8009938 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009834:	2b02      	cmp	r3, #2
 8009836:	d108      	bne.n	800984a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009838:	7af9      	ldrb	r1, [r7, #11]
 800983a:	233a      	movs	r3, #58	; 0x3a
 800983c:	2202      	movs	r2, #2
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fe53 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	e076      	b.n	8009938 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	33b0      	adds	r3, #176	; 0xb0
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	7afa      	ldrb	r2, [r7, #11]
 800985e:	4610      	mov	r0, r2
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d008      	beq.n	800987a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009868:	7af9      	ldrb	r1, [r7, #11]
 800986a:	233a      	movs	r3, #58	; 0x3a
 800986c:	2202      	movs	r2, #2
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fe3b 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009874:	f04f 33ff 	mov.w	r3, #4294967295
 8009878:	e05e      	b.n	8009938 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3302      	adds	r3, #2
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3303      	adds	r3, #3
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800988a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3304      	adds	r3, #4
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009894:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	3205      	adds	r2, #5
 800989a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800989c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3306      	adds	r3, #6
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3307      	adds	r3, #7
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80098b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3308      	adds	r3, #8
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80098be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	3209      	adds	r2, #9
 80098c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80098c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80098da:	7af9      	ldrb	r1, [r7, #11]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fa28 	bl	8009d32 <SCSI_CheckAddressRange>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da02      	bge.n	80098ee <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ec:	e024      	b.n	8009938 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80098fa:	6979      	ldr	r1, [r7, #20]
 80098fc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8009900:	fb01 f303 	mul.w	r3, r1, r3
 8009904:	429a      	cmp	r2, r3
 8009906:	d00a      	beq.n	800991e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800990e:	2320      	movs	r3, #32
 8009910:	2205      	movs	r2, #5
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fde9 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	e00c      	b.n	8009938 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2202      	movs	r2, #2
 8009922:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800992a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	4619      	mov	r1, r3
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fa2b 	bl	8009d8c <SCSI_ProcessRead>
 8009936:	4603      	mov	r3, r0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	460b      	mov	r3, r1
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	32b0      	adds	r2, #176	; 0xb0
 8009958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <SCSI_Write10+0x2a>
  {
    return -1;
 8009964:	f04f 33ff 	mov.w	r3, #4294967295
 8009968:	e0ba      	b.n	8009ae0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	7a1b      	ldrb	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 80b0 	bne.w	8009ad4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009984:	2320      	movs	r3, #32
 8009986:	2205      	movs	r2, #5
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7ff fdae 	bl	80094ea <SCSI_SenseCode>
      return -1;
 800998e:	f04f 33ff 	mov.w	r3, #4294967295
 8009992:	e0a5      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800999a:	b25b      	sxtb	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	da0a      	bge.n	80099b6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80099a6:	2320      	movs	r3, #32
 80099a8:	2205      	movs	r2, #5
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fd9d 	bl	80094ea <SCSI_SenseCode>
      return -1;
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	e094      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	33b0      	adds	r3, #176	; 0xb0
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	7afa      	ldrb	r2, [r7, #11]
 80099ca:	4610      	mov	r0, r2
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80099d4:	7af9      	ldrb	r1, [r7, #11]
 80099d6:	233a      	movs	r3, #58	; 0x3a
 80099d8:	2202      	movs	r2, #2
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff fd85 	bl	80094ea <SCSI_SenseCode>
      return -1;
 80099e0:	f04f 33ff 	mov.w	r3, #4294967295
 80099e4:	e07c      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	33b0      	adds	r3, #176	; 0xb0
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	7afa      	ldrb	r2, [r7, #11]
 80099fa:	4610      	mov	r0, r2
 80099fc:	4798      	blx	r3
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d008      	beq.n	8009a16 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009a04:	7af9      	ldrb	r1, [r7, #11]
 8009a06:	2327      	movs	r3, #39	; 0x27
 8009a08:	2202      	movs	r2, #2
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff fd6d 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009a10:	f04f 33ff 	mov.w	r3, #4294967295
 8009a14:	e064      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3302      	adds	r3, #2
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3303      	adds	r3, #3
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009a26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009a30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	3205      	adds	r2, #5
 8009a36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009a38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3307      	adds	r3, #7
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	3208      	adds	r2, #8
 8009a4c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009a62:	7af9      	ldrb	r1, [r7, #11]
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f964 	bl	8009d32 <SCSI_CheckAddressRange>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da02      	bge.n	8009a76 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009a70:	f04f 33ff 	mov.w	r3, #4294967295
 8009a74:	e034      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
 8009a86:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d00a      	beq.n	8009aaa <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009a9a:	2320      	movs	r3, #32
 8009a9c:	2205      	movs	r2, #5
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fd23 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	e01a      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab0:	bf28      	it	cs
 8009ab2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009ab6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2201      	movs	r2, #1
 8009abc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <SCSI_Write10+0x1a8>)
 8009ac0:	7819      	ldrb	r1, [r3, #0]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f103 0210 	add.w	r2, r3, #16
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f005 f98e 	bl	800edec <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e005      	b.n	8009ae0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f9dd 	bl	8009e98 <SCSI_ProcessWrite>
 8009ade:	4603      	mov	r3, r0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	2000016f 	.word	0x2000016f

08009aec <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	460b      	mov	r3, r1
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	32b0      	adds	r2, #176	; 0xb0
 8009b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b08:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <SCSI_Write12+0x2a>
  {
    return -1;
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295
 8009b14:	e0ca      	b.n	8009cac <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	7a1b      	ldrb	r3, [r3, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f040 80c0 	bne.w	8009ca0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b30:	2320      	movs	r3, #32
 8009b32:	2205      	movs	r2, #5
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fcd8 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3e:	e0b5      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da0a      	bge.n	8009b62 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b52:	2320      	movs	r3, #32
 8009b54:	2205      	movs	r2, #5
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fcc7 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	e0a4      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	33b0      	adds	r3, #176	; 0xb0
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	7afa      	ldrb	r2, [r7, #11]
 8009b76:	4610      	mov	r0, r2
 8009b78:	4798      	blx	r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b80:	7af9      	ldrb	r1, [r7, #11]
 8009b82:	233a      	movs	r3, #58	; 0x3a
 8009b84:	2202      	movs	r2, #2
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7ff fcaf 	bl	80094ea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2205      	movs	r2, #5
 8009b90:	721a      	strb	r2, [r3, #8]
      return -1;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295
 8009b96:	e089      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	33b0      	adds	r3, #176	; 0xb0
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	7afa      	ldrb	r2, [r7, #11]
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009bb6:	7af9      	ldrb	r1, [r7, #11]
 8009bb8:	2327      	movs	r3, #39	; 0x27
 8009bba:	2202      	movs	r2, #2
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff fc94 	bl	80094ea <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2205      	movs	r2, #5
 8009bc6:	721a      	strb	r2, [r3, #8]
      return -1;
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bcc:	e06e      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3303      	adds	r3, #3
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009be8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	3205      	adds	r2, #5
 8009bee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009bf0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3306      	adds	r3, #6
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3307      	adds	r3, #7
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009c08:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009c12:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	3209      	adds	r2, #9
 8009c18:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009c1a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009c2e:	7af9      	ldrb	r1, [r7, #11]
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f87e 	bl	8009d32 <SCSI_CheckAddressRange>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da02      	bge.n	8009c42 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	e034      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009c4e:	fb02 f303 	mul.w	r3, r2, r3
 8009c52:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d00a      	beq.n	8009c76 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009c66:	2320      	movs	r3, #32
 8009c68:	2205      	movs	r2, #5
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fc3d 	bl	80094ea <SCSI_SenseCode>
      return -1;
 8009c70:	f04f 33ff 	mov.w	r3, #4294967295
 8009c74:	e01a      	b.n	8009cac <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c7c:	bf28      	it	cs
 8009c7e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009c82:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2201      	movs	r2, #1
 8009c88:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009c8a:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <SCSI_Write12+0x1c8>)
 8009c8c:	7819      	ldrb	r1, [r3, #0]
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f103 0210 	add.w	r2, r3, #16
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f005 f8a8 	bl	800edec <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e005      	b.n	8009cac <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f8f7 	bl	8009e98 <SCSI_ProcessWrite>
 8009caa:	4603      	mov	r3, r0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	2000016f 	.word	0x2000016f

08009cb8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	32b0      	adds	r2, #176	; 0xb0
 8009cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <SCSI_Verify10+0x2a>
  {
    return -1;
 8009cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce0:	e023      	b.n	8009d2a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009cf0:	7af9      	ldrb	r1, [r7, #11]
 8009cf2:	2324      	movs	r3, #36	; 0x24
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff fbf7 	bl	80094ea <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009d00:	e013      	b.n	8009d2a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009d0e:	7af9      	ldrb	r1, [r7, #11]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f80e 	bl	8009d32 <SCSI_CheckAddressRange>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da02      	bge.n	8009d22 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	e003      	b.n	8009d2a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2200      	movs	r2, #0
 8009d26:	60da      	str	r2, [r3, #12]

  return 0;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b086      	sub	sp, #24
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	32b0      	adds	r2, #176	; 0xb0
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	e011      	b.n	8009d82 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	441a      	add	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d908      	bls.n	8009d80 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009d6e:	7af9      	ldrb	r1, [r7, #11]
 8009d70:	2321      	movs	r3, #33	; 0x21
 8009d72:	2205      	movs	r2, #5
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff fbb8 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7e:	e000      	b.n	8009d82 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	32b0      	adds	r2, #176	; 0xb0
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	e06a      	b.n	8009e8a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dcc:	bf28      	it	cs
 8009dce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009dd2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	33b0      	adds	r3, #176	; 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	691c      	ldr	r4, [r3, #16]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f103 0110 	add.w	r1, r3, #16
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009df8:	4618      	mov	r0, r3
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	78f8      	ldrb	r0, [r7, #3]
 8009e04:	47a0      	blx	r4
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da08      	bge.n	8009e1e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009e0c:	78f9      	ldrb	r1, [r7, #3]
 8009e0e:	2311      	movs	r3, #17
 8009e10:	2204      	movs	r2, #4
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fb69 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009e18:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1c:	e035      	b.n	8009e8a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009e1e:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <SCSI_ProcessRead+0x108>)
 8009e20:	7819      	ldrb	r1, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f103 0210 	add.w	r2, r3, #16
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f004 ffa6 	bl	800ed7c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e44:	441a      	add	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009e58:	4619      	mov	r1, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e60:	1ad2      	subs	r2, r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	1ad2      	subs	r2, r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d102      	bne.n	8009e88 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2203      	movs	r2, #3
 8009e86:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd90      	pop	{r4, r7, pc}
 8009e92:	bf00      	nop
 8009e94:	2000016e 	.word	0x2000016e

08009e98 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32b0      	adds	r2, #176	; 0xb0
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d102      	bne.n	8009ec0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8009eba:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebe:	e07a      	b.n	8009fb6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed8:	bf28      	it	cs
 8009eda:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009ede:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	33b0      	adds	r3, #176	; 0xb0
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	695c      	ldr	r4, [r3, #20]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f103 0110 	add.w	r1, r3, #16
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009f04:	4618      	mov	r0, r3
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	78f8      	ldrb	r0, [r7, #3]
 8009f10:	47a0      	blx	r4
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	da08      	bge.n	8009f2a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009f18:	78f9      	ldrb	r1, [r7, #3]
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff fae3 	bl	80094ea <SCSI_SenseCode>
    return -1;
 8009f24:	f04f 33ff 	mov.w	r3, #4294967295
 8009f28:	e045      	b.n	8009fb6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009f36:	4619      	mov	r1, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f3e:	441a      	add	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009f52:	4619      	mov	r1, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	1ad2      	subs	r2, r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7fe fd12 	bl	80089a8 <MSC_BOT_SendCSW>
 8009f84:	e016      	b.n	8009fb4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9a:	bf28      	it	cs
 8009f9c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009fa0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <SCSI_ProcessWrite+0x128>)
 8009fa4:	7819      	ldrb	r1, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f103 0210 	add.w	r2, r3, #16
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f004 ff1c 	bl	800edec <USBD_LL_PrepareReceive>
  }

  return 0;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd90      	pop	{r4, r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	2000016f 	.word	0x2000016f

08009fc4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe0:	e013      	b.n	800a00a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009fe2:	8afa      	ldrh	r2, [r7, #22]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009fe8:	e00b      	b.n	800a002 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009fea:	8afb      	ldrh	r3, [r7, #22]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009ff0:	8afb      	ldrh	r3, [r7, #22]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	8afb      	ldrh	r3, [r7, #22]
 8009ff8:	7811      	ldrb	r1, [r2, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	460a      	mov	r2, r1
 800a000:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a002:	8afb      	ldrh	r3, [r7, #22]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f0      	bne.n	8009fea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	4613      	mov	r3, r2
 800a022:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e01f      	b.n	800a06e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	79fa      	ldrb	r2, [r7, #7]
 800a060:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f004 fc94 	bl	800e990 <USBD_LL_Init>
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e025      	b.n	800a0da <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	32ae      	adds	r2, #174	; 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00f      	beq.n	800a0ca <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32ae      	adds	r2, #174	; 0xae
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	f107 020e 	add.w	r2, r7, #14
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4798      	blx	r3
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f004 fc9c 	bl	800ea28 <USBD_LL_Start>
 800a0f0:	4603      	mov	r3, r0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a102:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	78fa      	ldrb	r2, [r7, #3]
 800a134:	4611      	mov	r1, r2
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	78fa      	ldrb	r2, [r7, #3]
 800a162:	4611      	mov	r1, r2
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a16e:	2303      	movs	r3, #3
 800a170:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 f939 	bl	800b406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1b0:	f003 031f 	and.w	r3, r3, #31
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d01a      	beq.n	800a1ee <USBD_LL_SetupStage+0x72>
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d822      	bhi.n	800a202 <USBD_LL_SetupStage+0x86>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <USBD_LL_SetupStage+0x4a>
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d00a      	beq.n	800a1da <USBD_LL_SetupStage+0x5e>
 800a1c4:	e01d      	b.n	800a202 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb66 	bl	800a8a0 <USBD_StdDevReq>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e020      	b.n	800a21c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fbce 	bl	800a984 <USBD_StdItfReq>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ec:	e016      	b.n	800a21c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fc30 	bl	800aa5c <USBD_StdEPReq>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a200:	e00c      	b.n	800a21c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a208:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f004 fce5 	bl	800ebe0 <USBD_LL_StallEP>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
      break;
 800a21a:	bf00      	nop
  }

  return ret;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	460b      	mov	r3, r1
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d16e      	bne.n	800a31c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	f040 8098 	bne.w	800a382 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d913      	bls.n	800a286 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	1ad2      	subs	r2, r2, r3
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	4293      	cmp	r3, r2
 800a276:	bf28      	it	cs
 800a278:	4613      	movcs	r3, r2
 800a27a:	461a      	mov	r2, r3
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f001 f998 	bl	800b5b4 <USBD_CtlContinueRx>
 800a284:	e07d      	b.n	800a382 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a28c:	f003 031f 	and.w	r3, r3, #31
 800a290:	2b02      	cmp	r3, #2
 800a292:	d014      	beq.n	800a2be <USBD_LL_DataOutStage+0x98>
 800a294:	2b02      	cmp	r3, #2
 800a296:	d81d      	bhi.n	800a2d4 <USBD_LL_DataOutStage+0xae>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <USBD_LL_DataOutStage+0x7c>
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d003      	beq.n	800a2a8 <USBD_LL_DataOutStage+0x82>
 800a2a0:	e018      	b.n	800a2d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a2a6:	e018      	b.n	800a2da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fa64 	bl	800a780 <USBD_CoreFindIF>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75bb      	strb	r3, [r7, #22]
            break;
 800a2bc:	e00d      	b.n	800a2da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fa66 	bl	800a79a <USBD_CoreFindEP>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	75bb      	strb	r3, [r7, #22]
            break;
 800a2d2:	e002      	b.n	800a2da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	75bb      	strb	r3, [r7, #22]
            break;
 800a2d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2da:	7dbb      	ldrb	r3, [r7, #22]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d119      	bne.n	800a314 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d113      	bne.n	800a314 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2ec:	7dba      	ldrb	r2, [r7, #22]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	32ae      	adds	r2, #174	; 0xae
 800a2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a2fc:	7dba      	ldrb	r2, [r7, #22]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a304:	7dba      	ldrb	r2, [r7, #22]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	32ae      	adds	r2, #174	; 0xae
 800a30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f001 f95e 	bl	800b5d6 <USBD_CtlSendStatus>
 800a31a:	e032      	b.n	800a382 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a322:	b2db      	uxtb	r3, r3
 800a324:	4619      	mov	r1, r3
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fa37 	bl	800a79a <USBD_CoreFindEP>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a330:	7dbb      	ldrb	r3, [r7, #22]
 800a332:	2bff      	cmp	r3, #255	; 0xff
 800a334:	d025      	beq.n	800a382 <USBD_LL_DataOutStage+0x15c>
 800a336:	7dbb      	ldrb	r3, [r7, #22]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d122      	bne.n	800a382 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b03      	cmp	r3, #3
 800a346:	d117      	bne.n	800a378 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a348:	7dba      	ldrb	r2, [r7, #22]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	32ae      	adds	r2, #174	; 0xae
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00f      	beq.n	800a378 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a358:	7dba      	ldrb	r2, [r7, #22]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a360:	7dba      	ldrb	r2, [r7, #22]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	32ae      	adds	r2, #174	; 0xae
 800a366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	7afa      	ldrb	r2, [r7, #11]
 800a36e:	4611      	mov	r1, r2
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	4798      	blx	r3
 800a374:	4603      	mov	r3, r0
 800a376:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	e000      	b.n	800a384 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	460b      	mov	r3, r1
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d16f      	bne.n	800a480 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d15a      	bne.n	800a466 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d914      	bls.n	800a3e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	689a      	ldr	r2, [r3, #8]
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	1ad2      	subs	r2, r2, r3
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f001 f8dd 	bl	800b592 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f004 fd04 	bl	800edec <USBD_LL_PrepareReceive>
 800a3e4:	e03f      	b.n	800a466 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d11c      	bne.n	800a42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d316      	bcc.n	800a42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a408:	429a      	cmp	r2, r3
 800a40a:	d20f      	bcs.n	800a42c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f001 f8be 	bl	800b592 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a41e:	2300      	movs	r3, #0
 800a420:	2200      	movs	r2, #0
 800a422:	2100      	movs	r1, #0
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f004 fce1 	bl	800edec <USBD_LL_PrepareReceive>
 800a42a:	e01c      	b.n	800a466 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b03      	cmp	r3, #3
 800a436:	d10f      	bne.n	800a458 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d009      	beq.n	800a458 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f004 fbc0 	bl	800ebe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f001 f8cb 	bl	800b5fc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d03a      	beq.n	800a4e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff fe42 	bl	800a0fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a47e:	e032      	b.n	800a4e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a480:	7afb      	ldrb	r3, [r7, #11]
 800a482:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a486:	b2db      	uxtb	r3, r3
 800a488:	4619      	mov	r1, r3
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f985 	bl	800a79a <USBD_CoreFindEP>
 800a490:	4603      	mov	r3, r0
 800a492:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	2bff      	cmp	r3, #255	; 0xff
 800a498:	d025      	beq.n	800a4e6 <USBD_LL_DataInStage+0x15a>
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d122      	bne.n	800a4e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d11c      	bne.n	800a4e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4ac:	7dfa      	ldrb	r2, [r7, #23]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	32ae      	adds	r2, #174	; 0xae
 800a4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d014      	beq.n	800a4e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4bc:	7dfa      	ldrb	r2, [r7, #23]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4c4:	7dfa      	ldrb	r2, [r7, #23]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	32ae      	adds	r2, #174	; 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	7afa      	ldrb	r2, [r7, #11]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	4798      	blx	r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4e2:	7dbb      	ldrb	r3, [r7, #22]
 800a4e4:	e000      	b.n	800a4e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d014      	beq.n	800a556 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00e      	beq.n	800a556 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	6852      	ldr	r2, [r2, #4]
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	4611      	mov	r1, r2
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	4798      	blx	r3
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a552:	2303      	movs	r3, #3
 800a554:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a556:	2340      	movs	r3, #64	; 0x40
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f004 fa95 	bl	800ea8c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2240      	movs	r2, #64	; 0x40
 800a56e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	2200      	movs	r2, #0
 800a576:	2180      	movs	r1, #128	; 0x80
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f004 fa87 	bl	800ea8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2240      	movs	r2, #64	; 0x40
 800a588:	621a      	str	r2, [r3, #32]

  return ret;
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	78fa      	ldrb	r2, [r7, #3]
 800a5a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d006      	beq.n	800a5d6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2204      	movs	r2, #4
 800a5da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d106      	bne.n	800a60e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a606:	b2da      	uxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d110      	bne.n	800a652 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32ae      	adds	r2, #174	; 0xae
 800a672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e01c      	b.n	800a6b8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b03      	cmp	r3, #3
 800a688:	d115      	bne.n	800a6b6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	32ae      	adds	r2, #174	; 0xae
 800a694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	32ae      	adds	r2, #174	; 0xae
 800a6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	32ae      	adds	r2, #174	; 0xae
 800a6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e01c      	b.n	800a71c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d115      	bne.n	800a71a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	32ae      	adds	r2, #174	; 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	32ae      	adds	r2, #174	; 0xae
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	4611      	mov	r1, r2
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00e      	beq.n	800a776 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6852      	ldr	r2, [r2, #4]
 800a764:	b2d2      	uxtb	r2, r2
 800a766:	4611      	mov	r1, r2
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a772:	2303      	movs	r3, #3
 800a774:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a78c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	885b      	ldrh	r3, [r3, #2]
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d920      	bls.n	800a81e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7e4:	e013      	b.n	800a80e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7e6:	f107 030a 	add.w	r3, r7, #10
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6978      	ldr	r0, [r7, #20]
 800a7ee:	f000 f81b 	bl	800a828 <USBD_GetNextDesc>
 800a7f2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	785b      	ldrb	r3, [r3, #1]
 800a7f8:	2b05      	cmp	r3, #5
 800a7fa:	d108      	bne.n	800a80e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	429a      	cmp	r2, r3
 800a808:	d008      	beq.n	800a81c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	885b      	ldrh	r3, [r3, #2]
 800a812:	b29a      	uxth	r2, r3
 800a814:	897b      	ldrh	r3, [r7, #10]
 800a816:	429a      	cmp	r2, r3
 800a818:	d8e5      	bhi.n	800a7e6 <USBD_GetEpDesc+0x32>
 800a81a:	e000      	b.n	800a81e <USBD_GetEpDesc+0x6a>
          break;
 800a81c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a81e:	693b      	ldr	r3, [r7, #16]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	881a      	ldrh	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4413      	add	r3, r2
 800a842:	b29a      	uxth	r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a854:	68fb      	ldr	r3, [r7, #12]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a862:	b480      	push	{r7}
 800a864:	b087      	sub	sp, #28
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	3301      	adds	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a880:	8a3b      	ldrh	r3, [r7, #16]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	b21a      	sxth	r2, r3
 800a886:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	b21b      	sxth	r3, r3
 800a88e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a890:	89fb      	ldrh	r3, [r7, #14]
}
 800a892:	4618      	mov	r0, r3
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b6:	2b40      	cmp	r3, #64	; 0x40
 800a8b8:	d005      	beq.n	800a8c6 <USBD_StdDevReq+0x26>
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d857      	bhi.n	800a96e <USBD_StdDevReq+0xce>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00f      	beq.n	800a8e2 <USBD_StdDevReq+0x42>
 800a8c2:	2b20      	cmp	r3, #32
 800a8c4:	d153      	bne.n	800a96e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	32ae      	adds	r2, #174	; 0xae
 800a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e0:	e04a      	b.n	800a978 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d83b      	bhi.n	800a962 <USBD_StdDevReq+0xc2>
 800a8ea:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <USBD_StdDevReq+0x50>)
 800a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a959 	.word	0x0800a959
 800a8f8:	0800a963 	.word	0x0800a963
 800a8fc:	0800a94f 	.word	0x0800a94f
 800a900:	0800a963 	.word	0x0800a963
 800a904:	0800a923 	.word	0x0800a923
 800a908:	0800a919 	.word	0x0800a919
 800a90c:	0800a963 	.word	0x0800a963
 800a910:	0800a93b 	.word	0x0800a93b
 800a914:	0800a92d 	.word	0x0800a92d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fa3c 	bl	800ad98 <USBD_GetDescriptor>
          break;
 800a920:	e024      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fbcb 	bl	800b0c0 <USBD_SetAddress>
          break;
 800a92a:	e01f      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fc0a 	bl	800b148 <USBD_SetConfig>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]
          break;
 800a938:	e018      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fcad 	bl	800b29c <USBD_GetConfig>
          break;
 800a942:	e013      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fcde 	bl	800b308 <USBD_GetStatus>
          break;
 800a94c:	e00e      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fd0d 	bl	800b370 <USBD_SetFeature>
          break;
 800a956:	e009      	b.n	800a96c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fd31 	bl	800b3c2 <USBD_ClrFeature>
          break;
 800a960:	e004      	b.n	800a96c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fd88 	bl	800b47a <USBD_CtlError>
          break;
 800a96a:	bf00      	nop
      }
      break;
 800a96c:	e004      	b.n	800a978 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd82 	bl	800b47a <USBD_CtlError>
      break;
 800a976:	bf00      	nop
  }

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop

0800a984 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d005      	beq.n	800a9aa <USBD_StdItfReq+0x26>
 800a99e:	2b40      	cmp	r3, #64	; 0x40
 800a9a0:	d852      	bhi.n	800aa48 <USBD_StdItfReq+0xc4>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <USBD_StdItfReq+0x26>
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	d14e      	bne.n	800aa48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d840      	bhi.n	800aa3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	889b      	ldrh	r3, [r3, #4]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d836      	bhi.n	800aa30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	889b      	ldrh	r3, [r3, #4]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff fed8 	bl	800a780 <USBD_CoreFindIF>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2bff      	cmp	r3, #255	; 0xff
 800a9d8:	d01d      	beq.n	800aa16 <USBD_StdItfReq+0x92>
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d11a      	bne.n	800aa16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9e0:	7bba      	ldrb	r2, [r7, #14]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	32ae      	adds	r2, #174	; 0xae
 800a9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00f      	beq.n	800aa10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9f0:	7bba      	ldrb	r2, [r7, #14]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9f8:	7bba      	ldrb	r2, [r7, #14]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	32ae      	adds	r2, #174	; 0xae
 800a9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa0e:	e004      	b.n	800aa1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa10:	2303      	movs	r3, #3
 800aa12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa14:	e001      	b.n	800aa1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa16:	2303      	movs	r3, #3
 800aa18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	88db      	ldrh	r3, [r3, #6]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d110      	bne.n	800aa44 <USBD_StdItfReq+0xc0>
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10d      	bne.n	800aa44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fdd4 	bl	800b5d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa2e:	e009      	b.n	800aa44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fd21 	bl	800b47a <USBD_CtlError>
          break;
 800aa38:	e004      	b.n	800aa44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fd1c 	bl	800b47a <USBD_CtlError>
          break;
 800aa42:	e000      	b.n	800aa46 <USBD_StdItfReq+0xc2>
          break;
 800aa44:	bf00      	nop
      }
      break;
 800aa46:	e004      	b.n	800aa52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fd15 	bl	800b47a <USBD_CtlError>
      break;
 800aa50:	bf00      	nop
  }

  return ret;
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	889b      	ldrh	r3, [r3, #4]
 800aa6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d007      	beq.n	800aa8c <USBD_StdEPReq+0x30>
 800aa7c:	2b40      	cmp	r3, #64	; 0x40
 800aa7e:	f200 817f 	bhi.w	800ad80 <USBD_StdEPReq+0x324>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d02a      	beq.n	800aadc <USBD_StdEPReq+0x80>
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	f040 817a 	bne.w	800ad80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fe82 	bl	800a79a <USBD_CoreFindEP>
 800aa96:	4603      	mov	r3, r0
 800aa98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa9a:	7b7b      	ldrb	r3, [r7, #13]
 800aa9c:	2bff      	cmp	r3, #255	; 0xff
 800aa9e:	f000 8174 	beq.w	800ad8a <USBD_StdEPReq+0x32e>
 800aaa2:	7b7b      	ldrb	r3, [r7, #13]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 8170 	bne.w	800ad8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aab2:	7b7a      	ldrb	r2, [r7, #13]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	32ae      	adds	r2, #174	; 0xae
 800aab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 8163 	beq.w	800ad8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aac4:	7b7a      	ldrb	r2, [r7, #13]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	32ae      	adds	r2, #174	; 0xae
 800aaca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	4798      	blx	r3
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aada:	e156      	b.n	800ad8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	785b      	ldrb	r3, [r3, #1]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d008      	beq.n	800aaf6 <USBD_StdEPReq+0x9a>
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	f300 8145 	bgt.w	800ad74 <USBD_StdEPReq+0x318>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 809b 	beq.w	800ac26 <USBD_StdEPReq+0x1ca>
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d03c      	beq.n	800ab6e <USBD_StdEPReq+0x112>
 800aaf4:	e13e      	b.n	800ad74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d002      	beq.n	800ab08 <USBD_StdEPReq+0xac>
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d016      	beq.n	800ab34 <USBD_StdEPReq+0xd8>
 800ab06:	e02c      	b.n	800ab62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00d      	beq.n	800ab2a <USBD_StdEPReq+0xce>
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b80      	cmp	r3, #128	; 0x80
 800ab12:	d00a      	beq.n	800ab2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f004 f861 	bl	800ebe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab1e:	2180      	movs	r1, #128	; 0x80
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f004 f85d 	bl	800ebe0 <USBD_LL_StallEP>
 800ab26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab28:	e020      	b.n	800ab6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fca4 	bl	800b47a <USBD_CtlError>
              break;
 800ab32:	e01b      	b.n	800ab6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	885b      	ldrh	r3, [r3, #2]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10e      	bne.n	800ab5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00b      	beq.n	800ab5a <USBD_StdEPReq+0xfe>
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	2b80      	cmp	r3, #128	; 0x80
 800ab46:	d008      	beq.n	800ab5a <USBD_StdEPReq+0xfe>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	88db      	ldrh	r3, [r3, #6]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d104      	bne.n	800ab5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f004 f843 	bl	800ebe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fd3b 	bl	800b5d6 <USBD_CtlSendStatus>

              break;
 800ab60:	e004      	b.n	800ab6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc88 	bl	800b47a <USBD_CtlError>
              break;
 800ab6a:	bf00      	nop
          }
          break;
 800ab6c:	e107      	b.n	800ad7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d002      	beq.n	800ab80 <USBD_StdEPReq+0x124>
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d016      	beq.n	800abac <USBD_StdEPReq+0x150>
 800ab7e:	e04b      	b.n	800ac18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00d      	beq.n	800aba2 <USBD_StdEPReq+0x146>
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	2b80      	cmp	r3, #128	; 0x80
 800ab8a:	d00a      	beq.n	800aba2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f004 f825 	bl	800ebe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab96:	2180      	movs	r1, #128	; 0x80
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f004 f821 	bl	800ebe0 <USBD_LL_StallEP>
 800ab9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aba0:	e040      	b.n	800ac24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fc68 	bl	800b47a <USBD_CtlError>
              break;
 800abaa:	e03b      	b.n	800ac24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	885b      	ldrh	r3, [r3, #2]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d136      	bne.n	800ac22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f004 f842 	bl	800ec4c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fd04 	bl	800b5d6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff fde1 	bl	800a79a <USBD_CoreFindEP>
 800abd8:	4603      	mov	r3, r0
 800abda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abdc:	7b7b      	ldrb	r3, [r7, #13]
 800abde:	2bff      	cmp	r3, #255	; 0xff
 800abe0:	d01f      	beq.n	800ac22 <USBD_StdEPReq+0x1c6>
 800abe2:	7b7b      	ldrb	r3, [r7, #13]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11c      	bne.n	800ac22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800abe8:	7b7a      	ldrb	r2, [r7, #13]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abf0:	7b7a      	ldrb	r2, [r7, #13]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32ae      	adds	r2, #174	; 0xae
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d010      	beq.n	800ac22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac00:	7b7a      	ldrb	r2, [r7, #13]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	32ae      	adds	r2, #174	; 0xae
 800ac06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	4798      	blx	r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac16:	e004      	b.n	800ac22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fc2d 	bl	800b47a <USBD_CtlError>
              break;
 800ac20:	e000      	b.n	800ac24 <USBD_StdEPReq+0x1c8>
              break;
 800ac22:	bf00      	nop
          }
          break;
 800ac24:	e0ab      	b.n	800ad7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d002      	beq.n	800ac38 <USBD_StdEPReq+0x1dc>
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d032      	beq.n	800ac9c <USBD_StdEPReq+0x240>
 800ac36:	e097      	b.n	800ad68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d007      	beq.n	800ac4e <USBD_StdEPReq+0x1f2>
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	2b80      	cmp	r3, #128	; 0x80
 800ac42:	d004      	beq.n	800ac4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fc17 	bl	800b47a <USBD_CtlError>
                break;
 800ac4c:	e091      	b.n	800ad72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da0b      	bge.n	800ac6e <USBD_StdEPReq+0x212>
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	3310      	adds	r3, #16
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	e00b      	b.n	800ac86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	3304      	adds	r3, #4
 800ac86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2202      	movs	r2, #2
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fc61 	bl	800b55c <USBD_CtlSendData>
              break;
 800ac9a:	e06a      	b.n	800ad72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	da11      	bge.n	800acc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	f003 020f 	and.w	r2, r3, #15
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	3324      	adds	r3, #36	; 0x24
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d117      	bne.n	800acee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fbda 	bl	800b47a <USBD_CtlError>
                  break;
 800acc6:	e054      	b.n	800ad72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	f003 020f 	and.w	r2, r3, #15
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d104      	bne.n	800acee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fbc7 	bl	800b47a <USBD_CtlError>
                  break;
 800acec:	e041      	b.n	800ad72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da0b      	bge.n	800ad0e <USBD_StdEPReq+0x2b2>
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	3310      	adds	r3, #16
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	e00b      	b.n	800ad26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	4413      	add	r3, r2
 800ad24:	3304      	adds	r3, #4
 800ad26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <USBD_StdEPReq+0x2d8>
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b80      	cmp	r3, #128	; 0x80
 800ad32:	d103      	bne.n	800ad3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	e00e      	b.n	800ad5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f003 ffb9 	bl	800ecb8 <USBD_LL_IsStallEP>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e002      	b.n	800ad5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fbfb 	bl	800b55c <USBD_CtlSendData>
              break;
 800ad66:	e004      	b.n	800ad72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fb85 	bl	800b47a <USBD_CtlError>
              break;
 800ad70:	bf00      	nop
          }
          break;
 800ad72:	e004      	b.n	800ad7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb7f 	bl	800b47a <USBD_CtlError>
          break;
 800ad7c:	bf00      	nop
      }
      break;
 800ad7e:	e005      	b.n	800ad8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb79 	bl	800b47a <USBD_CtlError>
      break;
 800ad88:	e000      	b.n	800ad8c <USBD_StdEPReq+0x330>
      break;
 800ad8a:	bf00      	nop
  }

  return ret;
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	885b      	ldrh	r3, [r3, #2]
 800adb2:	0a1b      	lsrs	r3, r3, #8
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	2b0e      	cmp	r3, #14
 800adba:	f200 8152 	bhi.w	800b062 <USBD_GetDescriptor+0x2ca>
 800adbe:	a201      	add	r2, pc, #4	; (adr r2, 800adc4 <USBD_GetDescriptor+0x2c>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800ae35 	.word	0x0800ae35
 800adc8:	0800ae4d 	.word	0x0800ae4d
 800adcc:	0800ae8d 	.word	0x0800ae8d
 800add0:	0800b063 	.word	0x0800b063
 800add4:	0800b063 	.word	0x0800b063
 800add8:	0800b003 	.word	0x0800b003
 800addc:	0800b02f 	.word	0x0800b02f
 800ade0:	0800b063 	.word	0x0800b063
 800ade4:	0800b063 	.word	0x0800b063
 800ade8:	0800b063 	.word	0x0800b063
 800adec:	0800b063 	.word	0x0800b063
 800adf0:	0800b063 	.word	0x0800b063
 800adf4:	0800b063 	.word	0x0800b063
 800adf8:	0800b063 	.word	0x0800b063
 800adfc:	0800ae01 	.word	0x0800ae01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	7c12      	ldrb	r2, [r2, #16]
 800ae18:	f107 0108 	add.w	r1, r7, #8
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
 800ae20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae22:	e126      	b.n	800b072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fb27 	bl	800b47a <USBD_CtlError>
        err++;
 800ae2c:	7afb      	ldrb	r3, [r7, #11]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	72fb      	strb	r3, [r7, #11]
      break;
 800ae32:	e11e      	b.n	800b072 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	7c12      	ldrb	r2, [r2, #16]
 800ae40:	f107 0108 	add.w	r1, r7, #8
 800ae44:	4610      	mov	r0, r2
 800ae46:	4798      	blx	r3
 800ae48:	60f8      	str	r0, [r7, #12]
      break;
 800ae4a:	e112      	b.n	800b072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7c1b      	ldrb	r3, [r3, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10d      	bne.n	800ae70 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5c:	f107 0208 	add.w	r2, r7, #8
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae6e:	e100      	b.n	800b072 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	f107 0208 	add.w	r2, r7, #8
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
 800ae80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	2202      	movs	r2, #2
 800ae88:	701a      	strb	r2, [r3, #0]
      break;
 800ae8a:	e0f2      	b.n	800b072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	885b      	ldrh	r3, [r3, #2]
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	f200 80ac 	bhi.w	800aff0 <USBD_GetDescriptor+0x258>
 800ae98:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <USBD_GetDescriptor+0x108>)
 800ae9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9e:	bf00      	nop
 800aea0:	0800aeb9 	.word	0x0800aeb9
 800aea4:	0800aeed 	.word	0x0800aeed
 800aea8:	0800af21 	.word	0x0800af21
 800aeac:	0800af55 	.word	0x0800af55
 800aeb0:	0800af89 	.word	0x0800af89
 800aeb4:	0800afbd 	.word	0x0800afbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00b      	beq.n	800aedc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	7c12      	ldrb	r2, [r2, #16]
 800aed0:	f107 0108 	add.w	r1, r7, #8
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
 800aed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeda:	e091      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 facb 	bl	800b47a <USBD_CtlError>
            err++;
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	3301      	adds	r3, #1
 800aee8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeea:	e089      	b.n	800b000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	7c12      	ldrb	r2, [r2, #16]
 800af04:	f107 0108 	add.w	r1, r7, #8
 800af08:	4610      	mov	r0, r2
 800af0a:	4798      	blx	r3
 800af0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af0e:	e077      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fab1 	bl	800b47a <USBD_CtlError>
            err++;
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	3301      	adds	r3, #1
 800af1c:	72fb      	strb	r3, [r7, #11]
          break;
 800af1e:	e06f      	b.n	800b000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7c12      	ldrb	r2, [r2, #16]
 800af38:	f107 0108 	add.w	r1, r7, #8
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
 800af40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af42:	e05d      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa97 	bl	800b47a <USBD_CtlError>
            err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
          break;
 800af52:	e055      	b.n	800b000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7c12      	ldrb	r2, [r2, #16]
 800af6c:	f107 0108 	add.w	r1, r7, #8
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
 800af74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af76:	e043      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa7d 	bl	800b47a <USBD_CtlError>
            err++;
 800af80:	7afb      	ldrb	r3, [r7, #11]
 800af82:	3301      	adds	r3, #1
 800af84:	72fb      	strb	r3, [r7, #11]
          break;
 800af86:	e03b      	b.n	800b000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	7c12      	ldrb	r2, [r2, #16]
 800afa0:	f107 0108 	add.w	r1, r7, #8
 800afa4:	4610      	mov	r0, r2
 800afa6:	4798      	blx	r3
 800afa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afaa:	e029      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fa63 	bl	800b47a <USBD_CtlError>
            err++;
 800afb4:	7afb      	ldrb	r3, [r7, #11]
 800afb6:	3301      	adds	r3, #1
 800afb8:	72fb      	strb	r3, [r7, #11]
          break;
 800afba:	e021      	b.n	800b000 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	7c12      	ldrb	r2, [r2, #16]
 800afd4:	f107 0108 	add.w	r1, r7, #8
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
 800afdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afde:	e00f      	b.n	800b000 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa49 	bl	800b47a <USBD_CtlError>
            err++;
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	3301      	adds	r3, #1
 800afec:	72fb      	strb	r3, [r7, #11]
          break;
 800afee:	e007      	b.n	800b000 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fa41 	bl	800b47a <USBD_CtlError>
          err++;
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	3301      	adds	r3, #1
 800affc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800affe:	bf00      	nop
      }
      break;
 800b000:	e037      	b.n	800b072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7c1b      	ldrb	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d109      	bne.n	800b01e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	f107 0208 	add.w	r2, r7, #8
 800b016:	4610      	mov	r0, r2
 800b018:	4798      	blx	r3
 800b01a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b01c:	e029      	b.n	800b072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fa2a 	bl	800b47a <USBD_CtlError>
        err++;
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	3301      	adds	r3, #1
 800b02a:	72fb      	strb	r3, [r7, #11]
      break;
 800b02c:	e021      	b.n	800b072 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7c1b      	ldrb	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10d      	bne.n	800b052 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03e:	f107 0208 	add.w	r2, r7, #8
 800b042:	4610      	mov	r0, r2
 800b044:	4798      	blx	r3
 800b046:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3301      	adds	r3, #1
 800b04c:	2207      	movs	r2, #7
 800b04e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b050:	e00f      	b.n	800b072 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fa10 	bl	800b47a <USBD_CtlError>
        err++;
 800b05a:	7afb      	ldrb	r3, [r7, #11]
 800b05c:	3301      	adds	r3, #1
 800b05e:	72fb      	strb	r3, [r7, #11]
      break;
 800b060:	e007      	b.n	800b072 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fa08 	bl	800b47a <USBD_CtlError>
      err++;
 800b06a:	7afb      	ldrb	r3, [r7, #11]
 800b06c:	3301      	adds	r3, #1
 800b06e:	72fb      	strb	r3, [r7, #11]
      break;
 800b070:	bf00      	nop
  }

  if (err != 0U)
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11e      	bne.n	800b0b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	88db      	ldrh	r3, [r3, #6]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d016      	beq.n	800b0ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b080:	893b      	ldrh	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00e      	beq.n	800b0a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88da      	ldrh	r2, [r3, #6]
 800b08a:	893b      	ldrh	r3, [r7, #8]
 800b08c:	4293      	cmp	r3, r2
 800b08e:	bf28      	it	cs
 800b090:	4613      	movcs	r3, r2
 800b092:	b29b      	uxth	r3, r3
 800b094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b096:	893b      	ldrh	r3, [r7, #8]
 800b098:	461a      	mov	r2, r3
 800b09a:	68f9      	ldr	r1, [r7, #12]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fa5d 	bl	800b55c <USBD_CtlSendData>
 800b0a2:	e009      	b.n	800b0b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f9e7 	bl	800b47a <USBD_CtlError>
 800b0ac:	e004      	b.n	800b0b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa91 	bl	800b5d6 <USBD_CtlSendStatus>
 800b0b4:	e000      	b.n	800b0b8 <USBD_GetDescriptor+0x320>
    return;
 800b0b6:	bf00      	nop
  }
}
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop

0800b0c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	889b      	ldrh	r3, [r3, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d131      	bne.n	800b136 <USBD_SetAddress+0x76>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	88db      	ldrh	r3, [r3, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d12d      	bne.n	800b136 <USBD_SetAddress+0x76>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	2b7f      	cmp	r3, #127	; 0x7f
 800b0e0:	d829      	bhi.n	800b136 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	885b      	ldrh	r3, [r3, #2]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d104      	bne.n	800b104 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f9bc 	bl	800b47a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b102:	e01d      	b.n	800b140 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7bfa      	ldrb	r2, [r7, #15]
 800b108:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f003 fdfd 	bl	800ed10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fa5d 	bl	800b5d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12a:	e009      	b.n	800b140 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b134:	e004      	b.n	800b140 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f99e 	bl	800b47a <USBD_CtlError>
  }
}
 800b13e:	bf00      	nop
 800b140:	bf00      	nop
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	885b      	ldrh	r3, [r3, #2]
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	4b4e      	ldr	r3, [pc, #312]	; (800b298 <USBD_SetConfig+0x150>)
 800b15e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b160:	4b4d      	ldr	r3, [pc, #308]	; (800b298 <USBD_SetConfig+0x150>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d905      	bls.n	800b174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f985 	bl	800b47a <USBD_CtlError>
    return USBD_FAIL;
 800b170:	2303      	movs	r3, #3
 800b172:	e08c      	b.n	800b28e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d002      	beq.n	800b186 <USBD_SetConfig+0x3e>
 800b180:	2b03      	cmp	r3, #3
 800b182:	d029      	beq.n	800b1d8 <USBD_SetConfig+0x90>
 800b184:	e075      	b.n	800b272 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b186:	4b44      	ldr	r3, [pc, #272]	; (800b298 <USBD_SetConfig+0x150>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d020      	beq.n	800b1d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b18e:	4b42      	ldr	r3, [pc, #264]	; (800b298 <USBD_SetConfig+0x150>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b198:	4b3f      	ldr	r3, [pc, #252]	; (800b298 <USBD_SetConfig+0x150>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7fe ffb6 	bl	800a110 <USBD_SetClassConfig>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d008      	beq.n	800b1c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f962 	bl	800b47a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1be:	e065      	b.n	800b28c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fa08 	bl	800b5d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2203      	movs	r2, #3
 800b1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1ce:	e05d      	b.n	800b28c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa00 	bl	800b5d6 <USBD_CtlSendStatus>
      break;
 800b1d6:	e059      	b.n	800b28c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1d8:	4b2f      	ldr	r3, [pc, #188]	; (800b298 <USBD_SetConfig+0x150>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d112      	bne.n	800b206 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b1e8:	4b2b      	ldr	r3, [pc, #172]	; (800b298 <USBD_SetConfig+0x150>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1f2:	4b29      	ldr	r3, [pc, #164]	; (800b298 <USBD_SetConfig+0x150>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7fe ffa5 	bl	800a148 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9e9 	bl	800b5d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b204:	e042      	b.n	800b28c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b206:	4b24      	ldr	r3, [pc, #144]	; (800b298 <USBD_SetConfig+0x150>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	429a      	cmp	r2, r3
 800b212:	d02a      	beq.n	800b26a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7fe ff93 	bl	800a148 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b222:	4b1d      	ldr	r3, [pc, #116]	; (800b298 <USBD_SetConfig+0x150>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b22c:	4b1a      	ldr	r3, [pc, #104]	; (800b298 <USBD_SetConfig+0x150>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7fe ff6c 	bl	800a110 <USBD_SetClassConfig>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00f      	beq.n	800b262 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f918 	bl	800b47a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7fe ff78 	bl	800a148 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b260:	e014      	b.n	800b28c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f9b7 	bl	800b5d6 <USBD_CtlSendStatus>
      break;
 800b268:	e010      	b.n	800b28c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f9b3 	bl	800b5d6 <USBD_CtlSendStatus>
      break;
 800b270:	e00c      	b.n	800b28c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f900 	bl	800b47a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b27a:	4b07      	ldr	r3, [pc, #28]	; (800b298 <USBD_SetConfig+0x150>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7fe ff61 	bl	800a148 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b286:	2303      	movs	r3, #3
 800b288:	73fb      	strb	r3, [r7, #15]
      break;
 800b28a:	bf00      	nop
  }

  return ret;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200007dc 	.word	0x200007dc

0800b29c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	88db      	ldrh	r3, [r3, #6]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d004      	beq.n	800b2b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8e2 	bl	800b47a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2b6:	e023      	b.n	800b300 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	dc02      	bgt.n	800b2ca <USBD_GetConfig+0x2e>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dc03      	bgt.n	800b2d0 <USBD_GetConfig+0x34>
 800b2c8:	e015      	b.n	800b2f6 <USBD_GetConfig+0x5a>
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d00b      	beq.n	800b2e6 <USBD_GetConfig+0x4a>
 800b2ce:	e012      	b.n	800b2f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	2201      	movs	r2, #1
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f93c 	bl	800b55c <USBD_CtlSendData>
        break;
 800b2e4:	e00c      	b.n	800b300 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f934 	bl	800b55c <USBD_CtlSendData>
        break;
 800b2f4:	e004      	b.n	800b300 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f8be 	bl	800b47a <USBD_CtlError>
        break;
 800b2fe:	bf00      	nop
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	3b01      	subs	r3, #1
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d81e      	bhi.n	800b35e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	88db      	ldrh	r3, [r3, #6]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d004      	beq.n	800b332 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f8a5 	bl	800b47a <USBD_CtlError>
        break;
 800b330:	e01a      	b.n	800b368 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d005      	beq.n	800b34e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f043 0202 	orr.w	r2, r3, #2
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	330c      	adds	r3, #12
 800b352:	2202      	movs	r2, #2
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f900 	bl	800b55c <USBD_CtlSendData>
      break;
 800b35c:	e004      	b.n	800b368 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f88a 	bl	800b47a <USBD_CtlError>
      break;
 800b366:	bf00      	nop
  }
}
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d107      	bne.n	800b392 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f923 	bl	800b5d6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b390:	e013      	b.n	800b3ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	885b      	ldrh	r3, [r3, #2]
 800b396:	2b02      	cmp	r3, #2
 800b398:	d10b      	bne.n	800b3b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	889b      	ldrh	r3, [r3, #4]
 800b39e:	0a1b      	lsrs	r3, r3, #8
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f913 	bl	800b5d6 <USBD_CtlSendStatus>
}
 800b3b0:	e003      	b.n	800b3ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f860 	bl	800b47a <USBD_CtlError>
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d80b      	bhi.n	800b3f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	885b      	ldrh	r3, [r3, #2]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d10c      	bne.n	800b3fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f8f3 	bl	800b5d6 <USBD_CtlSendStatus>
      }
      break;
 800b3f0:	e004      	b.n	800b3fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f840 	bl	800b47a <USBD_CtlError>
      break;
 800b3fa:	e000      	b.n	800b3fe <USBD_ClrFeature+0x3c>
      break;
 800b3fc:	bf00      	nop
  }
}
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	781a      	ldrb	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7ff fa16 	bl	800a862 <SWAPBYTE>
 800b436:	4603      	mov	r3, r0
 800b438:	461a      	mov	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3301      	adds	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7ff fa09 	bl	800a862 <SWAPBYTE>
 800b450:	4603      	mov	r3, r0
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff f9fc 	bl	800a862 <SWAPBYTE>
 800b46a:	4603      	mov	r3, r0
 800b46c:	461a      	mov	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	80da      	strh	r2, [r3, #6]
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b484:	2180      	movs	r1, #128	; 0x80
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f003 fbaa 	bl	800ebe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f003 fba6 	bl	800ebe0 <USBD_LL_StallEP>
}
 800b494:	bf00      	nop
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d036      	beq.n	800b520 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4b6:	6938      	ldr	r0, [r7, #16]
 800b4b8:	f000 f836 	bl	800b528 <USBD_GetLen>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	3301      	adds	r3, #1
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	7812      	ldrb	r2, [r2, #0]
 800b4d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	2203      	movs	r2, #3
 800b4e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4e6:	7dfb      	ldrb	r3, [r7, #23]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4ec:	e013      	b.n	800b516 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	7812      	ldrb	r2, [r2, #0]
 800b4f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
    idx++;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	3301      	adds	r3, #1
 800b504:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	4413      	add	r3, r2
 800b50c:	2200      	movs	r2, #0
 800b50e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	3301      	adds	r3, #1
 800b514:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e7      	bne.n	800b4ee <USBD_GetString+0x52>
 800b51e:	e000      	b.n	800b522 <USBD_GetString+0x86>
    return;
 800b520:	bf00      	nop
  }
}
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b538:	e005      	b.n	800b546 <USBD_GetLen+0x1e>
  {
    len++;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	3301      	adds	r3, #1
 800b53e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	3301      	adds	r3, #1
 800b544:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f5      	bne.n	800b53a <USBD_GetLen+0x12>
  }

  return len;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	2100      	movs	r1, #0
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f003 fbfa 	bl	800ed7c <USBD_LL_Transmit>

  return USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f003 fbe9 	bl	800ed7c <USBD_LL_Transmit>

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f003 fc10 	bl	800edec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2204      	movs	r2, #4
 800b5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f003 fbc5 	bl	800ed7c <USBD_LL_Transmit>

  return USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2205      	movs	r2, #5
 800b608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b60c:	2300      	movs	r3, #0
 800b60e:	2200      	movs	r2, #0
 800b610:	2100      	movs	r1, #0
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f003 fbea 	bl	800edec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	4a08      	ldr	r2, [pc, #32]	; (800b654 <disk_status+0x30>)
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	79fa      	ldrb	r2, [r7, #7]
 800b63c:	4905      	ldr	r1, [pc, #20]	; (800b654 <disk_status+0x30>)
 800b63e:	440a      	add	r2, r1
 800b640:	7a12      	ldrb	r2, [r2, #8]
 800b642:	4610      	mov	r0, r2
 800b644:	4798      	blx	r3
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20000a08 	.word	0x20000a08

0800b658 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	4a0d      	ldr	r2, [pc, #52]	; (800b6a0 <disk_initialize+0x48>)
 800b66a:	5cd3      	ldrb	r3, [r2, r3]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d111      	bne.n	800b694 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	4a0b      	ldr	r2, [pc, #44]	; (800b6a0 <disk_initialize+0x48>)
 800b674:	2101      	movs	r1, #1
 800b676:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b678:	79fb      	ldrb	r3, [r7, #7]
 800b67a:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <disk_initialize+0x48>)
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	79fa      	ldrb	r2, [r7, #7]
 800b686:	4906      	ldr	r1, [pc, #24]	; (800b6a0 <disk_initialize+0x48>)
 800b688:	440a      	add	r2, r1
 800b68a:	7a12      	ldrb	r2, [r2, #8]
 800b68c:	4610      	mov	r0, r2
 800b68e:	4798      	blx	r3
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000a08 	.word	0x20000a08

0800b6a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b6a4:	b590      	push	{r4, r7, lr}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	4a0a      	ldr	r2, [pc, #40]	; (800b6e0 <disk_read+0x3c>)
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	689c      	ldr	r4, [r3, #8]
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	4a07      	ldr	r2, [pc, #28]	; (800b6e0 <disk_read+0x3c>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	7a18      	ldrb	r0, [r3, #8]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	47a0      	blx	r4
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd90      	pop	{r4, r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000a08 	.word	0x20000a08

0800b6e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6e4:	b590      	push	{r4, r7, lr}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	607a      	str	r2, [r7, #4]
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
 800b6f6:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <disk_write+0x3c>)
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	68dc      	ldr	r4, [r3, #12]
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	4a07      	ldr	r2, [pc, #28]	; (800b720 <disk_write+0x3c>)
 800b704:	4413      	add	r3, r2
 800b706:	7a18      	ldrb	r0, [r3, #8]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	47a0      	blx	r4
 800b710:	4603      	mov	r3, r0
 800b712:	75fb      	strb	r3, [r7, #23]
  return res;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd90      	pop	{r4, r7, pc}
 800b71e:	bf00      	nop
 800b720:	20000a08 	.word	0x20000a08

0800b724 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	603a      	str	r2, [r7, #0]
 800b72e:	71fb      	strb	r3, [r7, #7]
 800b730:	460b      	mov	r3, r1
 800b732:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	4a09      	ldr	r2, [pc, #36]	; (800b75c <disk_ioctl+0x38>)
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	79fa      	ldrb	r2, [r7, #7]
 800b742:	4906      	ldr	r1, [pc, #24]	; (800b75c <disk_ioctl+0x38>)
 800b744:	440a      	add	r2, r1
 800b746:	7a10      	ldrb	r0, [r2, #8]
 800b748:	79b9      	ldrb	r1, [r7, #6]
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	4798      	blx	r3
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]
  return res;
 800b752:	7bfb      	ldrb	r3, [r7, #15]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000a08 	.word	0x20000a08

0800b760 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3301      	adds	r3, #1
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b770:	89fb      	ldrh	r3, [r7, #14]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	b21a      	sxth	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	b21b      	sxth	r3, r3
 800b77c:	4313      	orrs	r3, r2
 800b77e:	b21b      	sxth	r3, r3
 800b780:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b782:	89fb      	ldrh	r3, [r7, #14]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3303      	adds	r3, #3
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	3202      	adds	r2, #2
 800b7a8:	7812      	ldrb	r2, [r2, #0]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	3201      	adds	r2, #1
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	887a      	ldrh	r2, [r7, #2]
 800b7ea:	b2d2      	uxtb	r2, r2
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	887b      	ldrh	r3, [r7, #2]
 800b7f0:	0a1b      	lsrs	r3, r3, #8
 800b7f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	887a      	ldrh	r2, [r7, #2]
 800b7fc:	b2d2      	uxtb	r2, r2
 800b7fe:	701a      	strb	r2, [r3, #0]
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	0a1b      	lsrs	r3, r3, #8
 800b826:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	b2d2      	uxtb	r2, r2
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	0a1b      	lsrs	r3, r3, #8
 800b838:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	b2d2      	uxtb	r2, r2
 800b856:	701a      	strb	r2, [r3, #0]
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00d      	beq.n	800b89a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	1c53      	adds	r3, r2, #1
 800b882:	613b      	str	r3, [r7, #16]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	1c59      	adds	r1, r3, #1
 800b888:	6179      	str	r1, [r7, #20]
 800b88a:	7812      	ldrb	r2, [r2, #0]
 800b88c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3b01      	subs	r3, #1
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1f1      	bne.n	800b87e <mem_cpy+0x1a>
	}
}
 800b89a:	bf00      	nop
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b8a6:	b480      	push	{r7}
 800b8a8:	b087      	sub	sp, #28
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	617a      	str	r2, [r7, #20]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	b2d2      	uxtb	r2, r2
 800b8c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f3      	bne.n	800b8b6 <mem_set+0x10>
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	371c      	adds	r7, #28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8dc:	b480      	push	{r7}
 800b8de:	b089      	sub	sp, #36	; 0x24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	61fa      	str	r2, [r7, #28]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	61ba      	str	r2, [r7, #24]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	1acb      	subs	r3, r1, r3
 800b908:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	607b      	str	r3, [r7, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <mem_cmp+0x40>
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0eb      	beq.n	800b8f4 <mem_cmp+0x18>

	return r;
 800b91c:	697b      	ldr	r3, [r7, #20]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3724      	adds	r7, #36	; 0x24
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b934:	e002      	b.n	800b93c <chk_chr+0x12>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3301      	adds	r3, #1
 800b93a:	607b      	str	r3, [r7, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d005      	beq.n	800b950 <chk_chr+0x26>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d1f2      	bne.n	800b936 <chk_chr+0xc>
	return *str;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	781b      	ldrb	r3, [r3, #0]
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b96a:	2300      	movs	r3, #0
 800b96c:	60bb      	str	r3, [r7, #8]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	e029      	b.n	800b9c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b974:	4a27      	ldr	r2, [pc, #156]	; (800ba14 <chk_lock+0xb4>)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	4413      	add	r3, r2
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01d      	beq.n	800b9be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b982:	4a24      	ldr	r2, [pc, #144]	; (800ba14 <chk_lock+0xb4>)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	011b      	lsls	r3, r3, #4
 800b988:	4413      	add	r3, r2
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d116      	bne.n	800b9c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b994:	4a1f      	ldr	r2, [pc, #124]	; (800ba14 <chk_lock+0xb4>)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	4413      	add	r3, r2
 800b99c:	3304      	adds	r3, #4
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d10c      	bne.n	800b9c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9a8:	4a1a      	ldr	r2, [pc, #104]	; (800ba14 <chk_lock+0xb4>)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d102      	bne.n	800b9c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9bc:	e007      	b.n	800b9ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d9d2      	bls.n	800b974 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d109      	bne.n	800b9e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d102      	bne.n	800b9e0 <chk_lock+0x80>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d101      	bne.n	800b9e4 <chk_lock+0x84>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	e010      	b.n	800ba06 <chk_lock+0xa6>
 800b9e4:	2312      	movs	r3, #18
 800b9e6:	e00e      	b.n	800ba06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d108      	bne.n	800ba00 <chk_lock+0xa0>
 800b9ee:	4a09      	ldr	r2, [pc, #36]	; (800ba14 <chk_lock+0xb4>)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	4413      	add	r3, r2
 800b9f6:	330c      	adds	r3, #12
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fe:	d101      	bne.n	800ba04 <chk_lock+0xa4>
 800ba00:	2310      	movs	r3, #16
 800ba02:	e000      	b.n	800ba06 <chk_lock+0xa6>
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	200007e8 	.word	0x200007e8

0800ba18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e002      	b.n	800ba2a <enq_lock+0x12>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3301      	adds	r3, #1
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d806      	bhi.n	800ba3e <enq_lock+0x26>
 800ba30:	4a09      	ldr	r2, [pc, #36]	; (800ba58 <enq_lock+0x40>)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	011b      	lsls	r3, r3, #4
 800ba36:	4413      	add	r3, r2
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1f2      	bne.n	800ba24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	bf14      	ite	ne
 800ba44:	2301      	movne	r3, #1
 800ba46:	2300      	moveq	r3, #0
 800ba48:	b2db      	uxtb	r3, r3
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	200007e8 	.word	0x200007e8

0800ba5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	e01f      	b.n	800baac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba6c:	4a41      	ldr	r2, [pc, #260]	; (800bb74 <inc_lock+0x118>)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	011b      	lsls	r3, r3, #4
 800ba72:	4413      	add	r3, r2
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d113      	bne.n	800baa6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba7e:	4a3d      	ldr	r2, [pc, #244]	; (800bb74 <inc_lock+0x118>)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4413      	add	r3, r2
 800ba86:	3304      	adds	r3, #4
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d109      	bne.n	800baa6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba92:	4a38      	ldr	r2, [pc, #224]	; (800bb74 <inc_lock+0x118>)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	4413      	add	r3, r2
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d006      	beq.n	800bab4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d9dc      	bls.n	800ba6c <inc_lock+0x10>
 800bab2:	e000      	b.n	800bab6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bab4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d132      	bne.n	800bb22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800babc:	2300      	movs	r3, #0
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	e002      	b.n	800bac8 <inc_lock+0x6c>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d806      	bhi.n	800badc <inc_lock+0x80>
 800bace:	4a29      	ldr	r2, [pc, #164]	; (800bb74 <inc_lock+0x118>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	4413      	add	r3, r2
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1f2      	bne.n	800bac2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d101      	bne.n	800bae6 <inc_lock+0x8a>
 800bae2:	2300      	movs	r3, #0
 800bae4:	e040      	b.n	800bb68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4922      	ldr	r1, [pc, #136]	; (800bb74 <inc_lock+0x118>)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	440b      	add	r3, r1
 800baf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	491e      	ldr	r1, [pc, #120]	; (800bb74 <inc_lock+0x118>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	440b      	add	r3, r1
 800bb00:	3304      	adds	r3, #4
 800bb02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	695a      	ldr	r2, [r3, #20]
 800bb08:	491a      	ldr	r1, [pc, #104]	; (800bb74 <inc_lock+0x118>)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	440b      	add	r3, r1
 800bb10:	3308      	adds	r3, #8
 800bb12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb14:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <inc_lock+0x118>)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	011b      	lsls	r3, r3, #4
 800bb1a:	4413      	add	r3, r2
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	2200      	movs	r2, #0
 800bb20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d009      	beq.n	800bb3c <inc_lock+0xe0>
 800bb28:	4a12      	ldr	r2, [pc, #72]	; (800bb74 <inc_lock+0x118>)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	4413      	add	r3, r2
 800bb30:	330c      	adds	r3, #12
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <inc_lock+0xe0>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e015      	b.n	800bb68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d108      	bne.n	800bb54 <inc_lock+0xf8>
 800bb42:	4a0c      	ldr	r2, [pc, #48]	; (800bb74 <inc_lock+0x118>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	4413      	add	r3, r2
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	e001      	b.n	800bb58 <inc_lock+0xfc>
 800bb54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb58:	4906      	ldr	r1, [pc, #24]	; (800bb74 <inc_lock+0x118>)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	440b      	add	r3, r1
 800bb60:	330c      	adds	r3, #12
 800bb62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3301      	adds	r3, #1
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	200007e8 	.word	0x200007e8

0800bb78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d825      	bhi.n	800bbd8 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb8c:	4a17      	ldr	r2, [pc, #92]	; (800bbec <dec_lock+0x74>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	011b      	lsls	r3, r3, #4
 800bb92:	4413      	add	r3, r2
 800bb94:	330c      	adds	r3, #12
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb9a:	89fb      	ldrh	r3, [r7, #14]
 800bb9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bba0:	d101      	bne.n	800bba6 <dec_lock+0x2e>
 800bba2:	2300      	movs	r3, #0
 800bba4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bba6:	89fb      	ldrh	r3, [r7, #14]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <dec_lock+0x3a>
 800bbac:	89fb      	ldrh	r3, [r7, #14]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bbb2:	4a0e      	ldr	r2, [pc, #56]	; (800bbec <dec_lock+0x74>)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	011b      	lsls	r3, r3, #4
 800bbb8:	4413      	add	r3, r2
 800bbba:	330c      	adds	r3, #12
 800bbbc:	89fa      	ldrh	r2, [r7, #14]
 800bbbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bbc0:	89fb      	ldrh	r3, [r7, #14]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <dec_lock+0x5a>
 800bbc6:	4a09      	ldr	r2, [pc, #36]	; (800bbec <dec_lock+0x74>)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	4413      	add	r3, r2
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	737b      	strb	r3, [r7, #13]
 800bbd6:	e001      	b.n	800bbdc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bbd8:	2302      	movs	r3, #2
 800bbda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bbdc:	7b7b      	ldrb	r3, [r7, #13]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	200007e8 	.word	0x200007e8

0800bbf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e010      	b.n	800bc20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbfe:	4a0d      	ldr	r2, [pc, #52]	; (800bc34 <clear_lock+0x44>)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	4413      	add	r3, r2
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d105      	bne.n	800bc1a <clear_lock+0x2a>
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <clear_lock+0x44>)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	011b      	lsls	r3, r3, #4
 800bc14:	4413      	add	r3, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d9eb      	bls.n	800bbfe <clear_lock+0xe>
	}
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	200007e8 	.word	0x200007e8

0800bc38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	78db      	ldrb	r3, [r3, #3]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d034      	beq.n	800bcb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7858      	ldrb	r0, [r3, #1]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	f7ff fd40 	bl	800b6e4 <disk_write>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	73fb      	strb	r3, [r7, #15]
 800bc6e:	e022      	b.n	800bcb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	1ad2      	subs	r2, r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d217      	bcs.n	800bcb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	789b      	ldrb	r3, [r3, #2]
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	e010      	b.n	800bcb0 <sync_window+0x78>
					wsect += fs->fsize;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	4413      	add	r3, r2
 800bc96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7858      	ldrb	r0, [r3, #1]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bca2:	2301      	movs	r3, #1
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	f7ff fd1d 	bl	800b6e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	613b      	str	r3, [r7, #16]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d8eb      	bhi.n	800bc8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d01b      	beq.n	800bd10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ffad 	bl	800bc38 <sync_window>
 800bcde:	4603      	mov	r3, r0
 800bce0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d113      	bne.n	800bd10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7858      	ldrb	r0, [r3, #1]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	f7ff fcd5 	bl	800b6a4 <disk_read>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d004      	beq.n	800bd0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ff87 	bl	800bc38 <sync_window>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d158      	bne.n	800bde6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d148      	bne.n	800bdce <sync_fs+0xb2>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	791b      	ldrb	r3, [r3, #4]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d144      	bne.n	800bdce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3334      	adds	r3, #52	; 0x34
 800bd48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff fda9 	bl	800b8a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3334      	adds	r3, #52	; 0x34
 800bd58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd5c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fd38 	bl	800b7d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3334      	adds	r3, #52	; 0x34
 800bd6a:	4921      	ldr	r1, [pc, #132]	; (800bdf0 <sync_fs+0xd4>)
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fd4d 	bl	800b80c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3334      	adds	r3, #52	; 0x34
 800bd76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd7a:	491e      	ldr	r1, [pc, #120]	; (800bdf4 <sync_fs+0xd8>)
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff fd45 	bl	800b80c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3334      	adds	r3, #52	; 0x34
 800bd86:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7ff fd3b 	bl	800b80c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3334      	adds	r3, #52	; 0x34
 800bd9a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f7ff fd31 	bl	800b80c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7858      	ldrb	r0, [r3, #1]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f7ff fc8e 	bl	800b6e4 <disk_write>
			fs->fsi_flag = 0;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fca4 	bl	800b724 <disk_ioctl>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <sync_fs+0xca>
 800bde2:	2301      	movs	r3, #1
 800bde4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	41615252 	.word	0x41615252
 800bdf4:	61417272 	.word	0x61417272

0800bdf8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	3b02      	subs	r3, #2
 800be06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	3b02      	subs	r3, #2
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d301      	bcc.n	800be18 <clust2sect+0x20>
 800be14:	2300      	movs	r3, #0
 800be16:	e008      	b.n	800be2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	895b      	ldrh	r3, [r3, #10]
 800be1c:	461a      	mov	r2, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	fb03 f202 	mul.w	r2, r3, r2
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	4413      	add	r3, r2
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b086      	sub	sp, #24
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d904      	bls.n	800be56 <get_fat+0x20>
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d302      	bcc.n	800be5c <get_fat+0x26>
		val = 1;	/* Internal error */
 800be56:	2301      	movs	r3, #1
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e08f      	b.n	800bf7c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be5c:	f04f 33ff 	mov.w	r3, #4294967295
 800be60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b03      	cmp	r3, #3
 800be68:	d062      	beq.n	800bf30 <get_fat+0xfa>
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	dc7c      	bgt.n	800bf68 <get_fat+0x132>
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d002      	beq.n	800be78 <get_fat+0x42>
 800be72:	2b02      	cmp	r3, #2
 800be74:	d042      	beq.n	800befc <get_fat+0xc6>
 800be76:	e077      	b.n	800bf68 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	085b      	lsrs	r3, r3, #1
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	0a5b      	lsrs	r3, r3, #9
 800be8e:	4413      	add	r3, r2
 800be90:	4619      	mov	r1, r3
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f7ff ff14 	bl	800bcc0 <move_window>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d167      	bne.n	800bf6e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	60fa      	str	r2, [r7, #12]
 800bea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4413      	add	r3, r2
 800beac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800beb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	0a5b      	lsrs	r3, r3, #9
 800beba:	4413      	add	r3, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	6938      	ldr	r0, [r7, #16]
 800bec0:	f7ff fefe 	bl	800bcc0 <move_window>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d153      	bne.n	800bf72 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	4413      	add	r3, r2
 800bed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	461a      	mov	r2, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <get_fat+0xbc>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	091b      	lsrs	r3, r3, #4
 800bef0:	e002      	b.n	800bef8 <get_fat+0xc2>
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bef8:	617b      	str	r3, [r7, #20]
			break;
 800befa:	e03f      	b.n	800bf7c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	0a1b      	lsrs	r3, r3, #8
 800bf04:	4413      	add	r3, r2
 800bf06:	4619      	mov	r1, r3
 800bf08:	6938      	ldr	r0, [r7, #16]
 800bf0a:	f7ff fed9 	bl	800bcc0 <move_window>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d130      	bne.n	800bf76 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf22:	4413      	add	r3, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fc1b 	bl	800b760 <ld_word>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	617b      	str	r3, [r7, #20]
			break;
 800bf2e:	e025      	b.n	800bf7c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	09db      	lsrs	r3, r3, #7
 800bf38:	4413      	add	r3, r2
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6938      	ldr	r0, [r7, #16]
 800bf3e:	f7ff febf 	bl	800bcc0 <move_window>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d118      	bne.n	800bf7a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf56:	4413      	add	r3, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff fc19 	bl	800b790 <ld_dword>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf64:	617b      	str	r3, [r7, #20]
			break;
 800bf66:	e009      	b.n	800bf7c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e006      	b.n	800bf7c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf6e:	bf00      	nop
 800bf70:	e004      	b.n	800bf7c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf72:	bf00      	nop
 800bf74:	e002      	b.n	800bf7c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf76:	bf00      	nop
 800bf78:	e000      	b.n	800bf7c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf7a:	bf00      	nop
		}
	}

	return val;
 800bf7c:	697b      	ldr	r3, [r7, #20]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf86:	b590      	push	{r4, r7, lr}
 800bf88:	b089      	sub	sp, #36	; 0x24
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf92:	2302      	movs	r3, #2
 800bf94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	f240 80d9 	bls.w	800c150 <put_fat+0x1ca>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	f080 80d3 	bcs.w	800c150 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	f000 8096 	beq.w	800c0e0 <put_fat+0x15a>
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	f300 80cb 	bgt.w	800c150 <put_fat+0x1ca>
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d002      	beq.n	800bfc4 <put_fat+0x3e>
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d06e      	beq.n	800c0a0 <put_fat+0x11a>
 800bfc2:	e0c5      	b.n	800c150 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	61bb      	str	r3, [r7, #24]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	085b      	lsrs	r3, r3, #1
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	4413      	add	r3, r2
 800bfd0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	0a5b      	lsrs	r3, r3, #9
 800bfda:	4413      	add	r3, r2
 800bfdc:	4619      	mov	r1, r3
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff fe6e 	bl	800bcc0 <move_window>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfe8:	7ffb      	ldrb	r3, [r7, #31]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f040 80a9 	bne.w	800c142 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	1c59      	adds	r1, r3, #1
 800bffa:	61b9      	str	r1, [r7, #24]
 800bffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c000:	4413      	add	r3, r2
 800c002:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00d      	beq.n	800c02a <put_fat+0xa4>
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	b25b      	sxtb	r3, r3
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	b25a      	sxtb	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	b25b      	sxtb	r3, r3
 800c022:	4313      	orrs	r3, r2
 800c024:	b25b      	sxtb	r3, r3
 800c026:	b2db      	uxtb	r3, r3
 800c028:	e001      	b.n	800c02e <put_fat+0xa8>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2201      	movs	r2, #1
 800c036:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	0a5b      	lsrs	r3, r3, #9
 800c040:	4413      	add	r3, r2
 800c042:	4619      	mov	r1, r3
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7ff fe3b 	bl	800bcc0 <move_window>
 800c04a:	4603      	mov	r3, r0
 800c04c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c04e:	7ffb      	ldrb	r3, [r7, #31]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d178      	bne.n	800c146 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c060:	4413      	add	r3, r2
 800c062:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <put_fat+0xf0>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	091b      	lsrs	r3, r3, #4
 800c072:	b2db      	uxtb	r3, r3
 800c074:	e00e      	b.n	800c094 <put_fat+0x10e>
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	f023 030f 	bic.w	r3, r3, #15
 800c080:	b25a      	sxtb	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	0a1b      	lsrs	r3, r3, #8
 800c086:	b25b      	sxtb	r3, r3
 800c088:	f003 030f 	and.w	r3, r3, #15
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	4313      	orrs	r3, r2
 800c090:	b25b      	sxtb	r3, r3
 800c092:	b2db      	uxtb	r3, r3
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	70da      	strb	r2, [r3, #3]
			break;
 800c09e:	e057      	b.n	800c150 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	0a1b      	lsrs	r3, r3, #8
 800c0a8:	4413      	add	r3, r2
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff fe07 	bl	800bcc0 <move_window>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0b6:	7ffb      	ldrb	r3, [r7, #31]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d146      	bne.n	800c14a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0ca:	4413      	add	r3, r2
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	b292      	uxth	r2, r2
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fb7f 	bl	800b7d6 <st_word>
			fs->wflag = 1;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	70da      	strb	r2, [r3, #3]
			break;
 800c0de:	e037      	b.n	800c150 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	09db      	lsrs	r3, r3, #7
 800c0e8:	4413      	add	r3, r2
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f7ff fde7 	bl	800bcc0 <move_window>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0f6:	7ffb      	ldrb	r3, [r7, #31]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d128      	bne.n	800c14e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c110:	4413      	add	r3, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fb3c 	bl	800b790 <ld_dword>
 800c118:	4603      	mov	r3, r0
 800c11a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c11e:	4323      	orrs	r3, r4
 800c120:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c130:	4413      	add	r3, r2
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff fb69 	bl	800b80c <st_dword>
			fs->wflag = 1;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2201      	movs	r2, #1
 800c13e:	70da      	strb	r2, [r3, #3]
			break;
 800c140:	e006      	b.n	800c150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c142:	bf00      	nop
 800c144:	e004      	b.n	800c150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c14e:	bf00      	nop
		}
	}
	return res;
 800c150:	7ffb      	ldrb	r3, [r7, #31]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3724      	adds	r7, #36	; 0x24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd90      	pop	{r4, r7, pc}

0800c15a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b088      	sub	sp, #32
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d904      	bls.n	800c180 <remove_chain+0x26>
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d301      	bcc.n	800c184 <remove_chain+0x2a>
 800c180:	2302      	movs	r3, #2
 800c182:	e04b      	b.n	800c21c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00c      	beq.n	800c1a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c18a:	f04f 32ff 	mov.w	r2, #4294967295
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	69b8      	ldr	r0, [r7, #24]
 800c192:	f7ff fef8 	bl	800bf86 <put_fat>
 800c196:	4603      	mov	r3, r0
 800c198:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c19a:	7ffb      	ldrb	r3, [r7, #31]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <remove_chain+0x4a>
 800c1a0:	7ffb      	ldrb	r3, [r7, #31]
 800c1a2:	e03b      	b.n	800c21c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff fe45 	bl	800be36 <get_fat>
 800c1ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d031      	beq.n	800c218 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d101      	bne.n	800c1be <remove_chain+0x64>
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	e02e      	b.n	800c21c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c4:	d101      	bne.n	800c1ca <remove_chain+0x70>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e028      	b.n	800c21c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	68b9      	ldr	r1, [r7, #8]
 800c1ce:	69b8      	ldr	r0, [r7, #24]
 800c1d0:	f7ff fed9 	bl	800bf86 <put_fat>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c1d8:	7ffb      	ldrb	r3, [r7, #31]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <remove_chain+0x88>
 800c1de:	7ffb      	ldrb	r3, [r7, #31]
 800c1e0:	e01c      	b.n	800c21c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	695a      	ldr	r2, [r3, #20]
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	3b02      	subs	r3, #2
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d20b      	bcs.n	800c208 <remove_chain+0xae>
			fs->free_clst++;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	791b      	ldrb	r3, [r3, #4]
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	429a      	cmp	r2, r3
 800c214:	d3c6      	bcc.n	800c1a4 <remove_chain+0x4a>
 800c216:	e000      	b.n	800c21a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c218:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3720      	adds	r7, #32
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10d      	bne.n	800c256 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <create_chain+0x2c>
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d31b      	bcc.n	800c288 <create_chain+0x64>
 800c250:	2301      	movs	r3, #1
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	e018      	b.n	800c288 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff fdec 	bl	800be36 <get_fat>
 800c25e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d801      	bhi.n	800c26a <create_chain+0x46>
 800c266:	2301      	movs	r3, #1
 800c268:	e070      	b.n	800c34c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d101      	bne.n	800c276 <create_chain+0x52>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	e06a      	b.n	800c34c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d201      	bcs.n	800c284 <create_chain+0x60>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	e063      	b.n	800c34c <create_chain+0x128>
		scl = clst;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	3301      	adds	r3, #1
 800c290:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d307      	bcc.n	800c2ac <create_chain+0x88>
				ncl = 2;
 800c29c:	2302      	movs	r3, #2
 800c29e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2a0:	69fa      	ldr	r2, [r7, #28]
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d901      	bls.n	800c2ac <create_chain+0x88>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e04f      	b.n	800c34c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c2ac:	69f9      	ldr	r1, [r7, #28]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fdc1 	bl	800be36 <get_fat>
 800c2b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00e      	beq.n	800c2da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d003      	beq.n	800c2ca <create_chain+0xa6>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c8:	d101      	bne.n	800c2ce <create_chain+0xaa>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	e03e      	b.n	800c34c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d1da      	bne.n	800c28c <create_chain+0x68>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e038      	b.n	800c34c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	69f9      	ldr	r1, [r7, #28]
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fe4f 	bl	800bf86 <put_fat>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d109      	bne.n	800c306 <create_chain+0xe2>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d006      	beq.n	800c306 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6938      	ldr	r0, [r7, #16]
 800c2fe:	f7ff fe42 	bl	800bf86 <put_fat>
 800c302:	4603      	mov	r3, r0
 800c304:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d116      	bne.n	800c33a <create_chain+0x116>
		fs->last_clst = ncl;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	69fa      	ldr	r2, [r7, #28]
 800c310:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	695a      	ldr	r2, [r3, #20]
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	3b02      	subs	r3, #2
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d804      	bhi.n	800c32a <create_chain+0x106>
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	1e5a      	subs	r2, r3, #1
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	791b      	ldrb	r3, [r3, #4]
 800c32e:	f043 0301 	orr.w	r3, r3, #1
 800c332:	b2da      	uxtb	r2, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	711a      	strb	r2, [r3, #4]
 800c338:	e007      	b.n	800c34a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d102      	bne.n	800c346 <create_chain+0x122>
 800c340:	f04f 33ff 	mov.w	r3, #4294967295
 800c344:	e000      	b.n	800c348 <create_chain+0x124>
 800c346:	2301      	movs	r3, #1
 800c348:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c34a:	69fb      	ldr	r3, [r7, #28]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c354:	b480      	push	{r7}
 800c356:	b087      	sub	sp, #28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c368:	3304      	adds	r3, #4
 800c36a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	0a5b      	lsrs	r3, r3, #9
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	8952      	ldrh	r2, [r2, #10]
 800c374:	fbb3 f3f2 	udiv	r3, r3, r2
 800c378:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	1d1a      	adds	r2, r3, #4
 800c37e:	613a      	str	r2, [r7, #16]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <clmt_clust+0x3a>
 800c38a:	2300      	movs	r3, #0
 800c38c:	e010      	b.n	800c3b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	429a      	cmp	r2, r3
 800c394:	d307      	bcc.n	800c3a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3a4:	e7e9      	b.n	800c37a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c3a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	4413      	add	r3, r2
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	371c      	adds	r7, #28
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3d2:	d204      	bcs.n	800c3de <dir_sdi+0x22>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f003 031f 	and.w	r3, r3, #31
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e063      	b.n	800c4aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d106      	bne.n	800c402 <dir_sdi+0x46>
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d902      	bls.n	800c402 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c400:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10c      	bne.n	800c422 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	8912      	ldrh	r2, [r2, #8]
 800c410:	4293      	cmp	r3, r2
 800c412:	d301      	bcc.n	800c418 <dir_sdi+0x5c>
 800c414:	2302      	movs	r3, #2
 800c416:	e048      	b.n	800c4aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	61da      	str	r2, [r3, #28]
 800c420:	e029      	b.n	800c476 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	895b      	ldrh	r3, [r3, #10]
 800c426:	025b      	lsls	r3, r3, #9
 800c428:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c42a:	e019      	b.n	800c460 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6979      	ldr	r1, [r7, #20]
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff fd00 	bl	800be36 <get_fat>
 800c436:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43e:	d101      	bne.n	800c444 <dir_sdi+0x88>
 800c440:	2301      	movs	r3, #1
 800c442:	e032      	b.n	800c4aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d904      	bls.n	800c454 <dir_sdi+0x98>
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	429a      	cmp	r2, r3
 800c452:	d301      	bcc.n	800c458 <dir_sdi+0x9c>
 800c454:	2302      	movs	r3, #2
 800c456:	e028      	b.n	800c4aa <dir_sdi+0xee>
			ofs -= csz;
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	429a      	cmp	r2, r3
 800c466:	d2e1      	bcs.n	800c42c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c468:	6979      	ldr	r1, [r7, #20]
 800c46a:	6938      	ldr	r0, [r7, #16]
 800c46c:	f7ff fcc4 	bl	800bdf8 <clust2sect>
 800c470:	4602      	mov	r2, r0
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <dir_sdi+0xcc>
 800c484:	2302      	movs	r3, #2
 800c486:	e010      	b.n	800c4aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	69da      	ldr	r2, [r3, #28]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	0a5b      	lsrs	r3, r3, #9
 800c490:	441a      	add	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a2:	441a      	add	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b086      	sub	sp, #24
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	3320      	adds	r3, #32
 800c4c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <dir_next+0x28>
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4d8:	d301      	bcc.n	800c4de <dir_next+0x2c>
 800c4da:	2304      	movs	r3, #4
 800c4dc:	e0aa      	b.n	800c634 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f040 8098 	bne.w	800c61a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10b      	bne.n	800c514 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	095b      	lsrs	r3, r3, #5
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	8912      	ldrh	r2, [r2, #8]
 800c504:	4293      	cmp	r3, r2
 800c506:	f0c0 8088 	bcc.w	800c61a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	61da      	str	r2, [r3, #28]
 800c510:	2304      	movs	r3, #4
 800c512:	e08f      	b.n	800c634 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	0a5b      	lsrs	r3, r3, #9
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	8952      	ldrh	r2, [r2, #10]
 800c51c:	3a01      	subs	r2, #1
 800c51e:	4013      	ands	r3, r2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d17a      	bne.n	800c61a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	4619      	mov	r1, r3
 800c52c:	4610      	mov	r0, r2
 800c52e:	f7ff fc82 	bl	800be36 <get_fat>
 800c532:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d801      	bhi.n	800c53e <dir_next+0x8c>
 800c53a:	2302      	movs	r3, #2
 800c53c:	e07a      	b.n	800c634 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d101      	bne.n	800c54a <dir_next+0x98>
 800c546:	2301      	movs	r3, #1
 800c548:	e074      	b.n	800c634 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	429a      	cmp	r2, r3
 800c552:	d358      	bcc.n	800c606 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d104      	bne.n	800c564 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	61da      	str	r2, [r3, #28]
 800c560:	2304      	movs	r3, #4
 800c562:	e067      	b.n	800c634 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	4619      	mov	r1, r3
 800c56c:	4610      	mov	r0, r2
 800c56e:	f7ff fe59 	bl	800c224 <create_chain>
 800c572:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <dir_next+0xcc>
 800c57a:	2307      	movs	r3, #7
 800c57c:	e05a      	b.n	800c634 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d101      	bne.n	800c588 <dir_next+0xd6>
 800c584:	2302      	movs	r3, #2
 800c586:	e055      	b.n	800c634 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58e:	d101      	bne.n	800c594 <dir_next+0xe2>
 800c590:	2301      	movs	r3, #1
 800c592:	e04f      	b.n	800c634 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff fb4f 	bl	800bc38 <sync_window>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <dir_next+0xf2>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e047      	b.n	800c634 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3334      	adds	r3, #52	; 0x34
 800c5a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff f979 	bl	800b8a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	6979      	ldr	r1, [r7, #20]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7ff fc1c 	bl	800bdf8 <clust2sect>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	631a      	str	r2, [r3, #48]	; 0x30
 800c5c6:	e012      	b.n	800c5ee <dir_next+0x13c>
						fs->wflag = 1;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f7ff fb32 	bl	800bc38 <sync_window>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <dir_next+0x12c>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e02a      	b.n	800c634 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	895b      	ldrh	r3, [r3, #10]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d3e6      	bcc.n	800c5c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	1ad2      	subs	r2, r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff fbf2 	bl	800bdf8 <clust2sect>
 800c614:	4602      	mov	r2, r0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62c:	441a      	add	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c64c:	2100      	movs	r1, #0
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff feb4 	bl	800c3bc <dir_sdi>
 800c654:	4603      	mov	r3, r0
 800c656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c658:	7dfb      	ldrb	r3, [r7, #23]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d12b      	bne.n	800c6b6 <dir_alloc+0x7a>
		n = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	4619      	mov	r1, r3
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fb29 	bl	800bcc0 <move_window>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d11d      	bne.n	800c6b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2be5      	cmp	r3, #229	; 0xe5
 800c680:	d004      	beq.n	800c68c <dir_alloc+0x50>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d107      	bne.n	800c69c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	3301      	adds	r3, #1
 800c690:	613b      	str	r3, [r7, #16]
 800c692:	693a      	ldr	r2, [r7, #16]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d102      	bne.n	800c6a0 <dir_alloc+0x64>
 800c69a:	e00c      	b.n	800c6b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c69c:	2300      	movs	r3, #0
 800c69e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff ff05 	bl	800c4b2 <dir_next>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0d7      	beq.n	800c662 <dir_alloc+0x26>
 800c6b2:	e000      	b.n	800c6b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	d101      	bne.n	800c6c0 <dir_alloc+0x84>
 800c6bc:	2307      	movs	r3, #7
 800c6be:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b084      	sub	sp, #16
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	331a      	adds	r3, #26
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff f841 	bl	800b760 <ld_word>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d109      	bne.n	800c6fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	3314      	adds	r3, #20
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff f836 	bl	800b760 <ld_word>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	041b      	lsls	r3, r3, #16
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	331a      	adds	r3, #26
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	b292      	uxth	r2, r2
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff f859 	bl	800b7d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b03      	cmp	r3, #3
 800c72a:	d109      	bne.n	800c740 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f103 0214 	add.w	r2, r3, #20
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	b29b      	uxth	r3, r3
 800c738:	4619      	mov	r1, r3
 800c73a:	4610      	mov	r0, r2
 800c73c:	f7ff f84b 	bl	800b7d6 <st_word>
	}
}
 800c740:	bf00      	nop
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c748:	b590      	push	{r4, r7, lr}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	331a      	adds	r3, #26
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff f802 	bl	800b760 <ld_word>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <cmp_lfn+0x1e>
 800c762:	2300      	movs	r3, #0
 800c764:	e059      	b.n	800c81a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c76e:	1e5a      	subs	r2, r3, #1
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c77c:	2301      	movs	r3, #1
 800c77e:	81fb      	strh	r3, [r7, #14]
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	e033      	b.n	800c7ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c786:	4a27      	ldr	r2, [pc, #156]	; (800c824 <cmp_lfn+0xdc>)
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	4413      	add	r3, r2
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	4413      	add	r3, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe ffe3 	bl	800b760 <ld_word>
 800c79a:	4603      	mov	r3, r0
 800c79c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c79e:	89fb      	ldrh	r3, [r7, #14]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01a      	beq.n	800c7da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2bfe      	cmp	r3, #254	; 0xfe
 800c7a8:	d812      	bhi.n	800c7d0 <cmp_lfn+0x88>
 800c7aa:	89bb      	ldrh	r3, [r7, #12]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fd0f 	bl	800e1d0 <ff_wtoupper>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461c      	mov	r4, r3
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	617a      	str	r2, [r7, #20]
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f001 fd03 	bl	800e1d0 <ff_wtoupper>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d001      	beq.n	800c7d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e022      	b.n	800c81a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7d4:	89bb      	ldrh	r3, [r7, #12]
 800c7d6:	81fb      	strh	r3, [r7, #14]
 800c7d8:	e006      	b.n	800c7e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7da:	89bb      	ldrh	r3, [r7, #12]
 800c7dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d001      	beq.n	800c7e8 <cmp_lfn+0xa0>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e018      	b.n	800c81a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	613b      	str	r3, [r7, #16]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b0c      	cmp	r3, #12
 800c7f2:	d9c8      	bls.n	800c786 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <cmp_lfn+0xd0>
 800c800:	89fb      	ldrh	r3, [r7, #14]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d008      	beq.n	800c818 <cmp_lfn+0xd0>
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	4413      	add	r3, r2
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <cmp_lfn+0xd0>
 800c814:	2300      	movs	r3, #0
 800c816:	e000      	b.n	800c81a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c818:	2301      	movs	r3, #1
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd90      	pop	{r4, r7, pc}
 800c822:	bf00      	nop
 800c824:	0800f148 	.word	0x0800f148

0800c828 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	4611      	mov	r1, r2
 800c834:	461a      	mov	r2, r3
 800c836:	460b      	mov	r3, r1
 800c838:	71fb      	strb	r3, [r7, #7]
 800c83a:	4613      	mov	r3, r2
 800c83c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	330d      	adds	r3, #13
 800c842:	79ba      	ldrb	r2, [r7, #6]
 800c844:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	330b      	adds	r3, #11
 800c84a:	220f      	movs	r2, #15
 800c84c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	330c      	adds	r3, #12
 800c852:	2200      	movs	r2, #0
 800c854:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	331a      	adds	r3, #26
 800c85a:	2100      	movs	r1, #0
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe ffba 	bl	800b7d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	1e5a      	subs	r2, r3, #1
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	82fb      	strh	r3, [r7, #22]
 800c876:	2300      	movs	r3, #0
 800c878:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c87a:	8afb      	ldrh	r3, [r7, #22]
 800c87c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c880:	4293      	cmp	r3, r2
 800c882:	d007      	beq.n	800c894 <put_lfn+0x6c>
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	61fa      	str	r2, [r7, #28]
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c894:	4a17      	ldr	r2, [pc, #92]	; (800c8f4 <put_lfn+0xcc>)
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	4413      	add	r3, r2
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	461a      	mov	r2, r3
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	8afa      	ldrh	r2, [r7, #22]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe ff95 	bl	800b7d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c8ac:	8afb      	ldrh	r3, [r7, #22]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d102      	bne.n	800c8b8 <put_lfn+0x90>
 800c8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b0c      	cmp	r3, #12
 800c8c2:	d9da      	bls.n	800c87a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c8c4:	8afb      	ldrh	r3, [r7, #22]
 800c8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d006      	beq.n	800c8dc <put_lfn+0xb4>
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d103      	bne.n	800c8e4 <put_lfn+0xbc>
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	79fa      	ldrb	r2, [r7, #7]
 800c8e8:	701a      	strb	r2, [r3, #0]
}
 800c8ea:	bf00      	nop
 800c8ec:	3720      	adds	r7, #32
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	0800f148 	.word	0x0800f148

0800c8f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08c      	sub	sp, #48	; 0x30
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c906:	220b      	movs	r2, #11
 800c908:	68b9      	ldr	r1, [r7, #8]
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7fe ffaa 	bl	800b864 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b05      	cmp	r3, #5
 800c914:	d92b      	bls.n	800c96e <gen_numname+0x76>
		sr = seq;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c91a:	e022      	b.n	800c962 <gen_numname+0x6a>
			wc = *lfn++;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	1c9a      	adds	r2, r3, #2
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c926:	2300      	movs	r3, #0
 800c928:	62bb      	str	r3, [r7, #40]	; 0x28
 800c92a:	e017      	b.n	800c95c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	005a      	lsls	r2, r3, #1
 800c930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	4413      	add	r3, r2
 800c938:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c93a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c93c:	085b      	lsrs	r3, r3, #1
 800c93e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <gen_numname+0x5e>
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c950:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c954:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	3301      	adds	r3, #1
 800c95a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	2b0f      	cmp	r3, #15
 800c960:	d9e4      	bls.n	800c92c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1d8      	bne.n	800c91c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c96e:	2307      	movs	r3, #7
 800c970:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	3330      	adds	r3, #48	; 0x30
 800c97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c986:	2b39      	cmp	r3, #57	; 0x39
 800c988:	d904      	bls.n	800c994 <gen_numname+0x9c>
 800c98a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c98e:	3307      	adds	r3, #7
 800c990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	1e5a      	subs	r2, r3, #1
 800c998:	62ba      	str	r2, [r7, #40]	; 0x28
 800c99a:	3330      	adds	r3, #48	; 0x30
 800c99c:	443b      	add	r3, r7
 800c99e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	091b      	lsrs	r3, r3, #4
 800c9aa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1df      	bne.n	800c972 <gen_numname+0x7a>
	ns[i] = '~';
 800c9b2:	f107 0214 	add.w	r2, r7, #20
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	4413      	add	r3, r2
 800c9ba:	227e      	movs	r2, #126	; 0x7e
 800c9bc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c9be:	2300      	movs	r3, #0
 800c9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c9c2:	e002      	b.n	800c9ca <gen_numname+0xd2>
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d205      	bcs.n	800c9de <gen_numname+0xe6>
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	4413      	add	r3, r2
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	d1f2      	bne.n	800c9c4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	2b07      	cmp	r3, #7
 800c9e2:	d807      	bhi.n	800c9f4 <gen_numname+0xfc>
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c9ea:	3330      	adds	r3, #48	; 0x30
 800c9ec:	443b      	add	r3, r7
 800c9ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c9f2:	e000      	b.n	800c9f6 <gen_numname+0xfe>
 800c9f4:	2120      	movs	r1, #32
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	460a      	mov	r2, r1
 800ca02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	2b07      	cmp	r3, #7
 800ca08:	d9e9      	bls.n	800c9de <gen_numname+0xe6>
}
 800ca0a:	bf00      	nop
 800ca0c:	bf00      	nop
 800ca0e:	3730      	adds	r7, #48	; 0x30
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ca20:	230b      	movs	r3, #11
 800ca22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	0852      	lsrs	r2, r2, #1
 800ca2a:	01db      	lsls	r3, r3, #7
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	1c59      	adds	r1, r3, #1
 800ca34:	6079      	str	r1, [r7, #4]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	4413      	add	r3, r2
 800ca3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	60bb      	str	r3, [r7, #8]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1ed      	bne.n	800ca24 <sum_sfn+0x10>
	return sum;
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca64:	2100      	movs	r1, #0
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff fca8 	bl	800c3bc <dir_sdi>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <dir_find+0x24>
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
 800ca78:	e0a9      	b.n	800cbce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca7a:	23ff      	movs	r3, #255	; 0xff
 800ca7c:	753b      	strb	r3, [r7, #20]
 800ca7e:	7d3b      	ldrb	r3, [r7, #20]
 800ca80:	757b      	strb	r3, [r7, #21]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f04f 32ff 	mov.w	r2, #4294967295
 800ca88:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	6938      	ldr	r0, [r7, #16]
 800ca92:	f7ff f915 	bl	800bcc0 <move_window>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f040 8090 	bne.w	800cbc2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800caaa:	7dbb      	ldrb	r3, [r7, #22]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <dir_find+0x60>
 800cab0:	2304      	movs	r3, #4
 800cab2:	75fb      	strb	r3, [r7, #23]
 800cab4:	e08a      	b.n	800cbcc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	330b      	adds	r3, #11
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac2:	73fb      	strb	r3, [r7, #15]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7bfa      	ldrb	r2, [r7, #15]
 800cac8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800caca:	7dbb      	ldrb	r3, [r7, #22]
 800cacc:	2be5      	cmp	r3, #229	; 0xe5
 800cace:	d007      	beq.n	800cae0 <dir_find+0x8a>
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	f003 0308 	and.w	r3, r3, #8
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d009      	beq.n	800caee <dir_find+0x98>
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	2b0f      	cmp	r3, #15
 800cade:	d006      	beq.n	800caee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cae0:	23ff      	movs	r3, #255	; 0xff
 800cae2:	757b      	strb	r3, [r7, #21]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f04f 32ff 	mov.w	r2, #4294967295
 800caea:	631a      	str	r2, [r3, #48]	; 0x30
 800caec:	e05e      	b.n	800cbac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d136      	bne.n	800cb62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d154      	bne.n	800cbac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
 800cb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00d      	beq.n	800cb28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	7b5b      	ldrb	r3, [r3, #13]
 800cb12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb14:	7dbb      	ldrb	r3, [r7, #22]
 800cb16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb1a:	75bb      	strb	r3, [r7, #22]
 800cb1c:	7dbb      	ldrb	r3, [r7, #22]
 800cb1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	695a      	ldr	r2, [r3, #20]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb28:	7dba      	ldrb	r2, [r7, #22]
 800cb2a:	7d7b      	ldrb	r3, [r7, #21]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d115      	bne.n	800cb5c <dir_find+0x106>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	330d      	adds	r3, #13
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	7d3a      	ldrb	r2, [r7, #20]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d10e      	bne.n	800cb5c <dir_find+0x106>
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7ff fdfd 	bl	800c748 <cmp_lfn>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <dir_find+0x106>
 800cb54:	7d7b      	ldrb	r3, [r7, #21]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	e000      	b.n	800cb5e <dir_find+0x108>
 800cb5c:	23ff      	movs	r3, #255	; 0xff
 800cb5e:	757b      	strb	r3, [r7, #21]
 800cb60:	e024      	b.n	800cbac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb62:	7d7b      	ldrb	r3, [r7, #21]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d109      	bne.n	800cb7c <dir_find+0x126>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff ff51 	bl	800ca14 <sum_sfn>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461a      	mov	r2, r3
 800cb76:	7d3b      	ldrb	r3, [r7, #20]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d024      	beq.n	800cbc6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <dir_find+0x14a>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a18      	ldr	r0, [r3, #32]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3324      	adds	r3, #36	; 0x24
 800cb92:	220b      	movs	r2, #11
 800cb94:	4619      	mov	r1, r3
 800cb96:	f7fe fea1 	bl	800b8dc <mem_cmp>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d014      	beq.n	800cbca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cba0:	23ff      	movs	r3, #255	; 0xff
 800cba2:	757b      	strb	r3, [r7, #21]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cbac:	2100      	movs	r1, #0
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff fc7f 	bl	800c4b2 <dir_next>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f43f af65 	beq.w	800ca8a <dir_find+0x34>
 800cbc0:	e004      	b.n	800cbcc <dir_find+0x176>
		if (res != FR_OK) break;
 800cbc2:	bf00      	nop
 800cbc4:	e002      	b.n	800cbcc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbc6:	bf00      	nop
 800cbc8:	e000      	b.n	800cbcc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbca:	bf00      	nop

	return res;
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08c      	sub	sp, #48	; 0x30
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <dir_register+0x20>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	e0e0      	b.n	800cdba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800cbfc:	e002      	b.n	800cc04 <dir_register+0x2c>
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc00:	3301      	adds	r3, #1
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	68da      	ldr	r2, [r3, #12]
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1f4      	bne.n	800cbfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	220c      	movs	r2, #12
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fe1f 	bl	800b864 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d032      	beq.n	800cc96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2240      	movs	r2, #64	; 0x40
 800cc34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc38:	2301      	movs	r3, #1
 800cc3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc3c:	e016      	b.n	800cc6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	f107 010c 	add.w	r1, r7, #12
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	f7ff fe53 	bl	800c8f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff feff 	bl	800ca56 <dir_find>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d106      	bne.n	800cc74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	3301      	adds	r3, #1
 800cc6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	2b63      	cmp	r3, #99	; 0x63
 800cc70:	d9e5      	bls.n	800cc3e <dir_register+0x66>
 800cc72:	e000      	b.n	800cc76 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cc74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	2b64      	cmp	r3, #100	; 0x64
 800cc7a:	d101      	bne.n	800cc80 <dir_register+0xa8>
 800cc7c:	2307      	movs	r3, #7
 800cc7e:	e09c      	b.n	800cdba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d002      	beq.n	800cc8e <dir_register+0xb6>
 800cc88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc8c:	e095      	b.n	800cdba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc8e:	7dfa      	ldrb	r2, [r7, #23]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	f003 0302 	and.w	r3, r3, #2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d007      	beq.n	800ccb0 <dir_register+0xd8>
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	330c      	adds	r3, #12
 800cca4:	4a47      	ldr	r2, [pc, #284]	; (800cdc4 <dir_register+0x1ec>)
 800cca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccaa:	089b      	lsrs	r3, r3, #2
 800ccac:	3301      	adds	r3, #1
 800ccae:	e000      	b.n	800ccb2 <dir_register+0xda>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ccb4:	6a39      	ldr	r1, [r7, #32]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fcc0 	bl	800c63c <dir_alloc>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ccc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d148      	bne.n	800cd5c <dir_register+0x184>
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	623b      	str	r3, [r7, #32]
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d042      	beq.n	800cd5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	695a      	ldr	r2, [r3, #20]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	015b      	lsls	r3, r3, #5
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fb6a 	bl	800c3bc <dir_sdi>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ccee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d132      	bne.n	800cd5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3324      	adds	r3, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fe8a 	bl	800ca14 <sum_sfn>
 800cd00:	4603      	mov	r3, r0
 800cd02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	69f8      	ldr	r0, [r7, #28]
 800cd0c:	f7fe ffd8 	bl	800bcc0 <move_window>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d11d      	bne.n	800cd5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	68d8      	ldr	r0, [r3, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a19      	ldr	r1, [r3, #32]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	7efb      	ldrb	r3, [r7, #27]
 800cd2c:	f7ff fd7c 	bl	800c828 <put_lfn>
				fs->wflag = 1;
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	2201      	movs	r2, #1
 800cd34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd36:	2100      	movs	r1, #0
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fbba 	bl	800c4b2 <dir_next>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <dir_register+0x184>
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	623b      	str	r3, [r7, #32]
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1d5      	bne.n	800cd04 <dir_register+0x12c>
 800cd58:	e000      	b.n	800cd5c <dir_register+0x184>
				if (res != FR_OK) break;
 800cd5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d128      	bne.n	800cdb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	69f8      	ldr	r0, [r7, #28]
 800cd6c:	f7fe ffa8 	bl	800bcc0 <move_window>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d11b      	bne.n	800cdb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	2220      	movs	r2, #32
 800cd84:	2100      	movs	r1, #0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fd8d 	bl	800b8a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a18      	ldr	r0, [r3, #32]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3324      	adds	r3, #36	; 0x24
 800cd94:	220b      	movs	r2, #11
 800cd96:	4619      	mov	r1, r3
 800cd98:	f7fe fd64 	bl	800b864 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	330c      	adds	r3, #12
 800cda8:	f002 0218 	and.w	r2, r2, #24
 800cdac:	b2d2      	uxtb	r2, r2
 800cdae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cdb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3730      	adds	r7, #48	; 0x30
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	4ec4ec4f 	.word	0x4ec4ec4f

0800cdc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	613b      	str	r3, [r7, #16]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	61ba      	str	r2, [r7, #24]
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cdf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdf8:	2b1f      	cmp	r3, #31
 800cdfa:	d940      	bls.n	800ce7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cdfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfe:	2b2f      	cmp	r3, #47	; 0x2f
 800ce00:	d006      	beq.n	800ce10 <create_name+0x48>
 800ce02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce04:	2b5c      	cmp	r3, #92	; 0x5c
 800ce06:	d110      	bne.n	800ce2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce08:	e002      	b.n	800ce10 <create_name+0x48>
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	4413      	add	r3, r2
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b2f      	cmp	r3, #47	; 0x2f
 800ce1a:	d0f6      	beq.n	800ce0a <create_name+0x42>
 800ce1c:	693a      	ldr	r2, [r7, #16]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	4413      	add	r3, r2
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b5c      	cmp	r3, #92	; 0x5c
 800ce26:	d0f0      	beq.n	800ce0a <create_name+0x42>
			break;
 800ce28:	e02a      	b.n	800ce80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2bfe      	cmp	r3, #254	; 0xfe
 800ce2e:	d901      	bls.n	800ce34 <create_name+0x6c>
 800ce30:	2306      	movs	r3, #6
 800ce32:	e17d      	b.n	800d130 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ce34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 f98a 	bl	800e158 <ff_convert>
 800ce44:	4603      	mov	r3, r0
 800ce46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <create_name+0x8a>
 800ce4e:	2306      	movs	r3, #6
 800ce50:	e16e      	b.n	800d130 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce54:	2b7f      	cmp	r3, #127	; 0x7f
 800ce56:	d809      	bhi.n	800ce6c <create_name+0xa4>
 800ce58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	488d      	ldr	r0, [pc, #564]	; (800d094 <create_name+0x2cc>)
 800ce5e:	f7fe fd64 	bl	800b92a <chk_chr>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <create_name+0xa4>
 800ce68:	2306      	movs	r3, #6
 800ce6a:	e161      	b.n	800d130 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	617a      	str	r2, [r7, #20]
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ce7c:	e7b4      	b.n	800cde8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ce7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	441a      	add	r2, r3
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce8c:	2b1f      	cmp	r3, #31
 800ce8e:	d801      	bhi.n	800ce94 <create_name+0xcc>
 800ce90:	2304      	movs	r3, #4
 800ce92:	e000      	b.n	800ce96 <create_name+0xce>
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce9a:	e011      	b.n	800cec0 <create_name+0xf8>
		w = lfn[di - 1];
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cea2:	3b01      	subs	r3, #1
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ceae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb0:	2b20      	cmp	r3, #32
 800ceb2:	d002      	beq.n	800ceba <create_name+0xf2>
 800ceb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb8:	d106      	bne.n	800cec8 <create_name+0x100>
		di--;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1ea      	bne.n	800ce9c <create_name+0xd4>
 800cec6:	e000      	b.n	800ceca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cec8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <create_name+0x118>
 800cedc:	2306      	movs	r3, #6
 800cede:	e127      	b.n	800d130 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	3324      	adds	r3, #36	; 0x24
 800cee4:	220b      	movs	r2, #11
 800cee6:	2120      	movs	r1, #32
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fcdc 	bl	800b8a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ceee:	2300      	movs	r3, #0
 800cef0:	61bb      	str	r3, [r7, #24]
 800cef2:	e002      	b.n	800cefa <create_name+0x132>
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	3301      	adds	r3, #1
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	4413      	add	r3, r2
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d0f5      	beq.n	800cef4 <create_name+0x12c>
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b2e      	cmp	r3, #46	; 0x2e
 800cf14:	d0ee      	beq.n	800cef4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d009      	beq.n	800cf30 <create_name+0x168>
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	f043 0303 	orr.w	r3, r3, #3
 800cf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cf28:	e002      	b.n	800cf30 <create_name+0x168>
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d009      	beq.n	800cf4a <create_name+0x182>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	2b2e      	cmp	r3, #46	; 0x2e
 800cf48:	d1ef      	bne.n	800cf2a <create_name+0x162>

	i = b = 0; ni = 8;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf50:	2300      	movs	r3, #0
 800cf52:	623b      	str	r3, [r7, #32]
 800cf54:	2308      	movs	r3, #8
 800cf56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	61ba      	str	r2, [r7, #24]
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	4413      	add	r3, r2
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cf68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 8090 	beq.w	800d090 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cf70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	d006      	beq.n	800cf84 <create_name+0x1bc>
 800cf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf78:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7a:	d10a      	bne.n	800cf92 <create_name+0x1ca>
 800cf7c:	69ba      	ldr	r2, [r7, #24]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d006      	beq.n	800cf92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf88:	f043 0303 	orr.w	r3, r3, #3
 800cf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf90:	e07d      	b.n	800d08e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cf92:	6a3a      	ldr	r2, [r7, #32]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d203      	bcs.n	800cfa2 <create_name+0x1da>
 800cf9a:	69ba      	ldr	r2, [r7, #24]
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d123      	bne.n	800cfea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	2b0b      	cmp	r3, #11
 800cfa6:	d106      	bne.n	800cfb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfac:	f043 0303 	orr.w	r3, r3, #3
 800cfb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfb4:	e075      	b.n	800d0a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d005      	beq.n	800cfca <create_name+0x202>
 800cfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc2:	f043 0303 	orr.w	r3, r3, #3
 800cfc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cfca:	69ba      	ldr	r2, [r7, #24]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d866      	bhi.n	800d0a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	61bb      	str	r3, [r7, #24]
 800cfd6:	2308      	movs	r3, #8
 800cfd8:	623b      	str	r3, [r7, #32]
 800cfda:	230b      	movs	r3, #11
 800cfdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cfde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfe8:	e051      	b.n	800d08e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfec:	2b7f      	cmp	r3, #127	; 0x7f
 800cfee:	d914      	bls.n	800d01a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f001 f8af 	bl	800e158 <ff_convert>
 800cffa:	4603      	mov	r3, r0
 800cffc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	d004      	beq.n	800d00e <create_name+0x246>
 800d004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d006:	3b80      	subs	r3, #128	; 0x80
 800d008:	4a23      	ldr	r2, [pc, #140]	; (800d098 <create_name+0x2d0>)
 800d00a:	5cd3      	ldrb	r3, [r2, r3]
 800d00c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d012:	f043 0302 	orr.w	r3, r3, #2
 800d016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d007      	beq.n	800d030 <create_name+0x268>
 800d020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d022:	4619      	mov	r1, r3
 800d024:	481d      	ldr	r0, [pc, #116]	; (800d09c <create_name+0x2d4>)
 800d026:	f7fe fc80 	bl	800b92a <chk_chr>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d008      	beq.n	800d042 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d030:	235f      	movs	r3, #95	; 0x5f
 800d032:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d038:	f043 0303 	orr.w	r3, r3, #3
 800d03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d040:	e01b      	b.n	800d07a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d044:	2b40      	cmp	r3, #64	; 0x40
 800d046:	d909      	bls.n	800d05c <create_name+0x294>
 800d048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d04a:	2b5a      	cmp	r3, #90	; 0x5a
 800d04c:	d806      	bhi.n	800d05c <create_name+0x294>
					b |= 2;
 800d04e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d052:	f043 0302 	orr.w	r3, r3, #2
 800d056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d05a:	e00e      	b.n	800d07a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d05e:	2b60      	cmp	r3, #96	; 0x60
 800d060:	d90b      	bls.n	800d07a <create_name+0x2b2>
 800d062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d064:	2b7a      	cmp	r3, #122	; 0x7a
 800d066:	d808      	bhi.n	800d07a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d06c:	f043 0301 	orr.w	r3, r3, #1
 800d070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d076:	3b20      	subs	r3, #32
 800d078:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	623a      	str	r2, [r7, #32]
 800d080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d082:	b2d1      	uxtb	r1, r2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	460a      	mov	r2, r1
 800d08a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d08e:	e763      	b.n	800cf58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d090:	bf00      	nop
 800d092:	e006      	b.n	800d0a2 <create_name+0x2da>
 800d094:	0800efe0 	.word	0x0800efe0
 800d098:	0800f0c8 	.word	0x0800f0c8
 800d09c:	0800efec 	.word	0x0800efec
			if (si > di) break;			/* No extension */
 800d0a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d0a8:	2be5      	cmp	r3, #229	; 0xe5
 800d0aa:	d103      	bne.n	800d0b4 <create_name+0x2ec>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2205      	movs	r2, #5
 800d0b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d104      	bne.n	800d0c4 <create_name+0x2fc>
 800d0ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c8:	f003 030c 	and.w	r3, r3, #12
 800d0cc:	2b0c      	cmp	r3, #12
 800d0ce:	d005      	beq.n	800d0dc <create_name+0x314>
 800d0d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0d4:	f003 0303 	and.w	r3, r3, #3
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d105      	bne.n	800d0e8 <create_name+0x320>
 800d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e0:	f043 0302 	orr.w	r3, r3, #2
 800d0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ec:	f003 0302 	and.w	r3, r3, #2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d117      	bne.n	800d124 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d0f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d105      	bne.n	800d10c <create_name+0x344>
 800d100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d104:	f043 0310 	orr.w	r3, r3, #16
 800d108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d10c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d110:	f003 030c 	and.w	r3, r3, #12
 800d114:	2b04      	cmp	r3, #4
 800d116:	d105      	bne.n	800d124 <create_name+0x35c>
 800d118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d11c:	f043 0308 	orr.w	r3, r3, #8
 800d120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d12a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d12e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d130:	4618      	mov	r0, r3
 800d132:	3728      	adds	r7, #40	; 0x28
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d14c:	e002      	b.n	800d154 <follow_path+0x1c>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	3301      	adds	r3, #1
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b2f      	cmp	r3, #47	; 0x2f
 800d15a:	d0f8      	beq.n	800d14e <follow_path+0x16>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b5c      	cmp	r3, #92	; 0x5c
 800d162:	d0f4      	beq.n	800d14e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	2200      	movs	r2, #0
 800d168:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b1f      	cmp	r3, #31
 800d170:	d80a      	bhi.n	800d188 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2280      	movs	r2, #128	; 0x80
 800d176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d17a:	2100      	movs	r1, #0
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff f91d 	bl	800c3bc <dir_sdi>
 800d182:	4603      	mov	r3, r0
 800d184:	75fb      	strb	r3, [r7, #23]
 800d186:	e043      	b.n	800d210 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d188:	463b      	mov	r3, r7
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fe1b 	bl	800cdc8 <create_name>
 800d192:	4603      	mov	r3, r0
 800d194:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d134      	bne.n	800d206 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff fc5a 	bl	800ca56 <dir_find>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00a      	beq.n	800d1ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d127      	bne.n	800d20a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d1ba:	7afb      	ldrb	r3, [r7, #11]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d122      	bne.n	800d20a <follow_path+0xd2>
 800d1c4:	2305      	movs	r3, #5
 800d1c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d1c8:	e01f      	b.n	800d20a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1ca:	7afb      	ldrb	r3, [r7, #11]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d11c      	bne.n	800d20e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	799b      	ldrb	r3, [r3, #6]
 800d1d8:	f003 0310 	and.w	r3, r3, #16
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d1e0:	2305      	movs	r3, #5
 800d1e2:	75fb      	strb	r3, [r7, #23]
 800d1e4:	e014      	b.n	800d210 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff fa66 	bl	800c6ca <ld_clust>
 800d1fe:	4602      	mov	r2, r0
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d204:	e7c0      	b.n	800d188 <follow_path+0x50>
			if (res != FR_OK) break;
 800d206:	bf00      	nop
 800d208:	e002      	b.n	800d210 <follow_path+0xd8>
				break;
 800d20a:	bf00      	nop
 800d20c:	e000      	b.n	800d210 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d20e:	bf00      	nop
			}
		}
	}

	return res;
 800d210:	7dfb      	ldrb	r3, [r7, #23]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b087      	sub	sp, #28
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d222:	f04f 33ff 	mov.w	r3, #4294967295
 800d226:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d031      	beq.n	800d294 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	617b      	str	r3, [r7, #20]
 800d236:	e002      	b.n	800d23e <get_ldnumber+0x24>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	3301      	adds	r3, #1
 800d23c:	617b      	str	r3, [r7, #20]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b1f      	cmp	r3, #31
 800d244:	d903      	bls.n	800d24e <get_ldnumber+0x34>
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b3a      	cmp	r3, #58	; 0x3a
 800d24c:	d1f4      	bne.n	800d238 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b3a      	cmp	r3, #58	; 0x3a
 800d254:	d11c      	bne.n	800d290 <get_ldnumber+0x76>
			tp = *path;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	60fa      	str	r2, [r7, #12]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	3b30      	subs	r3, #48	; 0x30
 800d266:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2b09      	cmp	r3, #9
 800d26c:	d80e      	bhi.n	800d28c <get_ldnumber+0x72>
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	429a      	cmp	r2, r3
 800d274:	d10a      	bne.n	800d28c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d107      	bne.n	800d28c <get_ldnumber+0x72>
					vol = (int)i;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	3301      	adds	r3, #1
 800d284:	617b      	str	r3, [r7, #20]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	e002      	b.n	800d296 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d290:	2300      	movs	r3, #0
 800d292:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d294:	693b      	ldr	r3, [r7, #16]
}
 800d296:	4618      	mov	r0, r3
 800d298:	371c      	adds	r7, #28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	70da      	strb	r2, [r3, #3]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7fe fcfe 	bl	800bcc0 <move_window>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <check_fs+0x2a>
 800d2ca:	2304      	movs	r3, #4
 800d2cc:	e038      	b.n	800d340 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3334      	adds	r3, #52	; 0x34
 800d2d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe fa42 	bl	800b760 <ld_word>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d001      	beq.n	800d2ec <check_fs+0x48>
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e029      	b.n	800d340 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2f2:	2be9      	cmp	r3, #233	; 0xe9
 800d2f4:	d009      	beq.n	800d30a <check_fs+0x66>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2fc:	2beb      	cmp	r3, #235	; 0xeb
 800d2fe:	d11e      	bne.n	800d33e <check_fs+0x9a>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d306:	2b90      	cmp	r3, #144	; 0x90
 800d308:	d119      	bne.n	800d33e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3334      	adds	r3, #52	; 0x34
 800d30e:	3336      	adds	r3, #54	; 0x36
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fa3d 	bl	800b790 <ld_dword>
 800d316:	4603      	mov	r3, r0
 800d318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d31c:	4a0a      	ldr	r2, [pc, #40]	; (800d348 <check_fs+0xa4>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d101      	bne.n	800d326 <check_fs+0x82>
 800d322:	2300      	movs	r3, #0
 800d324:	e00c      	b.n	800d340 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3334      	adds	r3, #52	; 0x34
 800d32a:	3352      	adds	r3, #82	; 0x52
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe fa2f 	bl	800b790 <ld_dword>
 800d332:	4603      	mov	r3, r0
 800d334:	4a05      	ldr	r2, [pc, #20]	; (800d34c <check_fs+0xa8>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d101      	bne.n	800d33e <check_fs+0x9a>
 800d33a:	2300      	movs	r3, #0
 800d33c:	e000      	b.n	800d340 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d33e:	2302      	movs	r3, #2
}
 800d340:	4618      	mov	r0, r3
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	00544146 	.word	0x00544146
 800d34c:	33544146 	.word	0x33544146

0800d350 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b096      	sub	sp, #88	; 0x58
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	4613      	mov	r3, r2
 800d35c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7ff ff58 	bl	800d21a <get_ldnumber>
 800d36a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	da01      	bge.n	800d376 <find_volume+0x26>
 800d372:	230b      	movs	r3, #11
 800d374:	e230      	b.n	800d7d8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d376:	4aa1      	ldr	r2, [pc, #644]	; (800d5fc <find_volume+0x2ac>)
 800d378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d37e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	2b00      	cmp	r3, #0
 800d384:	d101      	bne.n	800d38a <find_volume+0x3a>
 800d386:	230c      	movs	r3, #12
 800d388:	e226      	b.n	800d7d8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d38e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	f023 0301 	bic.w	r3, r3, #1
 800d396:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01a      	beq.n	800d3d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	785b      	ldrb	r3, [r3, #1]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe f93d 	bl	800b624 <disk_status>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d3b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10c      	bne.n	800d3d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d3bc:	79fb      	ldrb	r3, [r7, #7]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d007      	beq.n	800d3d2 <find_volume+0x82>
 800d3c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d001      	beq.n	800d3d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d3ce:	230a      	movs	r3, #10
 800d3d0:	e202      	b.n	800d7d8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	e200      	b.n	800d7d8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	2200      	movs	r2, #0
 800d3da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe f935 	bl	800b658 <disk_initialize>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d400:	2303      	movs	r3, #3
 800d402:	e1e9      	b.n	800d7d8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d404:	79fb      	ldrb	r3, [r7, #7]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d007      	beq.n	800d41a <find_volume+0xca>
 800d40a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d40e:	f003 0304 	and.w	r3, r3, #4
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d416:	230a      	movs	r3, #10
 800d418:	e1de      	b.n	800d7d8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d41e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d422:	f7ff ff3f 	bl	800d2a4 <check_fs>
 800d426:	4603      	mov	r3, r0
 800d428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d42c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d430:	2b02      	cmp	r3, #2
 800d432:	d149      	bne.n	800d4c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d434:	2300      	movs	r3, #0
 800d436:	643b      	str	r3, [r7, #64]	; 0x40
 800d438:	e01e      	b.n	800d478 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d442:	011b      	lsls	r3, r3, #4
 800d444:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d448:	4413      	add	r3, r2
 800d44a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	3304      	adds	r3, #4
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d006      	beq.n	800d464 <find_volume+0x114>
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	3308      	adds	r3, #8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f998 	bl	800b790 <ld_dword>
 800d460:	4602      	mov	r2, r0
 800d462:	e000      	b.n	800d466 <find_volume+0x116>
 800d464:	2200      	movs	r2, #0
 800d466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	3358      	adds	r3, #88	; 0x58
 800d46c:	443b      	add	r3, r7
 800d46e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d474:	3301      	adds	r3, #1
 800d476:	643b      	str	r3, [r7, #64]	; 0x40
 800d478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d9dd      	bls.n	800d43a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d47e:	2300      	movs	r3, #0
 800d480:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <find_volume+0x13e>
 800d488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48a:	3b01      	subs	r3, #1
 800d48c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	3358      	adds	r3, #88	; 0x58
 800d494:	443b      	add	r3, r7
 800d496:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d49a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d005      	beq.n	800d4ae <find_volume+0x15e>
 800d4a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4a6:	f7ff fefd 	bl	800d2a4 <check_fs>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	e000      	b.n	800d4b0 <find_volume+0x160>
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d905      	bls.n	800d4c8 <find_volume+0x178>
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4be:	3301      	adds	r3, #1
 800d4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d9e2      	bls.n	800d48e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	d101      	bne.n	800d4d4 <find_volume+0x184>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e181      	b.n	800d7d8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d901      	bls.n	800d4e0 <find_volume+0x190>
 800d4dc:	230d      	movs	r3, #13
 800d4de:	e17b      	b.n	800d7d8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	3334      	adds	r3, #52	; 0x34
 800d4e4:	330b      	adds	r3, #11
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe f93a 	bl	800b760 <ld_word>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4f2:	d001      	beq.n	800d4f8 <find_volume+0x1a8>
 800d4f4:	230d      	movs	r3, #13
 800d4f6:	e16f      	b.n	800d7d8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	3334      	adds	r3, #52	; 0x34
 800d4fc:	3316      	adds	r3, #22
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe f92e 	bl	800b760 <ld_word>
 800d504:	4603      	mov	r3, r0
 800d506:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <find_volume+0x1cc>
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	3334      	adds	r3, #52	; 0x34
 800d512:	3324      	adds	r3, #36	; 0x24
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe f93b 	bl	800b790 <ld_dword>
 800d51a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d520:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d524:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52e:	789b      	ldrb	r3, [r3, #2]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d005      	beq.n	800d540 <find_volume+0x1f0>
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	789b      	ldrb	r3, [r3, #2]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d001      	beq.n	800d540 <find_volume+0x1f0>
 800d53c:	230d      	movs	r3, #13
 800d53e:	e14b      	b.n	800d7d8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	789b      	ldrb	r3, [r3, #2]
 800d544:	461a      	mov	r2, r3
 800d546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d548:	fb02 f303 	mul.w	r3, r2, r3
 800d54c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d554:	b29a      	uxth	r2, r3
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	895b      	ldrh	r3, [r3, #10]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d008      	beq.n	800d574 <find_volume+0x224>
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	895b      	ldrh	r3, [r3, #10]
 800d566:	461a      	mov	r2, r3
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	895b      	ldrh	r3, [r3, #10]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	4013      	ands	r3, r2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <find_volume+0x228>
 800d574:	230d      	movs	r3, #13
 800d576:	e12f      	b.n	800d7d8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	3334      	adds	r3, #52	; 0x34
 800d57c:	3311      	adds	r3, #17
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe f8ee 	bl	800b760 <ld_word>
 800d584:	4603      	mov	r3, r0
 800d586:	461a      	mov	r2, r3
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	891b      	ldrh	r3, [r3, #8]
 800d590:	f003 030f 	and.w	r3, r3, #15
 800d594:	b29b      	uxth	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <find_volume+0x24e>
 800d59a:	230d      	movs	r3, #13
 800d59c:	e11c      	b.n	800d7d8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	3334      	adds	r3, #52	; 0x34
 800d5a2:	3313      	adds	r3, #19
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fe f8db 	bl	800b760 <ld_word>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d106      	bne.n	800d5c2 <find_volume+0x272>
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	3334      	adds	r3, #52	; 0x34
 800d5b8:	3320      	adds	r3, #32
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe f8e8 	bl	800b790 <ld_dword>
 800d5c0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c4:	3334      	adds	r3, #52	; 0x34
 800d5c6:	330e      	adds	r3, #14
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe f8c9 	bl	800b760 <ld_word>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <find_volume+0x28c>
 800d5d8:	230d      	movs	r3, #13
 800d5da:	e0fd      	b.n	800d7d8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e0:	4413      	add	r3, r2
 800d5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e4:	8912      	ldrh	r2, [r2, #8]
 800d5e6:	0912      	lsrs	r2, r2, #4
 800d5e8:	b292      	uxth	r2, r2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d204      	bcs.n	800d600 <find_volume+0x2b0>
 800d5f6:	230d      	movs	r3, #13
 800d5f8:	e0ee      	b.n	800d7d8 <find_volume+0x488>
 800d5fa:	bf00      	nop
 800d5fc:	200007e0 	.word	0x200007e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d608:	8952      	ldrh	r2, [r2, #10]
 800d60a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <find_volume+0x2ca>
 800d616:	230d      	movs	r3, #13
 800d618:	e0de      	b.n	800d7d8 <find_volume+0x488>
		fmt = FS_FAT32;
 800d61a:	2303      	movs	r3, #3
 800d61c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d626:	4293      	cmp	r3, r2
 800d628:	d802      	bhi.n	800d630 <find_volume+0x2e0>
 800d62a:	2302      	movs	r3, #2
 800d62c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d636:	4293      	cmp	r3, r2
 800d638:	d802      	bhi.n	800d640 <find_volume+0x2f0>
 800d63a:	2301      	movs	r3, #1
 800d63c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	1c9a      	adds	r2, r3, #2
 800d644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d646:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d64c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d64e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d652:	441a      	add	r2, r3
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	441a      	add	r2, r3
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d666:	2b03      	cmp	r3, #3
 800d668:	d11e      	bne.n	800d6a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	3334      	adds	r3, #52	; 0x34
 800d66e:	332a      	adds	r3, #42	; 0x2a
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe f875 	bl	800b760 <ld_word>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d001      	beq.n	800d680 <find_volume+0x330>
 800d67c:	230d      	movs	r3, #13
 800d67e:	e0ab      	b.n	800d7d8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	891b      	ldrh	r3, [r3, #8]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <find_volume+0x33c>
 800d688:	230d      	movs	r3, #13
 800d68a:	e0a5      	b.n	800d7d8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	3334      	adds	r3, #52	; 0x34
 800d690:	332c      	adds	r3, #44	; 0x2c
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe f87c 	bl	800b790 <ld_dword>
 800d698:	4602      	mov	r2, r0
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d6a6:	e01f      	b.n	800d6e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	891b      	ldrh	r3, [r3, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <find_volume+0x364>
 800d6b0:	230d      	movs	r3, #13
 800d6b2:	e091      	b.n	800d7d8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ba:	441a      	add	r2, r3
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d6c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d103      	bne.n	800d6d0 <find_volume+0x380>
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	e00a      	b.n	800d6e6 <find_volume+0x396>
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	699a      	ldr	r2, [r3, #24]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	085a      	lsrs	r2, r3, #1
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	69da      	ldr	r2, [r3, #28]
 800d6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d6f2:	0a5b      	lsrs	r3, r3, #9
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d201      	bcs.n	800d6fc <find_volume+0x3ac>
 800d6f8:	230d      	movs	r3, #13
 800d6fa:	e06d      	b.n	800d7d8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	615a      	str	r2, [r3, #20]
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	695a      	ldr	r2, [r3, #20]
 800d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70e:	2280      	movs	r2, #128	; 0x80
 800d710:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d716:	2b03      	cmp	r3, #3
 800d718:	d149      	bne.n	800d7ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	3334      	adds	r3, #52	; 0x34
 800d71e:	3330      	adds	r3, #48	; 0x30
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe f81d 	bl	800b760 <ld_word>
 800d726:	4603      	mov	r3, r0
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d140      	bne.n	800d7ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72e:	3301      	adds	r3, #1
 800d730:	4619      	mov	r1, r3
 800d732:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d734:	f7fe fac4 	bl	800bcc0 <move_window>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d137      	bne.n	800d7ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	2200      	movs	r2, #0
 800d742:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	3334      	adds	r3, #52	; 0x34
 800d748:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe f807 	bl	800b760 <ld_word>
 800d752:	4603      	mov	r3, r0
 800d754:	461a      	mov	r2, r3
 800d756:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d127      	bne.n	800d7ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	3334      	adds	r3, #52	; 0x34
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe f814 	bl	800b790 <ld_dword>
 800d768:	4603      	mov	r3, r0
 800d76a:	4a1d      	ldr	r2, [pc, #116]	; (800d7e0 <find_volume+0x490>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d11e      	bne.n	800d7ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d772:	3334      	adds	r3, #52	; 0x34
 800d774:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe f809 	bl	800b790 <ld_dword>
 800d77e:	4603      	mov	r3, r0
 800d780:	4a18      	ldr	r2, [pc, #96]	; (800d7e4 <find_volume+0x494>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d113      	bne.n	800d7ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	3334      	adds	r3, #52	; 0x34
 800d78a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fd fffe 	bl	800b790 <ld_dword>
 800d794:	4602      	mov	r2, r0
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	3334      	adds	r3, #52	; 0x34
 800d79e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fd fff4 	bl	800b790 <ld_dword>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d7b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d7b6:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <find_volume+0x498>)
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <find_volume+0x498>)
 800d7c0:	801a      	strh	r2, [r3, #0]
 800d7c2:	4b09      	ldr	r3, [pc, #36]	; (800d7e8 <find_volume+0x498>)
 800d7c4:	881a      	ldrh	r2, [r3, #0]
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7cc:	4a07      	ldr	r2, [pc, #28]	; (800d7ec <find_volume+0x49c>)
 800d7ce:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7d2:	f7fe fa0d 	bl	800bbf0 <clear_lock>
#endif
	return FR_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3758      	adds	r7, #88	; 0x58
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	41615252 	.word	0x41615252
 800d7e4:	61417272 	.word	0x61417272
 800d7e8:	200007e4 	.word	0x200007e4
 800d7ec:	20000808 	.word	0x20000808

0800d7f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d7fa:	2309      	movs	r3, #9
 800d7fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d01c      	beq.n	800d83e <validate+0x4e>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d018      	beq.n	800d83e <validate+0x4e>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d013      	beq.n	800d83e <validate+0x4e>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	889a      	ldrh	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	88db      	ldrh	r3, [r3, #6]
 800d820:	429a      	cmp	r2, r3
 800d822:	d10c      	bne.n	800d83e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	785b      	ldrb	r3, [r3, #1]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fd fefa 	bl	800b624 <disk_status>
 800d830:	4603      	mov	r3, r0
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	2b00      	cmp	r3, #0
 800d838:	d101      	bne.n	800d83e <validate+0x4e>
			res = FR_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <validate+0x5a>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	e000      	b.n	800d84c <validate+0x5c>
 800d84a:	2300      	movs	r3, #0
 800d84c:	683a      	ldr	r2, [r7, #0]
 800d84e:	6013      	str	r3, [r2, #0]
	return res;
 800d850:	7bfb      	ldrb	r3, [r7, #15]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b088      	sub	sp, #32
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	4613      	mov	r3, r2
 800d868:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d86e:	f107 0310 	add.w	r3, r7, #16
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff fcd1 	bl	800d21a <get_ldnumber>
 800d878:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	da01      	bge.n	800d884 <f_mount+0x28>
 800d880:	230b      	movs	r3, #11
 800d882:	e02b      	b.n	800d8dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d884:	4a17      	ldr	r2, [pc, #92]	; (800d8e4 <f_mount+0x88>)
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d88c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d005      	beq.n	800d8a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d894:	69b8      	ldr	r0, [r7, #24]
 800d896:	f7fe f9ab 	bl	800bbf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	490d      	ldr	r1, [pc, #52]	; (800d8e4 <f_mount+0x88>)
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <f_mount+0x66>
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d001      	beq.n	800d8c6 <f_mount+0x6a>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e00a      	b.n	800d8dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d8c6:	f107 010c 	add.w	r1, r7, #12
 800d8ca:	f107 0308 	add.w	r3, r7, #8
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff fd3d 	bl	800d350 <find_volume>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	200007e0 	.word	0x200007e0

0800d8e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b09a      	sub	sp, #104	; 0x68
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <f_open+0x18>
 800d8fc:	2309      	movs	r3, #9
 800d8fe:	e1ad      	b.n	800dc5c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d906:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d908:	79fa      	ldrb	r2, [r7, #7]
 800d90a:	f107 0114 	add.w	r1, r7, #20
 800d90e:	f107 0308 	add.w	r3, r7, #8
 800d912:	4618      	mov	r0, r3
 800d914:	f7ff fd1c 	bl	800d350 <find_volume>
 800d918:	4603      	mov	r3, r0
 800d91a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d91e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d922:	2b00      	cmp	r3, #0
 800d924:	f040 8191 	bne.w	800dc4a <f_open+0x362>
		dj.obj.fs = fs;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	f107 0318 	add.w	r3, r7, #24
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff fbff 	bl	800d138 <follow_path>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11a      	bne.n	800d97e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d94c:	b25b      	sxtb	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	da03      	bge.n	800d95a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d952:	2306      	movs	r3, #6
 800d954:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d958:	e011      	b.n	800d97e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	f023 0301 	bic.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	bf14      	ite	ne
 800d964:	2301      	movne	r3, #1
 800d966:	2300      	moveq	r3, #0
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	461a      	mov	r2, r3
 800d96c:	f107 0318 	add.w	r3, r7, #24
 800d970:	4611      	mov	r1, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f7fd fff4 	bl	800b960 <chk_lock>
 800d978:	4603      	mov	r3, r0
 800d97a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	f003 031c 	and.w	r3, r3, #28
 800d984:	2b00      	cmp	r3, #0
 800d986:	d07f      	beq.n	800da88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d017      	beq.n	800d9c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d994:	2b04      	cmp	r3, #4
 800d996:	d10e      	bne.n	800d9b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d998:	f7fe f83e 	bl	800ba18 <enq_lock>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d006      	beq.n	800d9b0 <f_open+0xc8>
 800d9a2:	f107 0318 	add.w	r3, r7, #24
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff f916 	bl	800cbd8 <dir_register>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	e000      	b.n	800d9b2 <f_open+0xca>
 800d9b0:	2312      	movs	r3, #18
 800d9b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	f043 0308 	orr.w	r3, r3, #8
 800d9bc:	71fb      	strb	r3, [r7, #7]
 800d9be:	e010      	b.n	800d9e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d9c0:	7fbb      	ldrb	r3, [r7, #30]
 800d9c2:	f003 0311 	and.w	r3, r3, #17
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d003      	beq.n	800d9d2 <f_open+0xea>
					res = FR_DENIED;
 800d9ca:	2307      	movs	r3, #7
 800d9cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9d0:	e007      	b.n	800d9e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	f003 0304 	and.w	r3, r3, #4
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <f_open+0xfa>
 800d9dc:	2308      	movs	r3, #8
 800d9de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d9e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d168      	bne.n	800dabc <f_open+0x1d4>
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	f003 0308 	and.w	r3, r3, #8
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d063      	beq.n	800dabc <f_open+0x1d4>
				dw = GET_FATTIME();
 800d9f4:	f7fa f99e 	bl	8007d34 <get_fattime>
 800d9f8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fc:	330e      	adds	r3, #14
 800d9fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da00:	4618      	mov	r0, r3
 800da02:	f7fd ff03 	bl	800b80c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	3316      	adds	r3, #22
 800da0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fd fefd 	bl	800b80c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	330b      	adds	r3, #11
 800da16:	2220      	movs	r2, #32
 800da18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da1e:	4611      	mov	r1, r2
 800da20:	4618      	mov	r0, r3
 800da22:	f7fe fe52 	bl	800c6ca <ld_clust>
 800da26:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da2c:	2200      	movs	r2, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fe6a 	bl	800c708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	331c      	adds	r3, #28
 800da38:	2100      	movs	r1, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fd fee6 	bl	800b80c <st_dword>
					fs->wflag = 1;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2201      	movs	r2, #1
 800da44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800da46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d037      	beq.n	800dabc <f_open+0x1d4>
						dw = fs->winsect;
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da50:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800da52:	f107 0318 	add.w	r3, r7, #24
 800da56:	2200      	movs	r2, #0
 800da58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fb7d 	bl	800c15a <remove_chain>
 800da60:	4603      	mov	r3, r0
 800da62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800da66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d126      	bne.n	800dabc <f_open+0x1d4>
							res = move_window(fs, dw);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe f924 	bl	800bcc0 <move_window>
 800da78:	4603      	mov	r3, r0
 800da7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da82:	3a01      	subs	r2, #1
 800da84:	611a      	str	r2, [r3, #16]
 800da86:	e019      	b.n	800dabc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d115      	bne.n	800dabc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da90:	7fbb      	ldrb	r3, [r7, #30]
 800da92:	f003 0310 	and.w	r3, r3, #16
 800da96:	2b00      	cmp	r3, #0
 800da98:	d003      	beq.n	800daa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800da9a:	2304      	movs	r3, #4
 800da9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800daa0:	e00c      	b.n	800dabc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d007      	beq.n	800dabc <f_open+0x1d4>
 800daac:	7fbb      	ldrb	r3, [r7, #30]
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <f_open+0x1d4>
						res = FR_DENIED;
 800dab6:	2307      	movs	r3, #7
 800dab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dabc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d128      	bne.n	800db16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	f003 0308 	and.w	r3, r3, #8
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d003      	beq.n	800dad6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dad4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dae4:	79fb      	ldrb	r3, [r7, #7]
 800dae6:	f023 0301 	bic.w	r3, r3, #1
 800daea:	2b00      	cmp	r3, #0
 800daec:	bf14      	ite	ne
 800daee:	2301      	movne	r3, #1
 800daf0:	2300      	moveq	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	461a      	mov	r2, r3
 800daf6:	f107 0318 	add.w	r3, r7, #24
 800dafa:	4611      	mov	r1, r2
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fd ffad 	bl	800ba5c <inc_lock>
 800db02:	4602      	mov	r2, r0
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d102      	bne.n	800db16 <f_open+0x22e>
 800db10:	2302      	movs	r3, #2
 800db12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800db16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f040 8095 	bne.w	800dc4a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db24:	4611      	mov	r1, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fdcf 	bl	800c6ca <ld_clust>
 800db2c:	4602      	mov	r2, r0
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	331c      	adds	r3, #28
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fe2a 	bl	800b790 <ld_dword>
 800db3c:	4602      	mov	r2, r0
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	88da      	ldrh	r2, [r3, #6]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	79fa      	ldrb	r2, [r7, #7]
 800db5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	3330      	adds	r3, #48	; 0x30
 800db72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db76:	2100      	movs	r1, #0
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fe94 	bl	800b8a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800db7e:	79fb      	ldrb	r3, [r7, #7]
 800db80:	f003 0320 	and.w	r3, r3, #32
 800db84:	2b00      	cmp	r3, #0
 800db86:	d060      	beq.n	800dc4a <f_open+0x362>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d05c      	beq.n	800dc4a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	68da      	ldr	r2, [r3, #12]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	895b      	ldrh	r3, [r3, #10]
 800db9c:	025b      	lsls	r3, r3, #9
 800db9e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbac:	e016      	b.n	800dbdc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe f93f 	bl	800be36 <get_fat>
 800dbb8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dbba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d802      	bhi.n	800dbc6 <f_open+0x2de>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dbc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbcc:	d102      	bne.n	800dbd4 <f_open+0x2ec>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dbd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d103      	bne.n	800dbec <f_open+0x304>
 800dbe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d8e0      	bhi.n	800dbae <f_open+0x2c6>
				}
				fp->clust = clst;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dbf0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dbf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d127      	bne.n	800dc4a <f_open+0x362>
 800dbfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d022      	beq.n	800dc4a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe f8f5 	bl	800bdf8 <clust2sect>
 800dc0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d103      	bne.n	800dc1e <f_open+0x336>
						res = FR_INT_ERR;
 800dc16:	2302      	movs	r3, #2
 800dc18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc1c:	e015      	b.n	800dc4a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc20:	0a5a      	lsrs	r2, r3, #9
 800dc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc24:	441a      	add	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	7858      	ldrb	r0, [r3, #1]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a1a      	ldr	r2, [r3, #32]
 800dc38:	2301      	movs	r3, #1
 800dc3a:	f7fd fd33 	bl	800b6a4 <disk_read>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <f_open+0x362>
 800dc44:	2301      	movs	r3, #1
 800dc46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dc4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <f_open+0x370>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dc58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3768      	adds	r7, #104	; 0x68
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08c      	sub	sp, #48	; 0x30
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f107 0210 	add.w	r2, r7, #16
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff fdb3 	bl	800d7f0 <validate>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d107      	bne.n	800dca8 <f_write+0x44>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	7d5b      	ldrb	r3, [r3, #21]
 800dc9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <f_write+0x4a>
 800dca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcac:	e14b      	b.n	800df46 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	7d1b      	ldrb	r3, [r3, #20]
 800dcb2:	f003 0302 	and.w	r3, r3, #2
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <f_write+0x5a>
 800dcba:	2307      	movs	r3, #7
 800dcbc:	e143      	b.n	800df46 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	699a      	ldr	r2, [r3, #24]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	f080 812d 	bcs.w	800df2a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	43db      	mvns	r3, r3
 800dcd6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dcd8:	e127      	b.n	800df2a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f040 80e3 	bne.w	800deae <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	0a5b      	lsrs	r3, r3, #9
 800dcee:	693a      	ldr	r2, [r7, #16]
 800dcf0:	8952      	ldrh	r2, [r2, #10]
 800dcf2:	3a01      	subs	r2, #1
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d143      	bne.n	800dd86 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	699b      	ldr	r3, [r3, #24]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10c      	bne.n	800dd20 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d11a      	bne.n	800dd48 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2100      	movs	r1, #0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fa84 	bl	800c224 <create_chain>
 800dd1c:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd1e:	e013      	b.n	800dd48 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d007      	beq.n	800dd38 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f7fe fb10 	bl	800c354 <clmt_clust>
 800dd34:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd36:	e007      	b.n	800dd48 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	69db      	ldr	r3, [r3, #28]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	4610      	mov	r0, r2
 800dd42:	f7fe fa6f 	bl	800c224 <create_chain>
 800dd46:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 80f2 	beq.w	800df34 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d104      	bne.n	800dd60 <f_write+0xfc>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2202      	movs	r2, #2
 800dd5a:	755a      	strb	r2, [r3, #21]
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	e0f2      	b.n	800df46 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd66:	d104      	bne.n	800dd72 <f_write+0x10e>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	755a      	strb	r2, [r3, #21]
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e0e9      	b.n	800df46 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd76:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d102      	bne.n	800dd86 <f_write+0x122>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd84:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	7d1b      	ldrb	r3, [r3, #20]
 800dd8a:	b25b      	sxtb	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	da18      	bge.n	800ddc2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	7858      	ldrb	r0, [r3, #1]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6a1a      	ldr	r2, [r3, #32]
 800dd9e:	2301      	movs	r3, #1
 800dda0:	f7fd fca0 	bl	800b6e4 <disk_write>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d004      	beq.n	800ddb4 <f_write+0x150>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2201      	movs	r2, #1
 800ddae:	755a      	strb	r2, [r3, #21]
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e0c8      	b.n	800df46 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	7d1b      	ldrb	r3, [r3, #20]
 800ddb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	69db      	ldr	r3, [r3, #28]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4610      	mov	r0, r2
 800ddcc:	f7fe f814 	bl	800bdf8 <clust2sect>
 800ddd0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d104      	bne.n	800dde2 <f_write+0x17e>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2202      	movs	r2, #2
 800dddc:	755a      	strb	r2, [r3, #21]
 800ddde:	2302      	movs	r3, #2
 800dde0:	e0b1      	b.n	800df46 <f_write+0x2e2>
			sect += csect;
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	4413      	add	r3, r2
 800dde8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	0a5b      	lsrs	r3, r3, #9
 800ddee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d03c      	beq.n	800de70 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ddf6:	69ba      	ldr	r2, [r7, #24]
 800ddf8:	6a3b      	ldr	r3, [r7, #32]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	8952      	ldrh	r2, [r2, #10]
 800de00:	4293      	cmp	r3, r2
 800de02:	d905      	bls.n	800de10 <f_write+0x1ac>
					cc = fs->csize - csect;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	461a      	mov	r2, r3
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	7858      	ldrb	r0, [r3, #1]
 800de14:	6a3b      	ldr	r3, [r7, #32]
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	69f9      	ldr	r1, [r7, #28]
 800de1a:	f7fd fc63 	bl	800b6e4 <disk_write>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <f_write+0x1ca>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2201      	movs	r2, #1
 800de28:	755a      	strb	r2, [r3, #21]
 800de2a:	2301      	movs	r3, #1
 800de2c:	e08b      	b.n	800df46 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6a1a      	ldr	r2, [r3, #32]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	6a3a      	ldr	r2, [r7, #32]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d915      	bls.n	800de68 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a1a      	ldr	r2, [r3, #32]
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	025b      	lsls	r3, r3, #9
 800de4c:	69fa      	ldr	r2, [r7, #28]
 800de4e:	4413      	add	r3, r2
 800de50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de54:	4619      	mov	r1, r3
 800de56:	f7fd fd05 	bl	800b864 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	7d1b      	ldrb	r3, [r3, #20]
 800de5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de62:	b2da      	uxtb	r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de68:	6a3b      	ldr	r3, [r7, #32]
 800de6a:	025b      	lsls	r3, r3, #9
 800de6c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800de6e:	e03f      	b.n	800def0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6a1b      	ldr	r3, [r3, #32]
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	429a      	cmp	r2, r3
 800de78:	d016      	beq.n	800dea8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	699a      	ldr	r2, [r3, #24]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de82:	429a      	cmp	r2, r3
 800de84:	d210      	bcs.n	800dea8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	7858      	ldrb	r0, [r3, #1]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de90:	2301      	movs	r3, #1
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	f7fd fc06 	bl	800b6a4 <disk_read>
 800de98:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d004      	beq.n	800dea8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	755a      	strb	r2, [r3, #21]
 800dea4:	2301      	movs	r3, #1
 800dea6:	e04e      	b.n	800df46 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800deba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800debc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d901      	bls.n	800dec8 <f_write+0x264>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded6:	4413      	add	r3, r2
 800ded8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deda:	69f9      	ldr	r1, [r7, #28]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fd fcc1 	bl	800b864 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	7d1b      	ldrb	r3, [r3, #20]
 800dee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800def0:	69fa      	ldr	r2, [r7, #28]
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	4413      	add	r3, r2
 800def6:	61fb      	str	r3, [r7, #28]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	699a      	ldr	r2, [r3, #24]
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	441a      	add	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	619a      	str	r2, [r3, #24]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68da      	ldr	r2, [r3, #12]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	699b      	ldr	r3, [r3, #24]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	bf38      	it	cc
 800df10:	461a      	movcc	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	60da      	str	r2, [r3, #12]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	441a      	add	r2, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	601a      	str	r2, [r3, #0]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f47f aed4 	bne.w	800dcda <f_write+0x76>
 800df32:	e000      	b.n	800df36 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df34:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	7d1b      	ldrb	r3, [r3, #20]
 800df3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3730      	adds	r7, #48	; 0x30
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f107 0208 	add.w	r2, r7, #8
 800df5c:	4611      	mov	r1, r2
 800df5e:	4618      	mov	r0, r3
 800df60:	f7ff fc46 	bl	800d7f0 <validate>
 800df64:	4603      	mov	r3, r0
 800df66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df68:	7dfb      	ldrb	r3, [r7, #23]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d168      	bne.n	800e040 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df76:	2b00      	cmp	r3, #0
 800df78:	d062      	beq.n	800e040 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7d1b      	ldrb	r3, [r3, #20]
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	da15      	bge.n	800dfb0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	7858      	ldrb	r0, [r3, #1]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a1a      	ldr	r2, [r3, #32]
 800df92:	2301      	movs	r3, #1
 800df94:	f7fd fba6 	bl	800b6e4 <disk_write>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <f_sync+0x54>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e04f      	b.n	800e042 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7d1b      	ldrb	r3, [r3, #20]
 800dfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dfb0:	f7f9 fec0 	bl	8007d34 <get_fattime>
 800dfb4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f7fd fe7e 	bl	800bcc0 <move_window>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d138      	bne.n	800e040 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	330b      	adds	r3, #11
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	330b      	adds	r3, #11
 800dfde:	f042 0220 	orr.w	r2, r2, #32
 800dfe2:	b2d2      	uxtb	r2, r2
 800dfe4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	461a      	mov	r2, r3
 800dff0:	68f9      	ldr	r1, [r7, #12]
 800dff2:	f7fe fb89 	bl	800c708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f103 021c 	add.w	r2, r3, #28
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f7fd fc02 	bl	800b80c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3316      	adds	r3, #22
 800e00c:	6939      	ldr	r1, [r7, #16]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fd fbfc 	bl	800b80c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	3312      	adds	r3, #18
 800e018:	2100      	movs	r1, #0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fd fbdb 	bl	800b7d6 <st_word>
					fs->wflag = 1;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	2201      	movs	r2, #1
 800e024:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd fe77 	bl	800bd1c <sync_fs>
 800e02e:	4603      	mov	r3, r0
 800e030:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7d1b      	ldrb	r3, [r3, #20]
 800e036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e040:	7dfb      	ldrb	r3, [r7, #23]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff ff7b 	bl	800df4e <f_sync>
 800e058:	4603      	mov	r3, r0
 800e05a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d118      	bne.n	800e094 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f107 0208 	add.w	r2, r7, #8
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fbc0 	bl	800d7f0 <validate>
 800e070:	4603      	mov	r3, r0
 800e072:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e074:	7bfb      	ldrb	r3, [r7, #15]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10c      	bne.n	800e094 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fd fd7a 	bl	800bb78 <dec_lock>
 800e084:	4603      	mov	r3, r0
 800e086:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e088:	7bfb      	ldrb	r3, [r7, #15]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b087      	sub	sp, #28
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e0b6:	4b1f      	ldr	r3, [pc, #124]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0b8:	7a5b      	ldrb	r3, [r3, #9]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d131      	bne.n	800e124 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e0c0:	4b1c      	ldr	r3, [pc, #112]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0c2:	7a5b      	ldrb	r3, [r3, #9]
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e0ce:	4b19      	ldr	r3, [pc, #100]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0d0:	7a5b      	ldrb	r3, [r3, #9]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	4a17      	ldr	r2, [pc, #92]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e0de:	4b15      	ldr	r3, [pc, #84]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0e0:	7a5b      	ldrb	r3, [r3, #9]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	4b13      	ldr	r3, [pc, #76]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0e8:	4413      	add	r3, r2
 800e0ea:	79fa      	ldrb	r2, [r7, #7]
 800e0ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e0ee:	4b11      	ldr	r3, [pc, #68]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0f0:	7a5b      	ldrb	r3, [r3, #9]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	b2d1      	uxtb	r1, r2
 800e0f8:	4a0e      	ldr	r2, [pc, #56]	; (800e134 <FATFS_LinkDriverEx+0x94>)
 800e0fa:	7251      	strb	r1, [r2, #9]
 800e0fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e0fe:	7dbb      	ldrb	r3, [r7, #22]
 800e100:	3330      	adds	r3, #48	; 0x30
 800e102:	b2da      	uxtb	r2, r3
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	3301      	adds	r3, #1
 800e10c:	223a      	movs	r2, #58	; 0x3a
 800e10e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	3302      	adds	r3, #2
 800e114:	222f      	movs	r2, #47	; 0x2f
 800e116:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	3303      	adds	r3, #3
 800e11c:	2200      	movs	r2, #0
 800e11e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e124:	7dfb      	ldrb	r3, [r7, #23]
}
 800e126:	4618      	mov	r0, r3
 800e128:	371c      	adds	r7, #28
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	20000a08 	.word	0x20000a08

0800e138 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e142:	2200      	movs	r2, #0
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff ffaa 	bl	800e0a0 <FATFS_LinkDriverEx>
 800e14c:	4603      	mov	r3, r0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	6039      	str	r1, [r7, #0]
 800e162:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e164:	88fb      	ldrh	r3, [r7, #6]
 800e166:	2b7f      	cmp	r3, #127	; 0x7f
 800e168:	d802      	bhi.n	800e170 <ff_convert+0x18>
		c = chr;
 800e16a:	88fb      	ldrh	r3, [r7, #6]
 800e16c:	81fb      	strh	r3, [r7, #14]
 800e16e:	e025      	b.n	800e1bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00b      	beq.n	800e18e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e176:	88fb      	ldrh	r3, [r7, #6]
 800e178:	2bff      	cmp	r3, #255	; 0xff
 800e17a:	d805      	bhi.n	800e188 <ff_convert+0x30>
 800e17c:	88fb      	ldrh	r3, [r7, #6]
 800e17e:	3b80      	subs	r3, #128	; 0x80
 800e180:	4a12      	ldr	r2, [pc, #72]	; (800e1cc <ff_convert+0x74>)
 800e182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e186:	e000      	b.n	800e18a <ff_convert+0x32>
 800e188:	2300      	movs	r3, #0
 800e18a:	81fb      	strh	r3, [r7, #14]
 800e18c:	e016      	b.n	800e1bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e18e:	2300      	movs	r3, #0
 800e190:	81fb      	strh	r3, [r7, #14]
 800e192:	e009      	b.n	800e1a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e194:	89fb      	ldrh	r3, [r7, #14]
 800e196:	4a0d      	ldr	r2, [pc, #52]	; (800e1cc <ff_convert+0x74>)
 800e198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e19c:	88fa      	ldrh	r2, [r7, #6]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d006      	beq.n	800e1b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e1a2:	89fb      	ldrh	r3, [r7, #14]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	81fb      	strh	r3, [r7, #14]
 800e1a8:	89fb      	ldrh	r3, [r7, #14]
 800e1aa:	2b7f      	cmp	r3, #127	; 0x7f
 800e1ac:	d9f2      	bls.n	800e194 <ff_convert+0x3c>
 800e1ae:	e000      	b.n	800e1b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e1b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e1b2:	89fb      	ldrh	r3, [r7, #14]
 800e1b4:	3380      	adds	r3, #128	; 0x80
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e1bc:	89fb      	ldrh	r3, [r7, #14]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	0800f158 	.word	0x0800f158

0800e1d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e1da:	88fb      	ldrh	r3, [r7, #6]
 800e1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1e0:	d201      	bcs.n	800e1e6 <ff_wtoupper+0x16>
 800e1e2:	4b3e      	ldr	r3, [pc, #248]	; (800e2dc <ff_wtoupper+0x10c>)
 800e1e4:	e000      	b.n	800e1e8 <ff_wtoupper+0x18>
 800e1e6:	4b3e      	ldr	r3, [pc, #248]	; (800e2e0 <ff_wtoupper+0x110>)
 800e1e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	1c9a      	adds	r2, r3, #2
 800e1ee:	617a      	str	r2, [r7, #20]
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e1f4:	8a7b      	ldrh	r3, [r7, #18]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d068      	beq.n	800e2cc <ff_wtoupper+0xfc>
 800e1fa:	88fa      	ldrh	r2, [r7, #6]
 800e1fc:	8a7b      	ldrh	r3, [r7, #18]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d364      	bcc.n	800e2cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	1c9a      	adds	r2, r3, #2
 800e206:	617a      	str	r2, [r7, #20]
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	823b      	strh	r3, [r7, #16]
 800e20c:	8a3b      	ldrh	r3, [r7, #16]
 800e20e:	0a1b      	lsrs	r3, r3, #8
 800e210:	81fb      	strh	r3, [r7, #14]
 800e212:	8a3b      	ldrh	r3, [r7, #16]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e218:	88fa      	ldrh	r2, [r7, #6]
 800e21a:	8a79      	ldrh	r1, [r7, #18]
 800e21c:	8a3b      	ldrh	r3, [r7, #16]
 800e21e:	440b      	add	r3, r1
 800e220:	429a      	cmp	r2, r3
 800e222:	da49      	bge.n	800e2b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e224:	89fb      	ldrh	r3, [r7, #14]
 800e226:	2b08      	cmp	r3, #8
 800e228:	d84f      	bhi.n	800e2ca <ff_wtoupper+0xfa>
 800e22a:	a201      	add	r2, pc, #4	; (adr r2, 800e230 <ff_wtoupper+0x60>)
 800e22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e230:	0800e255 	.word	0x0800e255
 800e234:	0800e267 	.word	0x0800e267
 800e238:	0800e27d 	.word	0x0800e27d
 800e23c:	0800e285 	.word	0x0800e285
 800e240:	0800e28d 	.word	0x0800e28d
 800e244:	0800e295 	.word	0x0800e295
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e2a5 	.word	0x0800e2a5
 800e250:	0800e2ad 	.word	0x0800e2ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e254:	88fa      	ldrh	r2, [r7, #6]
 800e256:	8a7b      	ldrh	r3, [r7, #18]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	697a      	ldr	r2, [r7, #20]
 800e25e:	4413      	add	r3, r2
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	80fb      	strh	r3, [r7, #6]
 800e264:	e027      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e266:	88fa      	ldrh	r2, [r7, #6]
 800e268:	8a7b      	ldrh	r3, [r7, #18]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	b29b      	uxth	r3, r3
 800e274:	88fa      	ldrh	r2, [r7, #6]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	80fb      	strh	r3, [r7, #6]
 800e27a:	e01c      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e27c:	88fb      	ldrh	r3, [r7, #6]
 800e27e:	3b10      	subs	r3, #16
 800e280:	80fb      	strh	r3, [r7, #6]
 800e282:	e018      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e284:	88fb      	ldrh	r3, [r7, #6]
 800e286:	3b20      	subs	r3, #32
 800e288:	80fb      	strh	r3, [r7, #6]
 800e28a:	e014      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e28c:	88fb      	ldrh	r3, [r7, #6]
 800e28e:	3b30      	subs	r3, #48	; 0x30
 800e290:	80fb      	strh	r3, [r7, #6]
 800e292:	e010      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e294:	88fb      	ldrh	r3, [r7, #6]
 800e296:	3b1a      	subs	r3, #26
 800e298:	80fb      	strh	r3, [r7, #6]
 800e29a:	e00c      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e29c:	88fb      	ldrh	r3, [r7, #6]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	80fb      	strh	r3, [r7, #6]
 800e2a2:	e008      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e2a4:	88fb      	ldrh	r3, [r7, #6]
 800e2a6:	3b50      	subs	r3, #80	; 0x50
 800e2a8:	80fb      	strh	r3, [r7, #6]
 800e2aa:	e004      	b.n	800e2b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e2ac:	88fb      	ldrh	r3, [r7, #6]
 800e2ae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e2b2:	80fb      	strh	r3, [r7, #6]
 800e2b4:	bf00      	nop
			}
			break;
 800e2b6:	e008      	b.n	800e2ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e2b8:	89fb      	ldrh	r3, [r7, #14]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d195      	bne.n	800e1ea <ff_wtoupper+0x1a>
 800e2be:	8a3b      	ldrh	r3, [r7, #16]
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	697a      	ldr	r2, [r7, #20]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e2c8:	e78f      	b.n	800e1ea <ff_wtoupper+0x1a>
			break;
 800e2ca:	bf00      	nop
	}

	return chr;
 800e2cc:	88fb      	ldrh	r3, [r7, #6]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	371c      	adds	r7, #28
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	0800f258 	.word	0x0800f258
 800e2e0:	0800f44c 	.word	0x0800f44c

0800e2e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	4912      	ldr	r1, [pc, #72]	; (800e334 <MX_USB_DEVICE_Init+0x50>)
 800e2ec:	4812      	ldr	r0, [pc, #72]	; (800e338 <MX_USB_DEVICE_Init+0x54>)
 800e2ee:	f7fb fe92 	bl	800a016 <USBD_Init>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e2f8:	f7f2 f91a 	bl	8000530 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e2fc:	490f      	ldr	r1, [pc, #60]	; (800e33c <MX_USB_DEVICE_Init+0x58>)
 800e2fe:	480e      	ldr	r0, [pc, #56]	; (800e338 <MX_USB_DEVICE_Init+0x54>)
 800e300:	f7fb feb9 	bl	800a076 <USBD_RegisterClass>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e30a:	f7f2 f911 	bl	8000530 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e30e:	490c      	ldr	r1, [pc, #48]	; (800e340 <MX_USB_DEVICE_Init+0x5c>)
 800e310:	4809      	ldr	r0, [pc, #36]	; (800e338 <MX_USB_DEVICE_Init+0x54>)
 800e312:	f7fa f961 	bl	80085d8 <USBD_MSC_RegisterStorage>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e31c:	f7f2 f908 	bl	8000530 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e320:	4805      	ldr	r0, [pc, #20]	; (800e338 <MX_USB_DEVICE_Init+0x54>)
 800e322:	f7fb fede 	bl	800a0e2 <USBD_Start>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e32c:	f7f2 f900 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e330:	bf00      	nop
 800e332:	bd80      	pop	{r7, pc}
 800e334:	200001b4 	.word	0x200001b4
 800e338:	20000a14 	.word	0x20000a14
 800e33c:	2000010c 	.word	0x2000010c
 800e340:	20000214 	.word	0x20000214

0800e344 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	4603      	mov	r3, r0
 800e34c:	6039      	str	r1, [r7, #0]
 800e34e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2212      	movs	r2, #18
 800e354:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e356:	4b03      	ldr	r3, [pc, #12]	; (800e364 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e358:	4618      	mov	r0, r3
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	200001d4 	.word	0x200001d4

0800e368 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	6039      	str	r1, [r7, #0]
 800e372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	2204      	movs	r2, #4
 800e378:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e37a:	4b03      	ldr	r3, [pc, #12]	; (800e388 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	200001f4 	.word	0x200001f4

0800e38c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	4603      	mov	r3, r0
 800e394:	6039      	str	r1, [r7, #0]
 800e396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e398:	79fb      	ldrb	r3, [r7, #7]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d105      	bne.n	800e3aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e39e:	683a      	ldr	r2, [r7, #0]
 800e3a0:	4907      	ldr	r1, [pc, #28]	; (800e3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3a2:	4808      	ldr	r0, [pc, #32]	; (800e3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e3a4:	f7fd f87a 	bl	800b49c <USBD_GetString>
 800e3a8:	e004      	b.n	800e3b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	4904      	ldr	r1, [pc, #16]	; (800e3c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3ae:	4805      	ldr	r0, [pc, #20]	; (800e3c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e3b0:	f7fd f874 	bl	800b49c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3b4:	4b02      	ldr	r3, [pc, #8]	; (800e3c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	20000cf0 	.word	0x20000cf0
 800e3c4:	0800f028 	.word	0x0800f028

0800e3c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	6039      	str	r1, [r7, #0]
 800e3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	4904      	ldr	r1, [pc, #16]	; (800e3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e3d8:	4804      	ldr	r0, [pc, #16]	; (800e3ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e3da:	f7fd f85f 	bl	800b49c <USBD_GetString>
  return USBD_StrDesc;
 800e3de:	4b02      	ldr	r3, [pc, #8]	; (800e3e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20000cf0 	.word	0x20000cf0
 800e3ec:	0800f03c 	.word	0x0800f03c

0800e3f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	6039      	str	r1, [r7, #0]
 800e3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	221a      	movs	r2, #26
 800e400:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e402:	f000 f855 	bl	800e4b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e406:	4b02      	ldr	r3, [pc, #8]	; (800e410 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	200001f8 	.word	0x200001f8

0800e414 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	4603      	mov	r3, r0
 800e41c:	6039      	str	r1, [r7, #0]
 800e41e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d105      	bne.n	800e432 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	4907      	ldr	r1, [pc, #28]	; (800e448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e42a:	4808      	ldr	r0, [pc, #32]	; (800e44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e42c:	f7fd f836 	bl	800b49c <USBD_GetString>
 800e430:	e004      	b.n	800e43c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	4904      	ldr	r1, [pc, #16]	; (800e448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e436:	4805      	ldr	r0, [pc, #20]	; (800e44c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e438:	f7fd f830 	bl	800b49c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e43c:	4b02      	ldr	r3, [pc, #8]	; (800e448 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20000cf0 	.word	0x20000cf0
 800e44c:	0800f050 	.word	0x0800f050

0800e450 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	6039      	str	r1, [r7, #0]
 800e45a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d105      	bne.n	800e46e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	4907      	ldr	r1, [pc, #28]	; (800e484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e466:	4808      	ldr	r0, [pc, #32]	; (800e488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e468:	f7fd f818 	bl	800b49c <USBD_GetString>
 800e46c:	e004      	b.n	800e478 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	4904      	ldr	r1, [pc, #16]	; (800e484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e472:	4805      	ldr	r0, [pc, #20]	; (800e488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e474:	f7fd f812 	bl	800b49c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e478:	4b02      	ldr	r3, [pc, #8]	; (800e484 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20000cf0 	.word	0x20000cf0
 800e488:	0800f05c 	.word	0x0800f05c

0800e48c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	6039      	str	r1, [r7, #0]
 800e496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	220c      	movs	r2, #12
 800e49c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e49e:	4b03      	ldr	r3, [pc, #12]	; (800e4ac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	200001e8 	.word	0x200001e8

0800e4b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4b6:	4b0f      	ldr	r3, [pc, #60]	; (800e4f4 <Get_SerialNum+0x44>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4bc:	4b0e      	ldr	r3, [pc, #56]	; (800e4f8 <Get_SerialNum+0x48>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4c2:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <Get_SerialNum+0x4c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	4909      	ldr	r1, [pc, #36]	; (800e500 <Get_SerialNum+0x50>)
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 f814 	bl	800e508 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e4e0:	2204      	movs	r2, #4
 800e4e2:	4908      	ldr	r1, [pc, #32]	; (800e504 <Get_SerialNum+0x54>)
 800e4e4:	68b8      	ldr	r0, [r7, #8]
 800e4e6:	f000 f80f 	bl	800e508 <IntToUnicode>
  }
}
 800e4ea:	bf00      	nop
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	1fff7590 	.word	0x1fff7590
 800e4f8:	1fff7594 	.word	0x1fff7594
 800e4fc:	1fff7598 	.word	0x1fff7598
 800e500:	200001fa 	.word	0x200001fa
 800e504:	2000020a 	.word	0x2000020a

0800e508 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e508:	b480      	push	{r7}
 800e50a:	b087      	sub	sp, #28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e51a:	2300      	movs	r3, #0
 800e51c:	75fb      	strb	r3, [r7, #23]
 800e51e:	e027      	b.n	800e570 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	0f1b      	lsrs	r3, r3, #28
 800e524:	2b09      	cmp	r3, #9
 800e526:	d80b      	bhi.n	800e540 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	0f1b      	lsrs	r3, r3, #28
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	4619      	mov	r1, r3
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	440b      	add	r3, r1
 800e538:	3230      	adds	r2, #48	; 0x30
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	e00a      	b.n	800e556 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	0f1b      	lsrs	r3, r3, #28
 800e544:	b2da      	uxtb	r2, r3
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	4619      	mov	r1, r3
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	440b      	add	r3, r1
 800e550:	3237      	adds	r2, #55	; 0x37
 800e552:	b2d2      	uxtb	r2, r2
 800e554:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	011b      	lsls	r3, r3, #4
 800e55a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	3301      	adds	r3, #1
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	4413      	add	r3, r2
 800e566:	2200      	movs	r2, #0
 800e568:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	3301      	adds	r3, #1
 800e56e:	75fb      	strb	r3, [r7, #23]
 800e570:	7dfa      	ldrb	r2, [r7, #23]
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	429a      	cmp	r2, r3
 800e576:	d3d3      	bcc.n	800e520 <IntToUnicode+0x18>
  }
}
 800e578:	bf00      	nop
 800e57a:	bf00      	nop
 800e57c:	371c      	adds	r7, #28
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e586:	b480      	push	{r7}
 800e588:	b083      	sub	sp, #12
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	4603      	mov	r3, r0
 800e58e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800e590:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e592:	4618      	mov	r0, r3
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
	...

0800e5a0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08e      	sub	sp, #56	; 0x38
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
 800e5ac:	73fb      	strb	r3, [r7, #15]
//  *block_num  = STORAGE_BLK_NBR;
//  *block_size = STORAGE_BLK_SIZ;
//  return (USBD_OK);

	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 800e5ae:	23ff      	movs	r3, #255	; 0xff
 800e5b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 800e5b4:	f107 0314 	add.w	r3, r7, #20
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	480a      	ldr	r0, [pc, #40]	; (800e5e4 <STORAGE_GetCapacity_FS+0x44>)
 800e5bc:	f7f7 f92e 	bl	800581c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	1e5a      	subs	r2, r3, #1
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 800e5d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3738      	adds	r7, #56	; 0x38
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20000250 	.word	0x20000250

0800e5e8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
//  UNUSED(lun);

  return (USBD_OK);
 800e5f2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
//  UNUSED(lun);

  return (USBD_OK);
 800e60a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b088      	sub	sp, #32
 800e61c:	af02      	add	r7, sp, #8
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	461a      	mov	r2, r3
 800e624:	4603      	mov	r3, r0
 800e626:	73fb      	strb	r3, [r7, #15]
 800e628:	4613      	mov	r3, r2
 800e62a:	81bb      	strh	r3, [r7, #12]
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
//	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);

	int8_t ret = -1;
 800e62c:	23ff      	movs	r3, #255	; 0xff
 800e62e:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800e630:	89bb      	ldrh	r3, [r7, #12]
 800e632:	f04f 32ff 	mov.w	r2, #4294967295
 800e636:	9200      	str	r2, [sp, #0]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	4808      	ldr	r0, [pc, #32]	; (800e660 <STORAGE_Read_FS+0x48>)
 800e63e:	f7f6 fa65 	bl	8004b0c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 800e642:	bf00      	nop
 800e644:	4806      	ldr	r0, [pc, #24]	; (800e660 <STORAGE_Read_FS+0x48>)
 800e646:	f7f7 f915 	bl	8005874 <HAL_SD_GetCardState>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	d1f9      	bne.n	800e644 <STORAGE_Read_FS+0x2c>
	  ret = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	75fb      	strb	r3, [r7, #23]
	  return ret;
 800e654:	f997 3017 	ldrsb.w	r3, [r7, #23]

//  return (USBD_OK);
  /* USER CODE END 6 */
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20000250 	.word	0x20000250

0800e664 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af02      	add	r7, sp, #8
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
 800e66e:	461a      	mov	r2, r3
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
 800e674:	4613      	mov	r3, r2
 800e676:	81bb      	strh	r3, [r7, #12]
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);
//  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);

	int8_t ret = -1;
 800e678:	23ff      	movs	r3, #255	; 0xff
 800e67a:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800e67c:	89bb      	ldrh	r3, [r7, #12]
 800e67e:	f04f 32ff 	mov.w	r2, #4294967295
 800e682:	9200      	str	r2, [sp, #0]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	68b9      	ldr	r1, [r7, #8]
 800e688:	4808      	ldr	r0, [pc, #32]	; (800e6ac <STORAGE_Write_FS+0x48>)
 800e68a:	f7f6 fc1d 	bl	8004ec8 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 800e68e:	bf00      	nop
 800e690:	4806      	ldr	r0, [pc, #24]	; (800e6ac <STORAGE_Write_FS+0x48>)
 800e692:	f7f7 f8ef 	bl	8005874 <HAL_SD_GetCardState>
 800e696:	4603      	mov	r3, r0
 800e698:	2b04      	cmp	r3, #4
 800e69a:	d1f9      	bne.n	800e690 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	75fb      	strb	r3, [r7, #23]
	  return ret;
 800e6a0:	f997 3017 	ldrsb.w	r3, [r7, #23]

//  return (USBD_OK);
  /* USER CODE END 7 */
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3718      	adds	r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20000250 	.word	0x20000250

0800e6b0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e6b4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08a      	sub	sp, #40	; 0x28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	605a      	str	r2, [r3, #4]
 800e6d2:	609a      	str	r2, [r3, #8]
 800e6d4:	60da      	str	r2, [r3, #12]
 800e6d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6e0:	d14e      	bne.n	800e780 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6e2:	4b29      	ldr	r3, [pc, #164]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6e6:	4a28      	ldr	r2, [pc, #160]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e6e8:	f043 0301 	orr.w	r3, r3, #1
 800e6ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6ee:	4b26      	ldr	r3, [pc, #152]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	613b      	str	r3, [r7, #16]
 800e6f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e6fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e6fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e700:	2302      	movs	r3, #2
 800e702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e704:	2300      	movs	r3, #0
 800e706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e708:	2303      	movs	r3, #3
 800e70a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e70c:	230a      	movs	r3, #10
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e710:	f107 0314 	add.w	r3, r7, #20
 800e714:	4619      	mov	r1, r3
 800e716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e71a:	f7f2 fbe5 	bl	8000ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e71e:	4b1a      	ldr	r3, [pc, #104]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e722:	4a19      	ldr	r2, [pc, #100]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e72a:	4b17      	ldr	r3, [pc, #92]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e72e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e736:	4b14      	ldr	r3, [pc, #80]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d114      	bne.n	800e76c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e742:	4b11      	ldr	r3, [pc, #68]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e746:	4a10      	ldr	r2, [pc, #64]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e74c:	6593      	str	r3, [r2, #88]	; 0x58
 800e74e:	4b0e      	ldr	r3, [pc, #56]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e756:	60bb      	str	r3, [r7, #8]
 800e758:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800e75a:	f7f3 ffd7 	bl	800270c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e75e:	4b0a      	ldr	r3, [pc, #40]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e762:	4a09      	ldr	r2, [pc, #36]	; (800e788 <HAL_PCD_MspInit+0xc8>)
 800e764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e768:	6593      	str	r3, [r2, #88]	; 0x58
 800e76a:	e001      	b.n	800e770 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e76c:	f7f3 ffce 	bl	800270c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e770:	2200      	movs	r2, #0
 800e772:	2100      	movs	r1, #0
 800e774:	2043      	movs	r0, #67	; 0x43
 800e776:	f7f2 f9d8 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e77a:	2043      	movs	r0, #67	; 0x43
 800e77c:	f7f2 f9f1 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e780:	bf00      	nop
 800e782:	3728      	adds	r7, #40	; 0x28
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	40021000 	.word	0x40021000

0800e78c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fb fcea 	bl	800a17c <USBD_LL_SetupStage>
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7c2:	78fa      	ldrb	r2, [r7, #3]
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	00db      	lsls	r3, r3, #3
 800e7ca:	4413      	add	r3, r2
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	440b      	add	r3, r1
 800e7d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	78fb      	ldrb	r3, [r7, #3]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f7fb fd24 	bl	800a226 <USBD_LL_DataOutStage>
}
 800e7de:	bf00      	nop
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e7f8:	78fa      	ldrb	r2, [r7, #3]
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	4413      	add	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	440b      	add	r3, r1
 800e806:	3348      	adds	r3, #72	; 0x48
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	4619      	mov	r1, r3
 800e80e:	f7fb fdbd 	bl	800a38c <USBD_LL_DataInStage>
}
 800e812:	bf00      	nop
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fb fef7 	bl	800a61c <USBD_LL_SOF>
}
 800e82e:	bf00      	nop
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e83e:	2301      	movs	r3, #1
 800e840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	2b02      	cmp	r3, #2
 800e848:	d001      	beq.n	800e84e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e84a:	f7f1 fe71 	bl	8000530 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e854:	7bfa      	ldrb	r2, [r7, #15]
 800e856:	4611      	mov	r1, r2
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fb fe9b 	bl	800a594 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e864:	4618      	mov	r0, r3
 800e866:	f7fb fe43 	bl	800a4f0 <USBD_LL_Reset>
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	6812      	ldr	r2, [r2, #0]
 800e88a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e88e:	f043 0301 	orr.w	r3, r3, #1
 800e892:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fb fe8a 	bl	800a5b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a1b      	ldr	r3, [r3, #32]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d005      	beq.n	800e8b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8a8:	4b04      	ldr	r3, [pc, #16]	; (800e8bc <HAL_PCD_SuspendCallback+0x48>)
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	4a03      	ldr	r2, [pc, #12]	; (800e8bc <HAL_PCD_SuspendCallback+0x48>)
 800e8ae:	f043 0306 	orr.w	r3, r3, #6
 800e8b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	e000ed00 	.word	0xe000ed00

0800e8c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	6812      	ldr	r2, [r2, #0]
 800e8d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8da:	f023 0301 	bic.w	r3, r3, #1
 800e8de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a1b      	ldr	r3, [r3, #32]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d007      	beq.n	800e8f8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8e8:	4b08      	ldr	r3, [pc, #32]	; (800e90c <HAL_PCD_ResumeCallback+0x4c>)
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	4a07      	ldr	r2, [pc, #28]	; (800e90c <HAL_PCD_ResumeCallback+0x4c>)
 800e8ee:	f023 0306 	bic.w	r3, r3, #6
 800e8f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e8f4:	f000 fb2c 	bl	800ef50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fb fe74 	bl	800a5ec <USBD_LL_Resume>
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	e000ed00 	.word	0xe000ed00

0800e910 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e922:	78fa      	ldrb	r2, [r7, #3]
 800e924:	4611      	mov	r1, r2
 800e926:	4618      	mov	r0, r3
 800e928:	f7fb feca 	bl	800a6c0 <USBD_LL_IsoOUTIncomplete>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e946:	78fa      	ldrb	r2, [r7, #3]
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fb fe86 	bl	800a65c <USBD_LL_IsoINIncomplete>
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e966:	4618      	mov	r0, r3
 800e968:	f7fb fedc 	bl	800a724 <USBD_LL_DevConnected>
}
 800e96c:	bf00      	nop
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e982:	4618      	mov	r0, r3
 800e984:	f7fb fed9 	bl	800a73a <USBD_LL_DevDisconnected>
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d13c      	bne.n	800ea1a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e9a0:	4a20      	ldr	r2, [pc, #128]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a1e      	ldr	r2, [pc, #120]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e9b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9ba:	2206      	movs	r2, #6
 800e9bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e9be:	4b19      	ldr	r3, [pc, #100]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e9c4:	4b17      	ldr	r3, [pc, #92]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e9ca:	4b16      	ldr	r3, [pc, #88]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e9d0:	4b14      	ldr	r3, [pc, #80]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e9d6:	4b13      	ldr	r3, [pc, #76]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e9dc:	4b11      	ldr	r3, [pc, #68]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e9e2:	4b10      	ldr	r3, [pc, #64]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e9e8:	4b0e      	ldr	r3, [pc, #56]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e9ee:	480d      	ldr	r0, [pc, #52]	; (800ea24 <USBD_LL_Init+0x94>)
 800e9f0:	f7f2 fc54 	bl	800129c <HAL_PCD_Init>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e9fa:	f7f1 fd99 	bl	8000530 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e9fe:	2180      	movs	r1, #128	; 0x80
 800ea00:	4808      	ldr	r0, [pc, #32]	; (800ea24 <USBD_LL_Init+0x94>)
 800ea02:	f7f3 fdea 	bl	80025da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ea06:	2240      	movs	r2, #64	; 0x40
 800ea08:	2100      	movs	r1, #0
 800ea0a:	4806      	ldr	r0, [pc, #24]	; (800ea24 <USBD_LL_Init+0x94>)
 800ea0c:	f7f3 fd9e 	bl	800254c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea10:	2280      	movs	r2, #128	; 0x80
 800ea12:	2101      	movs	r1, #1
 800ea14:	4803      	ldr	r0, [pc, #12]	; (800ea24 <USBD_LL_Init+0x94>)
 800ea16:	f7f3 fd99 	bl	800254c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	20000ef0 	.word	0x20000ef0

0800ea28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f2 fd50 	bl	80014e4 <HAL_PCD_Start>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d816      	bhi.n	800ea7c <USBD_LL_Start+0x54>
 800ea4e:	a201      	add	r2, pc, #4	; (adr r2, 800ea54 <USBD_LL_Start+0x2c>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800ea65 	.word	0x0800ea65
 800ea58:	0800ea6b 	.word	0x0800ea6b
 800ea5c:	0800ea71 	.word	0x0800ea71
 800ea60:	0800ea77 	.word	0x0800ea77
    case HAL_OK :
      usb_status = USBD_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	73fb      	strb	r3, [r7, #15]
    break;
 800ea68:	e00b      	b.n	800ea82 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea6e:	e008      	b.n	800ea82 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea70:	2301      	movs	r3, #1
 800ea72:	73fb      	strb	r3, [r7, #15]
    break;
 800ea74:	e005      	b.n	800ea82 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea76:	2303      	movs	r3, #3
 800ea78:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7a:	e002      	b.n	800ea82 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea80:	bf00      	nop
  }
  return usb_status;
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	4608      	mov	r0, r1
 800ea96:	4611      	mov	r1, r2
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	70fb      	strb	r3, [r7, #3]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70bb      	strb	r3, [r7, #2]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eab4:	78bb      	ldrb	r3, [r7, #2]
 800eab6:	883a      	ldrh	r2, [r7, #0]
 800eab8:	78f9      	ldrb	r1, [r7, #3]
 800eaba:	f7f3 f9fa 	bl	8001eb2 <HAL_PCD_EP_Open>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d817      	bhi.n	800eaf8 <USBD_LL_OpenEP+0x6c>
 800eac8:	a201      	add	r2, pc, #4	; (adr r2, 800ead0 <USBD_LL_OpenEP+0x44>)
 800eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eace:	bf00      	nop
 800ead0:	0800eae1 	.word	0x0800eae1
 800ead4:	0800eae7 	.word	0x0800eae7
 800ead8:	0800eaed 	.word	0x0800eaed
 800eadc:	0800eaf3 	.word	0x0800eaf3
    case HAL_OK :
      usb_status = USBD_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
    break;
 800eae4:	e00b      	b.n	800eafe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eae6:	2303      	movs	r3, #3
 800eae8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaea:	e008      	b.n	800eafe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eaec:	2301      	movs	r3, #1
 800eaee:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf0:	e005      	b.n	800eafe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaf2:	2303      	movs	r3, #3
 800eaf4:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf6:	e002      	b.n	800eafe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	73fb      	strb	r3, [r7, #15]
    break;
 800eafc:	bf00      	nop
  }
  return usb_status;
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb22:	78fa      	ldrb	r2, [r7, #3]
 800eb24:	4611      	mov	r1, r2
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f3 fa2b 	bl	8001f82 <HAL_PCD_EP_Close>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	2b03      	cmp	r3, #3
 800eb34:	d816      	bhi.n	800eb64 <USBD_LL_CloseEP+0x5c>
 800eb36:	a201      	add	r2, pc, #4	; (adr r2, 800eb3c <USBD_LL_CloseEP+0x34>)
 800eb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3c:	0800eb4d 	.word	0x0800eb4d
 800eb40:	0800eb53 	.word	0x0800eb53
 800eb44:	0800eb59 	.word	0x0800eb59
 800eb48:	0800eb5f 	.word	0x0800eb5f
    case HAL_OK :
      usb_status = USBD_OK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb50:	e00b      	b.n	800eb6a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb52:	2303      	movs	r3, #3
 800eb54:	73fb      	strb	r3, [r7, #15]
    break;
 800eb56:	e008      	b.n	800eb6a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb5c:	e005      	b.n	800eb6a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	73fb      	strb	r3, [r7, #15]
    break;
 800eb62:	e002      	b.n	800eb6a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eb64:	2303      	movs	r3, #3
 800eb66:	73fb      	strb	r3, [r7, #15]
    break;
 800eb68:	bf00      	nop
  }
  return usb_status;
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb8e:	78fa      	ldrb	r2, [r7, #3]
 800eb90:	4611      	mov	r1, r2
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f3 fba3 	bl	80022de <HAL_PCD_EP_Flush>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb9c:	7bbb      	ldrb	r3, [r7, #14]
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d816      	bhi.n	800ebd0 <USBD_LL_FlushEP+0x5c>
 800eba2:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <USBD_LL_FlushEP+0x34>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ebb9 	.word	0x0800ebb9
 800ebac:	0800ebbf 	.word	0x0800ebbf
 800ebb0:	0800ebc5 	.word	0x0800ebc5
 800ebb4:	0800ebcb 	.word	0x0800ebcb
    case HAL_OK :
      usb_status = USBD_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73fb      	strb	r3, [r7, #15]
    break;
 800ebbc:	e00b      	b.n	800ebd6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc2:	e008      	b.n	800ebd6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc8:	e005      	b.n	800ebd6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebca:	2303      	movs	r3, #3
 800ebcc:	73fb      	strb	r3, [r7, #15]
    break;
 800ebce:	e002      	b.n	800ebd6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ebd0:	2303      	movs	r3, #3
 800ebd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebd4:	bf00      	nop
  }
  return usb_status;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebfa:	78fa      	ldrb	r2, [r7, #3]
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f3 fa84 	bl	800210c <HAL_PCD_EP_SetStall>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d816      	bhi.n	800ec3c <USBD_LL_StallEP+0x5c>
 800ec0e:	a201      	add	r2, pc, #4	; (adr r2, 800ec14 <USBD_LL_StallEP+0x34>)
 800ec10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec14:	0800ec25 	.word	0x0800ec25
 800ec18:	0800ec2b 	.word	0x0800ec2b
 800ec1c:	0800ec31 	.word	0x0800ec31
 800ec20:	0800ec37 	.word	0x0800ec37
    case HAL_OK :
      usb_status = USBD_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73fb      	strb	r3, [r7, #15]
    break;
 800ec28:	e00b      	b.n	800ec42 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2e:	e008      	b.n	800ec42 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec30:	2301      	movs	r3, #1
 800ec32:	73fb      	strb	r3, [r7, #15]
    break;
 800ec34:	e005      	b.n	800ec42 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec36:	2303      	movs	r3, #3
 800ec38:	73fb      	strb	r3, [r7, #15]
    break;
 800ec3a:	e002      	b.n	800ec42 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec40:	bf00      	nop
  }
  return usb_status;
 800ec42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	460b      	mov	r3, r1
 800ec56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec66:	78fa      	ldrb	r2, [r7, #3]
 800ec68:	4611      	mov	r1, r2
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f3 fab0 	bl	80021d0 <HAL_PCD_EP_ClrStall>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ec74:	7bbb      	ldrb	r3, [r7, #14]
 800ec76:	2b03      	cmp	r3, #3
 800ec78:	d816      	bhi.n	800eca8 <USBD_LL_ClearStallEP+0x5c>
 800ec7a:	a201      	add	r2, pc, #4	; (adr r2, 800ec80 <USBD_LL_ClearStallEP+0x34>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ec91 	.word	0x0800ec91
 800ec84:	0800ec97 	.word	0x0800ec97
 800ec88:	0800ec9d 	.word	0x0800ec9d
 800ec8c:	0800eca3 	.word	0x0800eca3
    case HAL_OK :
      usb_status = USBD_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
    break;
 800ec94:	e00b      	b.n	800ecae <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec96:	2303      	movs	r3, #3
 800ec98:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9a:	e008      	b.n	800ecae <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eca0:	e005      	b.n	800ecae <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	73fb      	strb	r3, [r7, #15]
    break;
 800eca6:	e002      	b.n	800ecae <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ecac:	bf00      	nop
  }
  return usb_status;
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3710      	adds	r7, #16
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	da0b      	bge.n	800ecec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecda:	68f9      	ldr	r1, [r7, #12]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	440b      	add	r3, r1
 800ece6:	333e      	adds	r3, #62	; 0x3e
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	e00b      	b.n	800ed04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ecec:	78fb      	ldrb	r3, [r7, #3]
 800ecee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecf2:	68f9      	ldr	r1, [r7, #12]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	440b      	add	r3, r1
 800ecfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3714      	adds	r7, #20
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed2a:	78fa      	ldrb	r2, [r7, #3]
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7f3 f89a 	bl	8001e68 <HAL_PCD_SetAddress>
 800ed34:	4603      	mov	r3, r0
 800ed36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ed38:	7bbb      	ldrb	r3, [r7, #14]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d816      	bhi.n	800ed6c <USBD_LL_SetUSBAddress+0x5c>
 800ed3e:	a201      	add	r2, pc, #4	; (adr r2, 800ed44 <USBD_LL_SetUSBAddress+0x34>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800ed55 	.word	0x0800ed55
 800ed48:	0800ed5b 	.word	0x0800ed5b
 800ed4c:	0800ed61 	.word	0x0800ed61
 800ed50:	0800ed67 	.word	0x0800ed67
    case HAL_OK :
      usb_status = USBD_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73fb      	strb	r3, [r7, #15]
    break;
 800ed58:	e00b      	b.n	800ed72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed5e:	e008      	b.n	800ed72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed60:	2301      	movs	r3, #1
 800ed62:	73fb      	strb	r3, [r7, #15]
    break;
 800ed64:	e005      	b.n	800ed72 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed66:	2303      	movs	r3, #3
 800ed68:	73fb      	strb	r3, [r7, #15]
    break;
 800ed6a:	e002      	b.n	800ed72 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed70:	bf00      	nop
  }
  return usb_status;
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	607a      	str	r2, [r7, #4]
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed9a:	7af9      	ldrb	r1, [r7, #11]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	f7f3 f983 	bl	80020aa <HAL_PCD_EP_Transmit>
 800eda4:	4603      	mov	r3, r0
 800eda6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800eda8:	7dbb      	ldrb	r3, [r7, #22]
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d816      	bhi.n	800eddc <USBD_LL_Transmit+0x60>
 800edae:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <USBD_LL_Transmit+0x38>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800edc5 	.word	0x0800edc5
 800edb8:	0800edcb 	.word	0x0800edcb
 800edbc:	0800edd1 	.word	0x0800edd1
 800edc0:	0800edd7 	.word	0x0800edd7
    case HAL_OK :
      usb_status = USBD_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	75fb      	strb	r3, [r7, #23]
    break;
 800edc8:	e00b      	b.n	800ede2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800edca:	2303      	movs	r3, #3
 800edcc:	75fb      	strb	r3, [r7, #23]
    break;
 800edce:	e008      	b.n	800ede2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800edd0:	2301      	movs	r3, #1
 800edd2:	75fb      	strb	r3, [r7, #23]
    break;
 800edd4:	e005      	b.n	800ede2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800edd6:	2303      	movs	r3, #3
 800edd8:	75fb      	strb	r3, [r7, #23]
    break;
 800edda:	e002      	b.n	800ede2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800eddc:	2303      	movs	r3, #3
 800edde:	75fb      	strb	r3, [r7, #23]
    break;
 800ede0:	bf00      	nop
  }
  return usb_status;
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	607a      	str	r2, [r7, #4]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	460b      	mov	r3, r1
 800edfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee0a:	7af9      	ldrb	r1, [r7, #11]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	f7f3 f901 	bl	8002016 <HAL_PCD_EP_Receive>
 800ee14:	4603      	mov	r3, r0
 800ee16:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ee18:	7dbb      	ldrb	r3, [r7, #22]
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d816      	bhi.n	800ee4c <USBD_LL_PrepareReceive+0x60>
 800ee1e:	a201      	add	r2, pc, #4	; (adr r2, 800ee24 <USBD_LL_PrepareReceive+0x38>)
 800ee20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee24:	0800ee35 	.word	0x0800ee35
 800ee28:	0800ee3b 	.word	0x0800ee3b
 800ee2c:	0800ee41 	.word	0x0800ee41
 800ee30:	0800ee47 	.word	0x0800ee47
    case HAL_OK :
      usb_status = USBD_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	75fb      	strb	r3, [r7, #23]
    break;
 800ee38:	e00b      	b.n	800ee52 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	75fb      	strb	r3, [r7, #23]
    break;
 800ee3e:	e008      	b.n	800ee52 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee40:	2301      	movs	r3, #1
 800ee42:	75fb      	strb	r3, [r7, #23]
    break;
 800ee44:	e005      	b.n	800ee52 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee46:	2303      	movs	r3, #3
 800ee48:	75fb      	strb	r3, [r7, #23]
    break;
 800ee4a:	e002      	b.n	800ee52 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ee50:	bf00      	nop
  }
  return usb_status;
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee6e:	78fa      	ldrb	r2, [r7, #3]
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f3 f901 	bl	800207a <HAL_PCD_EP_GetRxCount>
 800ee78:	4603      	mov	r3, r0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
	...

0800ee84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ee90:	78fb      	ldrb	r3, [r7, #3]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <HAL_PCDEx_LPM_Callback+0x18>
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d01f      	beq.n	800eeda <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ee9a:	e03b      	b.n	800ef14 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a1b      	ldr	r3, [r3, #32]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d007      	beq.n	800eeb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800eea4:	f000 f854 	bl	800ef50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea8:	4b1c      	ldr	r3, [pc, #112]	; (800ef1c <HAL_PCDEx_LPM_Callback+0x98>)
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	4a1b      	ldr	r2, [pc, #108]	; (800ef1c <HAL_PCDEx_LPM_Callback+0x98>)
 800eeae:	f023 0306 	bic.w	r3, r3, #6
 800eeb2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	6812      	ldr	r2, [r2, #0]
 800eec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eec6:	f023 0301 	bic.w	r3, r3, #1
 800eeca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb fb8a 	bl	800a5ec <USBD_LL_Resume>
    break;
 800eed8:	e01c      	b.n	800ef14 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	6812      	ldr	r2, [r2, #0]
 800eee8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eeec:	f043 0301 	orr.w	r3, r3, #1
 800eef0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fb fb5b 	bl	800a5b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d005      	beq.n	800ef12 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef06:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <HAL_PCDEx_LPM_Callback+0x98>)
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	4a04      	ldr	r2, [pc, #16]	; (800ef1c <HAL_PCDEx_LPM_Callback+0x98>)
 800ef0c:	f043 0306 	orr.w	r3, r3, #6
 800ef10:	6113      	str	r3, [r2, #16]
    break;
 800ef12:	bf00      	nop
}
 800ef14:	bf00      	nop
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	e000ed00 	.word	0xe000ed00

0800ef20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef28:	4b03      	ldr	r3, [pc, #12]	; (800ef38 <USBD_static_malloc+0x18>)
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	200013fc 	.word	0x200013fc

0800ef3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]

}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ef54:	f7f1 f9a0 	bl	8000298 <SystemClock_Config>
}
 800ef58:	bf00      	nop
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <memset>:
 800ef5c:	4402      	add	r2, r0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d100      	bne.n	800ef66 <memset+0xa>
 800ef64:	4770      	bx	lr
 800ef66:	f803 1b01 	strb.w	r1, [r3], #1
 800ef6a:	e7f9      	b.n	800ef60 <memset+0x4>

0800ef6c <__libc_init_array>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	4d0d      	ldr	r5, [pc, #52]	; (800efa4 <__libc_init_array+0x38>)
 800ef70:	4c0d      	ldr	r4, [pc, #52]	; (800efa8 <__libc_init_array+0x3c>)
 800ef72:	1b64      	subs	r4, r4, r5
 800ef74:	10a4      	asrs	r4, r4, #2
 800ef76:	2600      	movs	r6, #0
 800ef78:	42a6      	cmp	r6, r4
 800ef7a:	d109      	bne.n	800ef90 <__libc_init_array+0x24>
 800ef7c:	4d0b      	ldr	r5, [pc, #44]	; (800efac <__libc_init_array+0x40>)
 800ef7e:	4c0c      	ldr	r4, [pc, #48]	; (800efb0 <__libc_init_array+0x44>)
 800ef80:	f000 f818 	bl	800efb4 <_init>
 800ef84:	1b64      	subs	r4, r4, r5
 800ef86:	10a4      	asrs	r4, r4, #2
 800ef88:	2600      	movs	r6, #0
 800ef8a:	42a6      	cmp	r6, r4
 800ef8c:	d105      	bne.n	800ef9a <__libc_init_array+0x2e>
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef94:	4798      	blx	r3
 800ef96:	3601      	adds	r6, #1
 800ef98:	e7ee      	b.n	800ef78 <__libc_init_array+0xc>
 800ef9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef9e:	4798      	blx	r3
 800efa0:	3601      	adds	r6, #1
 800efa2:	e7f2      	b.n	800ef8a <__libc_init_array+0x1e>
 800efa4:	0800f52c 	.word	0x0800f52c
 800efa8:	0800f52c 	.word	0x0800f52c
 800efac:	0800f52c 	.word	0x0800f52c
 800efb0:	0800f530 	.word	0x0800f530

0800efb4 <_init>:
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	bf00      	nop
 800efb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efba:	bc08      	pop	{r3}
 800efbc:	469e      	mov	lr, r3
 800efbe:	4770      	bx	lr

0800efc0 <_fini>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr
