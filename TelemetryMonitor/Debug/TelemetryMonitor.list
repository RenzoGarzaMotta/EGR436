
TelemetryMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08009328  08009328  00019328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800992c  0800992c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009934  08009934  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800993c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000208  08009b44  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08009b44  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129dc  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002985  00000000  00000000  00032c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000355e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d27  00000000  00000000  000366d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028039  00000000  00000000  000373ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e09  00000000  00000000  0005f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f019d  00000000  00000000  00073241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058ac  00000000  00000000  001633e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00168c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009310 	.word	0x08009310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08009310 	.word	0x08009310

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2007      	movs	r0, #7
 8000eb4:	f000 fa02 	bl	80012bc <bno055_writeData>
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	203d      	movs	r0, #61	; 0x3d
 8000ed0:	f000 f9f4 	bl	80012bc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000eda:	2013      	movs	r0, #19
 8000edc:	f000 f9e2 	bl	80012a4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ee0:	e002      	b.n	8000ee8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ee2:	2007      	movs	r0, #7
 8000ee4:	f000 f9de 	bl	80012a4 <bno055_delay>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ffe3 	bl	8000ec0 <bno055_setOperationMode>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f02:	200c      	movs	r0, #12
 8000f04:	f7ff ffdc 	bl	8000ec0 <bno055_setOperationMode>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f10:	2120      	movs	r1, #32
 8000f12:	203f      	movs	r0, #63	; 0x3f
 8000f14:	f000 f9d2 	bl	80012bc <bno055_writeData>
  bno055_delay(700);
 8000f18:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f1c:	f000 f9c2 	bl	80012a4 <bno055_delay>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f2a:	f7ff ffef 	bl	8000f0c <bno055_reset>

  uint8_t id = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 faab 	bl	8001494 <bno055_readData>
  if (id != BNO055_ID) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2ba0      	cmp	r3, #160	; 0xa0
 8000f42:	d004      	beq.n	8000f4e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <bno055_setup+0x4c>)
 8000f4a:	f006 f839 	bl	8006fc0 <iprintf>
  }
  bno055_setPage(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffa8 	bl	8000ea4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	203f      	movs	r0, #63	; 0x3f
 8000f58:	f000 f9b0 	bl	80012bc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f5c:	f7ff ffc8 	bl	8000ef0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f000 f99f 	bl	80012a4 <bno055_delay>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08009328 	.word	0x08009328

08000f74 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f78:	b09e      	sub	sp, #120	; 0x78
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff8e 	bl	8000ea4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d108      	bne.n	8000fa2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f90:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fa7a 	bl	8001494 <bno055_readData>
 8000fa0:	e007      	b.n	8000fb2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000fa2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000faa:	2206      	movs	r2, #6
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fa71 	bl	8001494 <bno055_readData>

  double scale = 1;
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <bno055_getVector+0x270>)
 8000fb8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc0:	2b0e      	cmp	r3, #14
 8000fc2:	d109      	bne.n	8000fd8 <bno055_getVector+0x64>
    scale = magScale;
 8000fc4:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <bno055_getVector+0x274>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa9b 	bl	8000504 <__aeabi_ui2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000fd6:	e03e      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d007      	beq.n	8000ff0 <bno055_getVector+0x7c>
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe4:	2b28      	cmp	r3, #40	; 0x28
 8000fe6:	d003      	beq.n	8000ff0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fec:	2b2e      	cmp	r3, #46	; 0x2e
 8000fee:	d109      	bne.n	8001004 <bno055_getVector+0x90>
    scale = accelScale;
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <bno055_getVector+0x278>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa85 	bl	8000504 <__aeabi_ui2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001002:	e028      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001008:	2b14      	cmp	r3, #20
 800100a:	d109      	bne.n	8001020 <bno055_getVector+0xac>
    scale = angularRateScale;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <bno055_getVector+0x27c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa77 	bl	8000504 <__aeabi_ui2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800101e:	e01a      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001024:	2b1a      	cmp	r3, #26
 8001026:	d109      	bne.n	800103c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001028:	4b72      	ldr	r3, [pc, #456]	; (80011f4 <bno055_getVector+0x280>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa69 	bl	8000504 <__aeabi_ui2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800103a:	e00c      	b.n	8001056 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	2b20      	cmp	r3, #32
 8001042:	d108      	bne.n	8001056 <bno055_getVector+0xe2>
    scale = quaScale;
 8001044:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <bno055_getVector+0x284>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa5b 	bl	8000504 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	2220      	movs	r2, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f006 f81c 	bl	800709c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001068:	2b20      	cmp	r3, #32
 800106a:	d150      	bne.n	800110e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800106c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa50 	bl	8000524 <__aeabi_i2d>
 8001084:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001094:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa3c 	bl	8000524 <__aeabi_i2d>
 80010ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010b0:	f7ff fbcc 	bl	800084c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa28 	bl	8000524 <__aeabi_i2d>
 80010d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010d8:	f7ff fbb8 	bl	800084c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80010e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa14 	bl	8000524 <__aeabi_i2d>
 80010fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001100:	f7ff fba4 	bl	800084c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800110c:	e03b      	b.n	8001186 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800110e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800112a:	f7ff fb8f 	bl	800084c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001136:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800115e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9d7 	bl	8000524 <__aeabi_i2d>
 8001176:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800117a:	f7ff fb67 	bl	800084c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001186:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800118a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800118e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800119a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800119e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011a2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011aa:	ec49 8b14 	vmov	d4, r8, r9
 80011ae:	ec45 4b15 	vmov	d5, r4, r5
 80011b2:	ec41 0b16 	vmov	d6, r0, r1
 80011b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ba:	eeb0 0a44 	vmov.f32	s0, s8
 80011be:	eef0 0a64 	vmov.f32	s1, s9
 80011c2:	eeb0 1a45 	vmov.f32	s2, s10
 80011c6:	eef0 1a65 	vmov.f32	s3, s11
 80011ca:	eeb0 2a46 	vmov.f32	s4, s12
 80011ce:	eef0 2a66 	vmov.f32	s5, s13
 80011d2:	eeb0 3a47 	vmov.f32	s6, s14
 80011d6:	eef0 3a67 	vmov.f32	s7, s15
 80011da:	3778      	adds	r7, #120	; 0x78
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011e2:	bf00      	nop
 80011e4:	3ff00000 	.word	0x3ff00000
 80011e8:	20000006 	.word	0x20000006
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000002 	.word	0x20000002
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000008 	.word	0x20000008

080011fc <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80011fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001200:	b090      	sub	sp, #64	; 0x40
 8001202:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff feb5 	bl	8000f74 <bno055_getVector>
 800120a:	eeb0 4a40 	vmov.f32	s8, s0
 800120e:	eef0 4a60 	vmov.f32	s9, s1
 8001212:	eeb0 5a41 	vmov.f32	s10, s2
 8001216:	eef0 5a61 	vmov.f32	s11, s3
 800121a:	eeb0 6a42 	vmov.f32	s12, s4
 800121e:	eef0 6a62 	vmov.f32	s13, s5
 8001222:	eeb0 7a43 	vmov.f32	s14, s6
 8001226:	eef0 7a63 	vmov.f32	s15, s7
 800122a:	ed87 4b08 	vstr	d4, [r7, #32]
 800122e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001232:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001236:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800123a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800123e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001242:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800124a:	ec49 8b14 	vmov	d4, r8, r9
 800124e:	ec45 4b15 	vmov	d5, r4, r5
 8001252:	ec41 0b16 	vmov	d6, r0, r1
 8001256:	ec43 2b17 	vmov	d7, r2, r3
}
 800125a:	eeb0 0a44 	vmov.f32	s0, s8
 800125e:	eef0 0a64 	vmov.f32	s1, s9
 8001262:	eeb0 1a45 	vmov.f32	s2, s10
 8001266:	eef0 1a65 	vmov.f32	s3, s11
 800126a:	eeb0 2a46 	vmov.f32	s4, s12
 800126e:	eef0 2a66 	vmov.f32	s5, s13
 8001272:	eeb0 3a47 	vmov.f32	s6, s14
 8001276:	eef0 3a67 	vmov.f32	s7, s15
 800127a:	3740      	adds	r7, #64	; 0x40
 800127c:	46bd      	mov	sp, r7
 800127e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001284 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <bno055_assignI2C+0x1c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000224 	.word	0x20000224

080012a4 <bno055_delay>:

void bno055_delay(int time) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f83a 	bl	8002328 <HAL_Delay>
#endif
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	733b      	strb	r3, [r7, #12]
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80012d4:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <bno055_writeData+0x184>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f107 020c 	add.w	r2, r7, #12
 80012dc:	230a      	movs	r3, #10
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2150      	movs	r1, #80	; 0x50
 80012e4:	f001 fc3e 	bl	8002b64 <HAL_I2C_Master_Transmit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80a0 	beq.w	8001434 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d103      	bne.n	8001302 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80012fa:	4852      	ldr	r0, [pc, #328]	; (8001444 <bno055_writeData+0x188>)
 80012fc:	f005 fec6 	bl	800708c <puts>
 8001300:	e012      	b.n	8001328 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d103      	bne.n	8001310 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001308:	484f      	ldr	r0, [pc, #316]	; (8001448 <bno055_writeData+0x18c>)
 800130a:	f005 febf 	bl	800708c <puts>
 800130e:	e00b      	b.n	8001328 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d103      	bne.n	800131e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001316:	484d      	ldr	r0, [pc, #308]	; (800144c <bno055_writeData+0x190>)
 8001318:	f005 feb8 	bl	800708c <puts>
 800131c:	e004      	b.n	8001328 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	4619      	mov	r1, r3
 8001322:	484b      	ldr	r0, [pc, #300]	; (8001450 <bno055_writeData+0x194>)
 8001324:	f005 fe4c 	bl	8006fc0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <bno055_writeData+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fe2b 	bl	8002f88 <HAL_I2C_GetError>
 8001332:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d07e      	beq.n	8001438 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d103      	bne.n	8001348 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001340:	4844      	ldr	r0, [pc, #272]	; (8001454 <bno055_writeData+0x198>)
 8001342:	f005 fea3 	bl	800708c <puts>
 8001346:	e021      	b.n	800138c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d103      	bne.n	8001356 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800134e:	4842      	ldr	r0, [pc, #264]	; (8001458 <bno055_writeData+0x19c>)
 8001350:	f005 fe9c 	bl	800708c <puts>
 8001354:	e01a      	b.n	800138c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d103      	bne.n	8001364 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800135c:	483f      	ldr	r0, [pc, #252]	; (800145c <bno055_writeData+0x1a0>)
 800135e:	f005 fe95 	bl	800708c <puts>
 8001362:	e013      	b.n	800138c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d103      	bne.n	8001372 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800136a:	483d      	ldr	r0, [pc, #244]	; (8001460 <bno055_writeData+0x1a4>)
 800136c:	f005 fe8e 	bl	800708c <puts>
 8001370:	e00c      	b.n	800138c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b10      	cmp	r3, #16
 8001376:	d103      	bne.n	8001380 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <bno055_writeData+0x1a8>)
 800137a:	f005 fe87 	bl	800708c <puts>
 800137e:	e005      	b.n	800138c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b20      	cmp	r3, #32
 8001384:	d102      	bne.n	800138c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001386:	4838      	ldr	r0, [pc, #224]	; (8001468 <bno055_writeData+0x1ac>)
 8001388:	f005 fe80 	bl	800708c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <bno055_writeData+0x184>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fdeb 	bl	8002f6c <HAL_I2C_GetState>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80013a0:	4832      	ldr	r0, [pc, #200]	; (800146c <bno055_writeData+0x1b0>)
 80013a2:	f005 fe73 	bl	800708c <puts>
 80013a6:	e048      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d103      	bne.n	80013b6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80013ae:	482f      	ldr	r0, [pc, #188]	; (800146c <bno055_writeData+0x1b0>)
 80013b0:	f005 fe6c 	bl	800708c <puts>
 80013b4:	e041      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	2b24      	cmp	r3, #36	; 0x24
 80013ba:	d103      	bne.n	80013c4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <bno055_writeData+0x1b4>)
 80013be:	f005 fe65 	bl	800708c <puts>
 80013c2:	e03a      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b21      	cmp	r3, #33	; 0x21
 80013c8:	d103      	bne.n	80013d2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80013ca:	482a      	ldr	r0, [pc, #168]	; (8001474 <bno055_writeData+0x1b8>)
 80013cc:	f005 fe5e 	bl	800708c <puts>
 80013d0:	e033      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b22      	cmp	r3, #34	; 0x22
 80013d6:	d103      	bne.n	80013e0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80013d8:	4827      	ldr	r0, [pc, #156]	; (8001478 <bno055_writeData+0x1bc>)
 80013da:	f005 fe57 	bl	800708c <puts>
 80013de:	e02c      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b28      	cmp	r3, #40	; 0x28
 80013e4:	d103      	bne.n	80013ee <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80013e6:	4825      	ldr	r0, [pc, #148]	; (800147c <bno055_writeData+0x1c0>)
 80013e8:	f005 fe50 	bl	800708c <puts>
 80013ec:	e025      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b29      	cmp	r3, #41	; 0x29
 80013f2:	d103      	bne.n	80013fc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <bno055_writeData+0x1c4>)
 80013f6:	f005 fe49 	bl	800708c <puts>
 80013fa:	e01e      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001400:	d103      	bne.n	800140a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001402:	4820      	ldr	r0, [pc, #128]	; (8001484 <bno055_writeData+0x1c8>)
 8001404:	f005 fe42 	bl	800708c <puts>
 8001408:	e017      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b60      	cmp	r3, #96	; 0x60
 800140e:	d103      	bne.n	8001418 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001410:	481d      	ldr	r0, [pc, #116]	; (8001488 <bno055_writeData+0x1cc>)
 8001412:	f005 fe3b 	bl	800708c <puts>
 8001416:	e010      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2ba0      	cmp	r3, #160	; 0xa0
 800141c:	d103      	bne.n	8001426 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800141e:	481b      	ldr	r0, [pc, #108]	; (800148c <bno055_writeData+0x1d0>)
 8001420:	f005 fe34 	bl	800708c <puts>
 8001424:	e009      	b.n	800143a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2be0      	cmp	r3, #224	; 0xe0
 800142a:	d106      	bne.n	800143a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800142c:	4818      	ldr	r0, [pc, #96]	; (8001490 <bno055_writeData+0x1d4>)
 800142e:	f005 fe2d 	bl	800708c <puts>
 8001432:	e002      	b.n	800143a <bno055_writeData+0x17e>
    return;
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <bno055_writeData+0x17e>
    return;
 8001438:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000224 	.word	0x20000224
 8001444:	08009364 	.word	0x08009364
 8001448:	08009388 	.word	0x08009388
 800144c:	080093b0 	.word	0x080093b0
 8001450:	080093d4 	.word	0x080093d4
 8001454:	080093ec 	.word	0x080093ec
 8001458:	08009400 	.word	0x08009400
 800145c:	08009414 	.word	0x08009414
 8001460:	08009428 	.word	0x08009428
 8001464:	0800943c 	.word	0x0800943c
 8001468:	08009450 	.word	0x08009450
 800146c:	08009468 	.word	0x08009468
 8001470:	08009480 	.word	0x08009480
 8001474:	08009494 	.word	0x08009494
 8001478:	080094ac 	.word	0x080094ac
 800147c:	080094c4 	.word	0x080094c4
 8001480:	080094dc 	.word	0x080094dc
 8001484:	080094fc 	.word	0x080094fc
 8001488:	0800951c 	.word	0x0800951c
 800148c:	08009534 	.word	0x08009534
 8001490:	0800954c 	.word	0x0800954c

08001494 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	4613      	mov	r3, r2
 80014a2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <bno055_readData+0x40>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	1dfa      	adds	r2, r7, #7
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	2150      	movs	r1, #80	; 0x50
 80014b2:	f001 fb57 	bl	8002b64 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <bno055_readData+0x40>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	2150      	movs	r1, #80	; 0x50
 80014c6:	f001 fc41 	bl	8002d4c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000224 	.word	0x20000224

080014d8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f000 fea8 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 f956 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f000 fab4 	bl	8001a50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014e8:	f000 fa52 	bl	8001990 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014ec:	f000 fa20 	bl	8001930 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80014f0:	f000 fa7e 	bl	80019f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80014f4:	f000 f99e 	bl	8001834 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014f8:	f000 f9dc 	bl	80018b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
//	HAL_UART_Receive_IT(&huart1, rxData1, 1);
	HAL_UART_Receive_IT(&huart2, rxData2, 1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	4993      	ldr	r1, [pc, #588]	; (800174c <main+0x274>)
 8001500:	4893      	ldr	r0, [pc, #588]	; (8001750 <main+0x278>)
 8001502:	f003 fcdd 	bl	8004ec0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, rxData3, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	4992      	ldr	r1, [pc, #584]	; (8001754 <main+0x27c>)
 800150a:	4893      	ldr	r0, [pc, #588]	; (8001758 <main+0x280>)
 800150c:	f003 fcd8 	bl	8004ec0 <HAL_UART_Receive_IT>

//	//HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
//	HAL_UART_Transmit_IT(&huart1, txData1, 1);
	HAL_UART_Transmit_IT(&huart2, txData2, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	4992      	ldr	r1, [pc, #584]	; (800175c <main+0x284>)
 8001514:	488e      	ldr	r0, [pc, #568]	; (8001750 <main+0x278>)
 8001516:	f003 fc65 	bl	8004de4 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart3, txData3, 1);
 800151a:	2201      	movs	r2, #1
 800151c:	4990      	ldr	r1, [pc, #576]	; (8001760 <main+0x288>)
 800151e:	488e      	ldr	r0, [pc, #568]	; (8001758 <main+0x280>)
 8001520:	f003 fc60 	bl	8004de4 <HAL_UART_Transmit_IT>
//
//	addr = BLOCK_1_ADDR;
//	readData(addr, spi_buf, 3);
//	//buffer should read 12, 34, 56

	bno055_assignI2C(&hi2c1);
 8001524:	488f      	ldr	r0, [pc, #572]	; (8001764 <main+0x28c>)
 8001526:	f7ff fead 	bl	8001284 <bno055_assignI2C>
	bno055_setup();
 800152a:	f7ff fcfb 	bl	8000f24 <bno055_setup>
	bno055_setOperationModeNDOF();
 800152e:	f7ff fce6 	bl	8000efe <bno055_setOperationModeNDOF>

	v = bno055_getVectorQuaternion();
 8001532:	f7ff fe63 	bl	80011fc <bno055_getVectorQuaternion>
 8001536:	eeb0 4a40 	vmov.f32	s8, s0
 800153a:	eef0 4a60 	vmov.f32	s9, s1
 800153e:	eeb0 5a41 	vmov.f32	s10, s2
 8001542:	eef0 5a61 	vmov.f32	s11, s3
 8001546:	eeb0 6a42 	vmov.f32	s12, s4
 800154a:	eef0 6a62 	vmov.f32	s13, s5
 800154e:	eeb0 7a43 	vmov.f32	s14, s6
 8001552:	eef0 7a63 	vmov.f32	s15, s7
 8001556:	4b84      	ldr	r3, [pc, #528]	; (8001768 <main+0x290>)
 8001558:	ed83 4b00 	vstr	d4, [r3]
 800155c:	ed83 5b02 	vstr	d5, [r3, #8]
 8001560:	ed83 6b04 	vstr	d6, [r3, #16]
 8001564:	ed83 7b06 	vstr	d7, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	if(dataOut == 0){//SERIAL IMU DATA
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <main+0x294>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d16b      	bne.n	8001648 <main+0x170>
		v = bno055_getVectorQuaternion();
 8001570:	f7ff fe44 	bl	80011fc <bno055_getVectorQuaternion>
 8001574:	eeb0 4a40 	vmov.f32	s8, s0
 8001578:	eef0 4a60 	vmov.f32	s9, s1
 800157c:	eeb0 5a41 	vmov.f32	s10, s2
 8001580:	eef0 5a61 	vmov.f32	s11, s3
 8001584:	eeb0 6a42 	vmov.f32	s12, s4
 8001588:	eef0 6a62 	vmov.f32	s13, s5
 800158c:	eeb0 7a43 	vmov.f32	s14, s6
 8001590:	eef0 7a63 	vmov.f32	s15, s7
 8001594:	4b74      	ldr	r3, [pc, #464]	; (8001768 <main+0x290>)
 8001596:	ed83 4b00 	vstr	d4, [r3]
 800159a:	ed83 5b02 	vstr	d5, [r3, #8]
 800159e:	ed83 6b04 	vstr	d6, [r3, #16]
 80015a2:	ed83 7b06 	vstr	d7, [r3, #24]
		sprintf(QuatW, "%.2lf,", v.w); // format the double with two decimal places
 80015a6:	4b70      	ldr	r3, [pc, #448]	; (8001768 <main+0x290>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	4970      	ldr	r1, [pc, #448]	; (8001770 <main+0x298>)
 80015ae:	4871      	ldr	r0, [pc, #452]	; (8001774 <main+0x29c>)
 80015b0:	f005 fc36 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)QuatW, strlen(QuatW));
 80015b4:	486f      	ldr	r0, [pc, #444]	; (8001774 <main+0x29c>)
 80015b6:	f7fe fe5b 	bl	8000270 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	496c      	ldr	r1, [pc, #432]	; (8001774 <main+0x29c>)
 80015c2:	4863      	ldr	r0, [pc, #396]	; (8001750 <main+0x278>)
 80015c4:	f003 fc0e 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f000 fead 	bl	8002328 <HAL_Delay>
		sprintf(QuatX, "%.2lf,", v.x); // format the double with two decimal places
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <main+0x290>)
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	4966      	ldr	r1, [pc, #408]	; (8001770 <main+0x298>)
 80015d6:	4868      	ldr	r0, [pc, #416]	; (8001778 <main+0x2a0>)
 80015d8:	f005 fc22 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)QuatX, strlen(QuatX));
 80015dc:	4866      	ldr	r0, [pc, #408]	; (8001778 <main+0x2a0>)
 80015de:	f7fe fe47 	bl	8000270 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4963      	ldr	r1, [pc, #396]	; (8001778 <main+0x2a0>)
 80015ea:	4859      	ldr	r0, [pc, #356]	; (8001750 <main+0x278>)
 80015ec:	f003 fbfa 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 fe99 	bl	8002328 <HAL_Delay>
		sprintf(QuatY, "%.2lf,", v.y); // format the double with two decimal places
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <main+0x290>)
 80015f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015fc:	495c      	ldr	r1, [pc, #368]	; (8001770 <main+0x298>)
 80015fe:	485f      	ldr	r0, [pc, #380]	; (800177c <main+0x2a4>)
 8001600:	f005 fc0e 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)QuatY, strlen(QuatY));
 8001604:	485d      	ldr	r0, [pc, #372]	; (800177c <main+0x2a4>)
 8001606:	f7fe fe33 	bl	8000270 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	495a      	ldr	r1, [pc, #360]	; (800177c <main+0x2a4>)
 8001612:	484f      	ldr	r0, [pc, #316]	; (8001750 <main+0x278>)
 8001614:	f003 fbe6 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f000 fe85 	bl	8002328 <HAL_Delay>
		sprintf(QuatZ, "%.2lf\n", v.z); // format the double with two decimal places
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <main+0x290>)
 8001620:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001624:	4956      	ldr	r1, [pc, #344]	; (8001780 <main+0x2a8>)
 8001626:	4857      	ldr	r0, [pc, #348]	; (8001784 <main+0x2ac>)
 8001628:	f005 fbfa 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)QuatZ, strlen(QuatZ));
 800162c:	4855      	ldr	r0, [pc, #340]	; (8001784 <main+0x2ac>)
 800162e:	f7fe fe1f 	bl	8000270 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	4952      	ldr	r1, [pc, #328]	; (8001784 <main+0x2ac>)
 800163a:	4845      	ldr	r0, [pc, #276]	; (8001750 <main+0x278>)
 800163c:	f003 fbd2 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f000 fe71 	bl	8002328 <HAL_Delay>
 8001646:	e78f      	b.n	8001568 <main+0x90>
	}else if(dataOut == 1){//SERIAL GPS DATA
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <main+0x294>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d103      	bne.n	8001658 <main+0x180>
		serialOutput = 1;
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <main+0x2b0>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e787      	b.n	8001568 <main+0x90>
	}else if(dataOut == 2){//BLUETOOTH IMU DATA
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <main+0x294>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d16b      	bne.n	8001738 <main+0x260>
		v = bno055_getVectorQuaternion();
 8001660:	f7ff fdcc 	bl	80011fc <bno055_getVectorQuaternion>
 8001664:	eeb0 4a40 	vmov.f32	s8, s0
 8001668:	eef0 4a60 	vmov.f32	s9, s1
 800166c:	eeb0 5a41 	vmov.f32	s10, s2
 8001670:	eef0 5a61 	vmov.f32	s11, s3
 8001674:	eeb0 6a42 	vmov.f32	s12, s4
 8001678:	eef0 6a62 	vmov.f32	s13, s5
 800167c:	eeb0 7a43 	vmov.f32	s14, s6
 8001680:	eef0 7a63 	vmov.f32	s15, s7
 8001684:	4b38      	ldr	r3, [pc, #224]	; (8001768 <main+0x290>)
 8001686:	ed83 4b00 	vstr	d4, [r3]
 800168a:	ed83 5b02 	vstr	d5, [r3, #8]
 800168e:	ed83 6b04 	vstr	d6, [r3, #16]
 8001692:	ed83 7b06 	vstr	d7, [r3, #24]
		sprintf(QuatW, "%.2lf,", v.w); // format the double with two decimal places
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <main+0x290>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	4934      	ldr	r1, [pc, #208]	; (8001770 <main+0x298>)
 800169e:	4835      	ldr	r0, [pc, #212]	; (8001774 <main+0x29c>)
 80016a0:	f005 fbbe 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)QuatW, strlen(QuatW));
 80016a4:	4833      	ldr	r0, [pc, #204]	; (8001774 <main+0x29c>)
 80016a6:	f7fe fde3 	bl	8000270 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4930      	ldr	r1, [pc, #192]	; (8001774 <main+0x29c>)
 80016b2:	4836      	ldr	r0, [pc, #216]	; (800178c <main+0x2b4>)
 80016b4:	f003 fb96 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80016b8:	200a      	movs	r0, #10
 80016ba:	f000 fe35 	bl	8002328 <HAL_Delay>
		sprintf(QuatX, "%.2lf,", v.x); // format the double with two decimal places
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <main+0x290>)
 80016c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016c4:	492a      	ldr	r1, [pc, #168]	; (8001770 <main+0x298>)
 80016c6:	482c      	ldr	r0, [pc, #176]	; (8001778 <main+0x2a0>)
 80016c8:	f005 fbaa 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)QuatX, strlen(QuatX));
 80016cc:	482a      	ldr	r0, [pc, #168]	; (8001778 <main+0x2a0>)
 80016ce:	f7fe fdcf 	bl	8000270 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4927      	ldr	r1, [pc, #156]	; (8001778 <main+0x2a0>)
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <main+0x2b4>)
 80016dc:	f003 fb82 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80016e0:	200a      	movs	r0, #10
 80016e2:	f000 fe21 	bl	8002328 <HAL_Delay>
		sprintf(QuatY, "%.2lf,", v.y); // format the double with two decimal places
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <main+0x290>)
 80016e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016ec:	4920      	ldr	r1, [pc, #128]	; (8001770 <main+0x298>)
 80016ee:	4823      	ldr	r0, [pc, #140]	; (800177c <main+0x2a4>)
 80016f0:	f005 fb96 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)QuatY, strlen(QuatY));
 80016f4:	4821      	ldr	r0, [pc, #132]	; (800177c <main+0x2a4>)
 80016f6:	f7fe fdbb 	bl	8000270 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	491e      	ldr	r1, [pc, #120]	; (800177c <main+0x2a4>)
 8001702:	4822      	ldr	r0, [pc, #136]	; (800178c <main+0x2b4>)
 8001704:	f003 fb6e 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001708:	200a      	movs	r0, #10
 800170a:	f000 fe0d 	bl	8002328 <HAL_Delay>
		sprintf(QuatZ, "%.2lf\n", v.z); // format the double with two decimal places
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <main+0x290>)
 8001710:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001714:	491a      	ldr	r1, [pc, #104]	; (8001780 <main+0x2a8>)
 8001716:	481b      	ldr	r0, [pc, #108]	; (8001784 <main+0x2ac>)
 8001718:	f005 fb82 	bl	8006e20 <siprintf>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)QuatZ, strlen(QuatZ));
 800171c:	4819      	ldr	r0, [pc, #100]	; (8001784 <main+0x2ac>)
 800171e:	f7fe fda7 	bl	8000270 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29b      	uxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <main+0x2ac>)
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <main+0x2b4>)
 800172c:	f003 fb5a 	bl	8004de4 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001730:	200a      	movs	r0, #10
 8001732:	f000 fdf9 	bl	8002328 <HAL_Delay>
 8001736:	e717      	b.n	8001568 <main+0x90>
	}else if(dataOut == 3){//BLUETOOTH GPS DATA
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <main+0x294>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b03      	cmp	r3, #3
 800173e:	f47f af13 	bne.w	8001568 <main+0x90>
		serialOutput = 0;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <main+0x2b0>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	if(dataOut == 0){//SERIAL IMU DATA
 8001748:	e70e      	b.n	8001568 <main+0x90>
 800174a:	bf00      	nop
 800174c:	2000046c 	.word	0x2000046c
 8001750:	20000364 	.word	0x20000364
 8001754:	20000480 	.word	0x20000480
 8001758:	200003e8 	.word	0x200003e8
 800175c:	2000000c 	.word	0x2000000c
 8001760:	20000020 	.word	0x20000020
 8001764:	20000228 	.word	0x20000228
 8001768:	200004e8 	.word	0x200004e8
 800176c:	20000496 	.word	0x20000496
 8001770:	08009564 	.word	0x08009564
 8001774:	20000498 	.word	0x20000498
 8001778:	200004ac 	.word	0x200004ac
 800177c:	200004c0 	.word	0x200004c0
 8001780:	0800956c 	.word	0x0800956c
 8001784:	200004d4 	.word	0x200004d4
 8001788:	20000495 	.word	0x20000495
 800178c:	200002e0 	.word	0x200002e0

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b096      	sub	sp, #88	; 0x58
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2244      	movs	r2, #68	; 0x44
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fc7c 	bl	800709c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017b6:	f001 ff11 	bl	80035dc <HAL_PWREx_ControlVoltageScaling>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017c0:	f000 fa0a 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c4:	2302      	movs	r3, #2
 80017c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ce:	2310      	movs	r3, #16
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d6:	2302      	movs	r3, #2
 80017d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017de:	230a      	movs	r3, #10
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017e2:	2307      	movs	r3, #7
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 ff48 	bl	8003688 <HAL_RCC_OscConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80017fe:	f000 f9eb 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001802:	230f      	movs	r3, #15
 8001804:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2303      	movs	r3, #3
 8001808:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2104      	movs	r1, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fb10 	bl	8003e40 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001826:	f000 f9d7 	bl	8001bd8 <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3758      	adds	r7, #88	; 0x58
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_I2C1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_I2C1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <MX_I2C1_Init+0x7c>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_I2C1_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001870:	f001 f8e8 	bl	8002a44 <HAL_I2C_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187a:	f000 f9ad 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001882:	f001 fe05 	bl	8003490 <HAL_I2CEx_ConfigAnalogFilter>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800188c:	f000 f9a4 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_I2C1_Init+0x74>)
 8001894:	f001 fe47 	bl	8003526 <HAL_I2CEx_ConfigDigitalFilter>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f000 f99b 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000228 	.word	0x20000228
 80018ac:	40005400 	.word	0x40005400
 80018b0:	10909cec 	.word	0x10909cec

080018b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_SPI1_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <MX_SPI1_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_SPI1_Init+0x74>)
 80018c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_SPI1_Init+0x74>)
 80018ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_SPI1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_SPI1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_SPI1_Init+0x74>)
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_SPI1_Init+0x74>)
 80018ea:	2220      	movs	r2, #32
 80018ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_SPI1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_SPI1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_SPI1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_SPI1_Init+0x74>)
 8001902:	2207      	movs	r2, #7
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_SPI1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_SPI1_Init+0x74>)
 8001914:	f003 f974 	bl	8004c00 <HAL_SPI_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800191e:	f000 f95b 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000027c 	.word	0x2000027c
 800192c:	40013000 	.word	0x40013000

08001930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <MX_USART1_UART_Init+0x5c>)
 8001938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800193c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001974:	f003 f9e7 	bl	8004d46 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 f92b 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002e0 	.word	0x200002e0
 800198c:	40013800 	.word	0x40013800

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_USART2_UART_Init+0x5c>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019d4:	f003 f9b7 	bl	8004d46 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 f8fb 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000364 	.word	0x20000364
 80019ec:	40004400 	.word	0x40004400

080019f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <MX_USART3_UART_Init+0x5c>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 80019fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART3_UART_Init+0x58>)
 8001a34:	f003 f987 	bl	8004d46 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f000 f8cb 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200003e8 	.word	0x200003e8
 8001a4c:	40004800 	.word	0x40004800

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a27      	ldr	r2, [pc, #156]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_GPIO_Init+0xd0>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4816      	ldr	r0, [pc, #88]	; (8001b24 <MX_GPIO_Init+0xd4>)
 8001acc:	f000 ff8a 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_GPIO_Init+0xd8>)
 8001ae8:	f000 fdd2 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001aec:	2301      	movs	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <MX_GPIO_Init+0xd4>)
 8001b04:	f000 fdc4 	bl	8002690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2028      	movs	r0, #40	; 0x28
 8001b0e:	f000 fd0a 	bl	8002526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b12:	2028      	movs	r0, #40	; 0x28
 8001b14:	f000 fd23 	bl	800255e <HAL_NVIC_EnableIRQ>

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	48000800 	.word	0x48000800

08001b2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
	btnPress = 0;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	dataOut++;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b46:	701a      	strb	r2, [r3, #0]
	if(dataOut > 3){
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d902      	bls.n	8001b56 <HAL_GPIO_EXTI_Callback+0x2a>
		dataOut = 0;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
	}
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000494 	.word	0x20000494
 8001b68:	20000496 	.word	0x20000496

08001b6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

	//Re-enable UART RX interrupt
	//HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
//	HAL_UART_Receive_IT(&huart1, rxData1, 1);	//Bluetooth Receiver
//	HAL_UART_Receive_IT(&huart2, rxData2, 1);	//Serial Receiver
	HAL_UART_Receive_IT(&huart3, rxData3, 1);	//GPS Receiver
 8001b74:	2201      	movs	r2, #1
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <HAL_UART_RxCpltCallback+0x40>)
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <HAL_UART_RxCpltCallback+0x44>)
 8001b7a:	f003 f9a1 	bl	8004ec0 <HAL_UART_Receive_IT>
//	HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)




	if(serialOutput == 0){
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_UART_RxCpltCallback+0x48>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_UART_RxCpltCallback+0x26>
		HAL_UART_Transmit_IT(&huart1, rxData3, 1);	//Bluetooth Transmission
 8001b86:	2201      	movs	r2, #1
 8001b88:	4908      	ldr	r1, [pc, #32]	; (8001bac <HAL_UART_RxCpltCallback+0x40>)
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <HAL_UART_RxCpltCallback+0x4c>)
 8001b8c:	f003 f92a 	bl	8004de4 <HAL_UART_Transmit_IT>
 8001b90:	e004      	b.n	8001b9c <HAL_UART_RxCpltCallback+0x30>
	}else{
		HAL_UART_Transmit_IT(&huart2, rxData3, 1);	//Serial Transmission
 8001b92:	2201      	movs	r2, #1
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <HAL_UART_RxCpltCallback+0x40>)
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_UART_RxCpltCallback+0x50>)
 8001b98:	f003 f924 	bl	8004de4 <HAL_UART_Transmit_IT>
	}
	btnPress = 1;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_UART_RxCpltCallback+0x54>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit_IT(&huart1, rxData3, 1);	//Bluetooth Transmission
//	HAL_UART_Transmit_IT(&huart2, rxData3, 1);	//Serial Transmission
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000480 	.word	0x20000480
 8001bb0:	200003e8 	.word	0x200003e8
 8001bb4:	20000495 	.word	0x20000495
 8001bb8:	200002e0 	.word	0x200002e0
 8001bbc:	20000364 	.word	0x20000364
 8001bc0:	20000494 	.word	0x20000494

08001bc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	//Do nothing
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_MspInit+0x44>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_MspInit+0x44>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x44>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x44>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ac      	sub	sp, #176	; 0xb0
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2288      	movs	r2, #136	; 0x88
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fa25 	bl	800709c <memset>
  if(hi2c->Instance==I2C1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_I2C_MspInit+0xc0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d143      	bne.n	8001ce4 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fb0d 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c74:	f7ff ffb0 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001caa:	2304      	movs	r3, #4
 8001cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <HAL_I2C_MspInit+0xc8>)
 8001cb8:	f000 fcea 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_I2C_MspInit+0xc4>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	201f      	movs	r0, #31
 8001cda:	f000 fc24 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cde:	201f      	movs	r0, #31
 8001ce0:	f000 fc3d 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	37b0      	adds	r7, #176	; 0xb0
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_SPI_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d128      	bne.n	8001d6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d24:	6613      	str	r3, [r2, #96]	; 0x60
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_SPI_MspInit+0x80>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d4a:	23e0      	movs	r3, #224	; 0xe0
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d68:	f000 fc92 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013000 	.word	0x40013000
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0b0      	sub	sp, #192	; 0xc0
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	2288      	movs	r2, #136	; 0x88
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 f97d 	bl	800709c <memset>
  if(huart->Instance==USART1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <HAL_UART_MspInit+0x1e8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d145      	bne.n	8001e38 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001db0:	2300      	movs	r3, #0
 8001db2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fa65 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc4:	f7ff ff08 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc8:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dec:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001df8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e12:	2307      	movs	r3, #7
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f000 fc35 	bl	8002690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2025      	movs	r0, #37	; 0x25
 8001e2c:	f000 fb7b 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e30:	2025      	movs	r0, #37	; 0x25
 8001e32:	f000 fb94 	bl	800255e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e36:	e091      	b.n	8001f5c <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_UART_MspInit+0x1f0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d144      	bne.n	8001ecc <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fa1a 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001e5a:	f7ff febd 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	4a41      	ldr	r2, [pc, #260]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f000 fbeb 	bl	8002690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 fb31 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec4:	2026      	movs	r0, #38	; 0x26
 8001ec6:	f000 fb4a 	bl	800255e <HAL_NVIC_EnableIRQ>
}
 8001eca:	e047      	b.n	8001f5c <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_UART_MspInit+0x1f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d142      	bne.n	8001f5c <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 f9d0 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001eee:	f7ff fe73 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6593      	str	r3, [r2, #88]	; 0x58
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_UART_MspInit+0x1ec>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8001f22:	2330      	movs	r3, #48	; 0x30
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_UART_MspInit+0x1f8>)
 8001f48:	f000 fba2 	bl	8002690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2027      	movs	r0, #39	; 0x27
 8001f52:	f000 fae8 	bl	8002526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f56:	2027      	movs	r0, #39	; 0x27
 8001f58:	f000 fb01 	bl	800255e <HAL_NVIC_EnableIRQ>
}
 8001f5c:	bf00      	nop
 8001f5e:	37c0      	adds	r7, #192	; 0xc0
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40004800 	.word	0x40004800
 8001f74:	48000800 	.word	0x48000800

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <NMI_Handler+0x4>

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc4:	f000 f990 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <I2C1_EV_IRQHandler+0x10>)
 8001fd2:	f000 ffb1 	bl	8002f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000228 	.word	0x20000228

08001fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <USART1_IRQHandler+0x10>)
 8001fe6:	f002 ffc1 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002e0 	.word	0x200002e0

08001ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <USART2_IRQHandler+0x10>)
 8001ffa:	f002 ffb7 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000364 	.word	0x20000364

08002008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <USART3_IRQHandler+0x10>)
 800200e:	f002 ffad 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200003e8 	.word	0x200003e8

0800201c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002020:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002024:	f000 fcf6 	bl	8002a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_kill>:

int _kill(int pid, int sig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002046:	f005 f835 	bl	80070b4 <__errno>
 800204a:	4603      	mov	r3, r0
 800204c:	2216      	movs	r2, #22
 800204e:	601a      	str	r2, [r3, #0]
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_exit>:

void _exit (int status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffe7 	bl	800203c <_kill>
  while (1) {}    /* Make sure we hang here */
 800206e:	e7fe      	b.n	800206e <_exit+0x12>

08002070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e00a      	b.n	8002098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002082:	f3af 8000 	nop.w
 8002086:	4601      	mov	r1, r0
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf0      	blt.n	8002082 <_read+0x12>
  }

  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e009      	b.n	80020d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf1      	blt.n	80020bc <_write+0x12>
  }
  return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210a:	605a      	str	r2, [r3, #4]
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_isatty>:

int _isatty(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f004 ff9a 	bl	80070b4 <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20018000 	.word	0x20018000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	20000508 	.word	0x20000508
 80021b4:	20000660 	.word	0x20000660

080021b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e0:	f7ff ffea 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <LoopForever+0xe>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <LoopForever+0x16>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220a:	f004 ff59 	bl	80070c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220e:	f7ff f963 	bl	80014d8 <main>

08002212 <LoopForever>:

LoopForever:
    b LoopForever
 8002212:	e7fe      	b.n	8002212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002214:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002220:	0800993c 	.word	0x0800993c
  ldr r2, =_sbss
 8002224:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002228:	2000065c 	.word	0x2000065c

0800222c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_Init+0x3c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_Init+0x3c>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 f962 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224c:	2000      	movs	r0, #0
 800224e:	f000 f80f 	bl	8002270 <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	e001      	b.n	8002262 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800225e:	f7ff fcc1 	bl	8001be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002262:	79fb      	ldrb	r3, [r7, #7]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_InitTick+0x6c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_InitTick+0x70>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_InitTick+0x6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f96d 	bl	800257a <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d809      	bhi.n	80022c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b4:	f000 f937 	bl	8002526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_InitTick+0x74>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e007      	b.n	80022d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e004      	b.n	80022d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	e001      	b.n	80022d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000003c 	.word	0x2000003c
 80022e0:	20000034 	.word	0x20000034
 80022e4:	20000038 	.word	0x20000038

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000003c 	.word	0x2000003c
 800230c:	2000050c 	.word	0x2000050c

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	2000050c 	.word	0x2000050c

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000003c 	.word	0x2000003c

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e022      	b.n	8002602 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f003 021c 	and.w	r2, r3, #28
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d005      	beq.n	8002632 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e029      	b.n	8002686 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 020e 	bic.w	r2, r2, #14
 8002640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f003 021c 	and.w	r2, r3, #28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
    }
  }
  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e17f      	b.n	80029a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8171 	beq.w	800299a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d005      	beq.n	80026d0 <HAL_GPIO_Init+0x40>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d130      	bne.n	8002732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002706:	2201      	movs	r2, #1
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0201 	and.w	r2, r3, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b03      	cmp	r3, #3
 800273c:	d118      	bne.n	8002770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002744:	2201      	movs	r2, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	f003 0201 	and.w	r2, r3, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b03      	cmp	r3, #3
 800277a:	d017      	beq.n	80027ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	6939      	ldr	r1, [r7, #16]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80ac 	beq.w	800299a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_GPIO_Init+0x330>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_GPIO_Init+0x330>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6613      	str	r3, [r2, #96]	; 0x60
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_GPIO_Init+0x330>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800285a:	4a5a      	ldr	r2, [pc, #360]	; (80029c4 <HAL_GPIO_Init+0x334>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002884:	d025      	beq.n	80028d2 <HAL_GPIO_Init+0x242>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	; (80029c8 <HAL_GPIO_Init+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01f      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_GPIO_Init+0x33c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x23a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_GPIO_Init+0x340>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x236>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_GPIO_Init+0x344>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x232>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x348>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x22e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_GPIO_Init+0x34c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x22a>
 80028b6:	2306      	movs	r3, #6
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x244>
 80028d2:	2300      	movs	r3, #0
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028e4:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_GPIO_Init+0x334>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x350>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x350>)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_GPIO_Init+0x350>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f ae78 	bne.w	80026a0 <HAL_GPIO_Init+0x10>
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	48000400 	.word	0x48000400
 80029cc:	48000800 	.word	0x48000800
 80029d0:	48000c00 	.word	0x48000c00
 80029d4:	48001000 	.word	0x48001000
 80029d8:	48001400 	.word	0x48001400
 80029dc:	48001800 	.word	0x48001800
 80029e0:	40010400 	.word	0x40010400

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f87a 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e081      	b.n	8002b5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff f8de 	bl	8001c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d104      	bne.n	8002ade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	817b      	strh	r3, [r7, #10]
 8002b74:	4613      	mov	r3, r2
 8002b76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 80da 	bne.w	8002d3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x30>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0d3      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b9c:	f7ff fbb8 	bl	8002310 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2319      	movs	r3, #25
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa1a 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0be      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2bff      	cmp	r3, #255	; 0xff
 8002bee:	d90e      	bls.n	8002c0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fc10 	bl	800342c <I2C_TransferConfig>
 8002c0c:	e06c      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fbff 	bl	800342c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c2e:	e05b      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa17 	bl	8003068 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e07b      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d034      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d130      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f9a9 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04d      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2bff      	cmp	r3, #255	; 0xff
 8002ca8:	d90e      	bls.n	8002cc8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fbb3 	bl	800342c <I2C_TransferConfig>
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fba2 	bl	800342c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d19e      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9f6 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01a      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	80002000 	.word	0x80002000
 8002d48:	fe00e800 	.word	0xfe00e800

08002d4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	461a      	mov	r2, r3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	817b      	strh	r3, [r7, #10]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	f040 80db 	bne.w	8002f24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2C_Master_Receive+0x30>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0d4      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d84:	f7ff fac4 	bl	8002310 <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	2319      	movs	r3, #25
 8002d90:	2201      	movs	r2, #1
 8002d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f926 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0bf      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2222      	movs	r2, #34	; 0x22
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2210      	movs	r2, #16
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2bff      	cmp	r3, #255	; 0xff
 8002dd6:	d90e      	bls.n	8002df6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <HAL_I2C_Master_Receive+0x1e4>)
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fb1c 	bl	800342c <I2C_TransferConfig>
 8002df4:	e06d      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_I2C_Master_Receive+0x1e4>)
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fb0b 	bl	800342c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e16:	e05c      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	6a39      	ldr	r1, [r7, #32]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f99f 	bl	8003160 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e07c      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d034      	beq.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d130      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8b4 	bl	8002fe8 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e04d      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fabe 	bl	800342c <I2C_TransferConfig>
 8002eb0:	e00f      	b.n	8002ed2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 faad 	bl	800342c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d19d      	bne.n	8002e18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	6a39      	ldr	r1, [r7, #32]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f901 	bl	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_I2C_Master_Receive+0x1e8>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	80002400 	.word	0x80002400
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
  }
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7a:	b2db      	uxtb	r3, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d103      	bne.n	8002fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	619a      	str	r2, [r3, #24]
  }
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff8:	e022      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003000:	d01e      	beq.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f985 	bl	8002310 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d113      	bne.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e00f      	b.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d0cd      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003074:	e02c      	b.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8ea 	bl	8003254 <I2C_IsErrorOccurred>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e02a      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003090:	d01e      	beq.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff f93d 	bl	8002310 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d113      	bne.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d1cb      	bne.n	8003076 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f4:	e028      	b.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f8aa 	bl	8003254 <I2C_IsErrorOccurred>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e026      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7ff f901 	bl	8002310 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d1cf      	bne.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800316c:	e064      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f86e 	bl	8003254 <I2C_IsErrorOccurred>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e062      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b20      	cmp	r3, #32
 800318e:	d138      	bne.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d105      	bne.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e04e      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d107      	bne.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2210      	movs	r2, #16
 80031be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2204      	movs	r2, #4
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
 80031c6:	e002      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2220      	movs	r2, #32
 80031d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e022      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff f885 	bl	8002310 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d193      	bne.n	800316e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	fe00e800 	.word	0xfe00e800

08003254 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d075      	beq.n	800336c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2210      	movs	r2, #16
 8003286:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003288:	e056      	b.n	8003338 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003290:	d052      	beq.n	8003338 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7ff f83d 	bl	8002310 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_IsErrorOccurred+0x54>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d147      	bne.n	8003338 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ca:	d12e      	bne.n	800332a <I2C_IsErrorOccurred+0xd6>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d2:	d02a      	beq.n	800332a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d027      	beq.n	800332a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032ea:	f7ff f811 	bl	8002310 <HAL_GetTick>
 80032ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f0:	e01b      	b.n	800332a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032f2:	f7ff f80d 	bl	8002310 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b19      	cmp	r3, #25
 80032fe:	d914      	bls.n	800332a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d1dc      	bne.n	80032f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d003      	beq.n	800334e <I2C_IsErrorOccurred+0xfa>
 8003346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800334a:	2b00      	cmp	r3, #0
 800334c:	d09d      	beq.n	800328a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800334e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80033da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01c      	beq.n	800341c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff fddc 	bl	8002fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <I2C_IsErrorOccurred+0x1d4>)
 80033f4:	400b      	ands	r3, r1
 80033f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800341c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003420:	4618      	mov	r0, r3
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fe00e800 	.word	0xfe00e800

0800342c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	4613      	mov	r3, r2
 800343c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003444:	7a7b      	ldrb	r3, [r7, #9]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800344c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	4313      	orrs	r3, r2
 8003456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800345a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	0d5b      	lsrs	r3, r3, #21
 8003466:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <I2C_TransferConfig+0x60>)
 800346c:	430b      	orrs	r3, r1
 800346e:	43db      	mvns	r3, r3
 8003470:	ea02 0103 	and.w	r1, r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	03ff63ff 	.word	0x03ff63ff

08003490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d138      	bne.n	8003518 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e032      	b.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	d139      	bne.n	80035b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003546:	2302      	movs	r3, #2
 8003548:	e033      	b.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2224      	movs	r2, #36	; 0x24
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003578:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40007000 	.word	0x40007000

080035dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ea:	d130      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f8:	d038      	beq.n	800366c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003602:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2232      	movs	r2, #50	; 0x32
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9b      	lsrs	r3, r3, #18
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003620:	e002      	b.n	8003628 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3b01      	subs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003634:	d102      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f2      	bne.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d110      	bne.n	800366c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00f      	b.n	800366e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d007      	beq.n	800366c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003664:	4a05      	ldr	r2, [pc, #20]	; (800367c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40007000 	.word	0x40007000
 8003680:	20000034 	.word	0x20000034
 8003684:	431bde83 	.word	0x431bde83

08003688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e3ca      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4b94      	ldr	r3, [pc, #592]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80e4 	beq.w	8003884 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4a>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	f040 808b 	bne.w	80037e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 8087 	bne.w	80037e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x62>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e3a2      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_RCC_OscConfig+0x7c>
 80036fa:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003702:	e005      	b.n	8003710 <HAL_RCC_OscConfig+0x88>
 8003704:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003710:	4293      	cmp	r3, r2
 8003712:	d223      	bcs.n	800375c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fd55 	bl	80041c8 <RCC_SetFlashLatencyFromMSIRange>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e383      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003728:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a72      	ldr	r2, [pc, #456]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	496d      	ldr	r1, [pc, #436]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003746:	4b6c      	ldr	r3, [pc, #432]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	4968      	ldr	r1, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
 800375a:	e025      	b.n	80037a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4960      	ldr	r1, [pc, #384]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377a:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	495b      	ldr	r1, [pc, #364]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fd15 	bl	80041c8 <RCC_SetFlashLatencyFromMSIRange>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e343      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037a8:	f000 fc4a 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	4950      	ldr	r1, [pc, #320]	; (80038fc <HAL_RCC_OscConfig+0x274>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_RCC_OscConfig+0x278>)
 80037c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037c8:	4b4e      	ldr	r3, [pc, #312]	; (8003904 <HAL_RCC_OscConfig+0x27c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fd4f 	bl	8002270 <HAL_InitTick>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d052      	beq.n	8003882 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	e327      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d032      	beq.n	800384e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fd8c 	bl	8002310 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037fc:	f7fe fd88 	bl	8002310 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e310      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380e:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a36      	ldr	r2, [pc, #216]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4931      	ldr	r1, [pc, #196]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003838:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	492c      	ldr	r1, [pc, #176]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e01a      	b.n	8003884 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800385a:	f7fe fd59 	bl	8002310 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003862:	f7fe fd55 	bl	8002310 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e2dd      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x1da>
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003882:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d074      	beq.n	800397a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x21a>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d10e      	bne.n	80038ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d10b      	bne.n	80038ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d064      	beq.n	8003978 <HAL_RCC_OscConfig+0x2f0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d160      	bne.n	8003978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e2ba      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x24a>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e026      	b.n	8003920 <HAL_RCC_OscConfig+0x298>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038da:	d115      	bne.n	8003908 <HAL_RCC_OscConfig+0x280>
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a02      	ldr	r2, [pc, #8]	; (80038f8 <HAL_RCC_OscConfig+0x270>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x298>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08009574 	.word	0x08009574
 8003900:	20000034 	.word	0x20000034
 8003904:	20000038 	.word	0x20000038
 8003908:	4ba0      	ldr	r3, [pc, #640]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a9f      	ldr	r2, [pc, #636]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b9d      	ldr	r3, [pc, #628]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a9c      	ldr	r2, [pc, #624]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fcf2 	bl	8002310 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fe fcee 	bl	8002310 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e276      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x2a8>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fcde 	bl	8002310 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fcda 	bl	8002310 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e262      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396a:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x2d0>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d060      	beq.n	8003a48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x310>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d119      	bne.n	80039c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d116      	bne.n	80039c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	4b7c      	ldr	r3, [pc, #496]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x328>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e23f      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	4973      	ldr	r1, [pc, #460]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c4:	e040      	b.n	8003a48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d023      	beq.n	8003a16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ce:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fe fc99 	bl	8002310 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fc95 	bl	8002310 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e21d      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b62      	ldr	r3, [pc, #392]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	495f      	ldr	r1, [pc, #380]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	e018      	b.n	8003a48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5c      	ldr	r2, [pc, #368]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fe fc75 	bl	8002310 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fe fc71 	bl	8002310 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1f9      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03c      	beq.n	8003ace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fc50 	bl	8002310 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe fc4c 	bl	8002310 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1d4      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ef      	beq.n	8003a74 <HAL_RCC_OscConfig+0x3ec>
 8003a94:	e01b      	b.n	8003ace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a96:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fc33 	bl	8002310 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aae:	f7fe fc2f 	bl	8002310 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e1b7      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac0:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ef      	bne.n	8003aae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a6 	beq.w	8003c28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	; 0x58
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCC_OscConfig+0x508>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_OscConfig+0x508>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_RCC_OscConfig+0x508>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b20:	f7fe fbf6 	bl	8002310 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe fbf2 	bl	8002310 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e17a      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <HAL_RCC_OscConfig+0x508>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4d8>
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5e:	e029      	b.n	8003bb4 <HAL_RCC_OscConfig+0x52c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d115      	bne.n	8003b94 <HAL_RCC_OscConfig+0x50c>
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <HAL_RCC_OscConfig+0x504>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x52c>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40007000 	.word	0x40007000
 8003b94:	4b9c      	ldr	r3, [pc, #624]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a9b      	ldr	r2, [pc, #620]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba4:	4b98      	ldr	r3, [pc, #608]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a97      	ldr	r2, [pc, #604]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d016      	beq.n	8003bea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fe fba8 	bl	8002310 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fba4 	bl	8002310 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e12a      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ed      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x53c>
 8003be8:	e015      	b.n	8003c16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fe fb91 	bl	8002310 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fe fb8d 	bl	8002310 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e113      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c08:	4b7f      	ldr	r3, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ed      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b7a      	ldr	r3, [pc, #488]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	4a79      	ldr	r2, [pc, #484]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80fe 	beq.w	8003e2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	f040 80d0 	bne.w	8003ddc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c3c:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d130      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d127      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d11f      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c7c:	2a07      	cmp	r2, #7
 8003c7e:	bf14      	ite	ne
 8003c80:	2201      	movne	r2, #1
 8003c82:	2200      	moveq	r2, #0
 8003c84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d113      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	3b01      	subs	r3, #1
 8003c98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d06e      	beq.n	8003d90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d069      	beq.n	8003d8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0ad      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce0:	f7fe fb16 	bl	8002310 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fe fb12 	bl	8002310 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e09a      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x784>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d16:	3a01      	subs	r2, #1
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d20:	0212      	lsls	r2, r2, #8
 8003d22:	4311      	orrs	r1, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d28:	0852      	lsrs	r2, r2, #1
 8003d2a:	3a01      	subs	r2, #1
 8003d2c:	0552      	lsls	r2, r2, #21
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d34:	0852      	lsrs	r2, r2, #1
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0652      	lsls	r2, r2, #25
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d40:	0912      	lsrs	r2, r2, #4
 8003d42:	0452      	lsls	r2, r2, #17
 8003d44:	430a      	orrs	r2, r1
 8003d46:	4930      	ldr	r1, [pc, #192]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2d      	ldr	r2, [pc, #180]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d64:	f7fe fad4 	bl	8002310 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe fad0 	bl	8002310 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e058      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8a:	e050      	b.n	8003e2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04f      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d148      	bne.n	8003e2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003db4:	f7fe faac 	bl	8002310 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe faa8 	bl	8002310 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e030      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x734>
 8003dda:	e028      	b.n	8003e2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d023      	beq.n	8003e2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_RCC_OscConfig+0x780>)
 8003de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fe fa8f 	bl	8002310 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df4:	e00c      	b.n	8003e10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe fa8b 	bl	8002310 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d905      	bls.n	8003e10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e013      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_OscConfig+0x7b0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ec      	bne.n	8003df6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x7b0>)
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4905      	ldr	r1, [pc, #20]	; (8003e38 <HAL_RCC_OscConfig+0x7b0>)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x7b4>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	60cb      	str	r3, [r1, #12]
 8003e28:	e001      	b.n	8003e2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	feeefffc 	.word	0xfeeefffc

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0e7      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b75      	ldr	r3, [pc, #468]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d910      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	4970      	ldr	r1, [pc, #448]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b6e      	ldr	r3, [pc, #440]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0cf      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d908      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4960      	ldr	r1, [pc, #384]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04c      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d121      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0a6      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b54      	ldr	r3, [pc, #336]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d115      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e09a      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08e      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e086      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b46      	ldr	r3, [pc, #280]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4943      	ldr	r1, [pc, #268]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f28:	f7fe f9f2 	bl	8002310 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7fe f9ee 	bl	8002310 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e06e      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d208      	bcs.n	8003f86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	492b      	ldr	r1, [pc, #172]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d210      	bcs.n	8003fb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 0207 	bic.w	r2, r3, #7
 8003f9c:	4923      	ldr	r1, [pc, #140]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e036      	b.n	8004024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4918      	ldr	r1, [pc, #96]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4910      	ldr	r1, [pc, #64]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ff4:	f000 f824 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	490b      	ldr	r1, [pc, #44]	; (8004034 <HAL_RCC_ClockConfig+0x1f4>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1f8>)
 8004012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_ClockConfig+0x1fc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f929 	bl	8002270 <HAL_InitTick>
 800401e:	4603      	mov	r3, r0
 8004020:	72fb      	strb	r3, [r7, #11]

  return status;
 8004022:	7afb      	ldrb	r3, [r7, #11]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40022000 	.word	0x40022000
 8004030:	40021000 	.word	0x40021000
 8004034:	08009574 	.word	0x08009574
 8004038:	20000034 	.word	0x20000034
 800403c:	20000038 	.word	0x20000038

08004040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404e:	4b3e      	ldr	r3, [pc, #248]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x34>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d121      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d11e      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e005      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004090:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800409c:	4a2b      	ldr	r2, [pc, #172]	; (800414c <HAL_RCC_GetSysClockFreq+0x10c>)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d102      	bne.n	80040be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_RCC_GetSysClockFreq+0x110>)
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e004      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCC_GetSysClockFreq+0x114>)
 80040c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	d134      	bne.n	8004138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d003      	beq.n	80040ec <HAL_RCC_GetSysClockFreq+0xac>
 80040e4:	e005      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040e6:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_RCC_GetSysClockFreq+0x110>)
 80040e8:	617b      	str	r3, [r7, #20]
      break;
 80040ea:	e005      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ee:	617b      	str	r3, [r7, #20]
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	617b      	str	r3, [r7, #20]
      break;
 80040f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	3301      	adds	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	fb03 f202 	mul.w	r2, r3, r2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_RCC_GetSysClockFreq+0x108>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	0e5b      	lsrs	r3, r3, #25
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	3301      	adds	r3, #1
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004138:	69bb      	ldr	r3, [r7, #24]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3724      	adds	r7, #36	; 0x24
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	0800958c 	.word	0x0800958c
 8004150:	00f42400 	.word	0x00f42400
 8004154:	007a1200 	.word	0x007a1200

08004158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000034 	.word	0x20000034

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08009584 	.word	0x08009584

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041a0:	f7ff ffda 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08009584 	.word	0x08009584

080041c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041e0:	f7ff f9ee 	bl	80035c0 <HAL_PWREx_GetVoltageRange>
 80041e4:	6178      	str	r0, [r7, #20]
 80041e6:	e014      	b.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	4a24      	ldr	r2, [pc, #144]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6593      	str	r3, [r2, #88]	; 0x58
 80041f4:	4b22      	ldr	r3, [pc, #136]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004200:	f7ff f9de 	bl	80035c0 <HAL_PWREx_GetVoltageRange>
 8004204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d10b      	bne.n	8004232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d919      	bls.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2ba0      	cmp	r3, #160	; 0xa0
 8004224:	d902      	bls.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004226:	2302      	movs	r3, #2
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	e013      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800422c:	2301      	movs	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	e010      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b80      	cmp	r3, #128	; 0x80
 8004236:	d902      	bls.n	800423e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004238:	2303      	movs	r3, #3
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e00a      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d102      	bne.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004244:	2302      	movs	r3, #2
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e004      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b70      	cmp	r3, #112	; 0x70
 800424e:	d101      	bne.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004250:	2301      	movs	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 0207 	bic.w	r2, r3, #7
 800425c:	4909      	ldr	r1, [pc, #36]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d001      	beq.n	8004276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	40022000 	.word	0x40022000

08004288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004290:	2300      	movs	r3, #0
 8004292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004294:	2300      	movs	r3, #0
 8004296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d041      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ac:	d02a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b2:	d824      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b8:	d008      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042be:	d81e      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d010      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042ca:	e018      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042cc:	4b86      	ldr	r3, [pc, #536]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a85      	ldr	r2, [pc, #532]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d8:	e015      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fabb 	bl	800485c <RCCEx_PLLSAI1_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ea:	e00c      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3320      	adds	r3, #32
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fba6 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	74fb      	strb	r3, [r7, #19]
      break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800430c:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431a:	4973      	ldr	r1, [pc, #460]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d041      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800433c:	d02a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800433e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004348:	d008      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434e:	d81e      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004358:	d010      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800435a:	e018      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800435c:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a61      	ldr	r2, [pc, #388]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004368:	e015      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa73 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800437a:	e00c      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3320      	adds	r3, #32
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fb5e 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	74fb      	strb	r3, [r7, #19]
      break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800439c:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043aa:	494f      	ldr	r1, [pc, #316]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a0 	beq.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6593      	str	r3, [r2, #88]	; 0x58
 80043ec:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f8:	2301      	movs	r3, #1
 80043fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fc:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004408:	f7fd ff82 	bl	8002310 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800440e:	e009      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004410:	f7fd ff7e 	bl	8002310 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	74fb      	strb	r3, [r7, #19]
        break;
 8004422:	e005      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ef      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d15c      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	429a      	cmp	r2, r3
 8004452:	d019      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004454:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fd ff3d 	bl	8002310 <HAL_GetTick>
 8004496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004498:	e00b      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fd ff39 	bl	8002310 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d902      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	74fb      	strb	r3, [r7, #19]
            break;
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ec      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d6:	4904      	ldr	r1, [pc, #16]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044de:	e009      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
 80044e4:	e006      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f4:	7c7b      	ldrb	r3, [r7, #17]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d105      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b9e      	ldr	r3, [pc, #632]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a9d      	ldr	r2, [pc, #628]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004512:	4b98      	ldr	r3, [pc, #608]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	4994      	ldr	r1, [pc, #592]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004534:	4b8f      	ldr	r3, [pc, #572]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 020c 	bic.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	498c      	ldr	r1, [pc, #560]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004556:	4b87      	ldr	r3, [pc, #540]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	4983      	ldr	r1, [pc, #524]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004578:	4b7e      	ldr	r3, [pc, #504]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	497b      	ldr	r1, [pc, #492]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800459a:	4b76      	ldr	r3, [pc, #472]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a8:	4972      	ldr	r1, [pc, #456]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045bc:	4b6d      	ldr	r3, [pc, #436]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	496a      	ldr	r1, [pc, #424]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	4961      	ldr	r1, [pc, #388]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004600:	4b5c      	ldr	r3, [pc, #368]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460e:	4959      	ldr	r1, [pc, #356]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004622:	4b54      	ldr	r3, [pc, #336]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	4950      	ldr	r1, [pc, #320]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004644:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	4948      	ldr	r1, [pc, #288]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	493f      	ldr	r1, [pc, #252]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d028      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004688:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004696:	4937      	ldr	r1, [pc, #220]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b32      	ldr	r3, [pc, #200]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a31      	ldr	r2, [pc, #196]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
 80046b4:	e011      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046be:	d10c      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f8c8 	bl	800485c <RCCEx_PLLSAI1_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d028      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	491f      	ldr	r1, [pc, #124]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004704:	d106      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004710:	60d3      	str	r3, [r2, #12]
 8004712:	e011      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f899 	bl	800485c <RCCEx_PLLSAI1_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02b      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004752:	4908      	ldr	r1, [pc, #32]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004762:	d109      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a02      	ldr	r2, [pc, #8]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476e:	60d3      	str	r3, [r2, #12]
 8004770:	e014      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004780:	d10c      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f867 	bl	800485c <RCCEx_PLLSAI1_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b6:	4928      	ldr	r1, [pc, #160]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f844 	bl	800485c <RCCEx_PLLSAI1_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d014      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	74bb      	strb	r3, [r7, #18]
 80047e2:	e011      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3320      	adds	r3, #32
 80047f2:	2102      	movs	r1, #2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 f925 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004822:	490d      	ldr	r1, [pc, #52]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004846:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800484e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000

0800485c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486a:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d018      	beq.n	80048a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0203 	and.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
       ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
       ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d047      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	e044      	b.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d018      	beq.n	80048e2 <RCCEx_PLLSAI1_Config+0x86>
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d825      	bhi.n	8004900 <RCCEx_PLLSAI1_Config+0xa4>
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d002      	beq.n	80048be <RCCEx_PLLSAI1_Config+0x62>
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d009      	beq.n	80048d0 <RCCEx_PLLSAI1_Config+0x74>
 80048bc:	e020      	b.n	8004900 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048be:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11d      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ce:	e01a      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d0:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e0:	e013      	b.n	800490a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ee:	4b54      	ldr	r3, [pc, #336]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048fe:	e006      	b.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e004      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004916:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	430b      	orrs	r3, r1
 800492c:	4944      	ldr	r1, [pc, #272]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d17d      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fd fce4 	bl	8002310 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800494a:	e009      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494c:	f7fd fce0 	bl	8002310 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d902      	bls.n	8004960 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	73fb      	strb	r3, [r7, #15]
        break;
 800495e:	e005      	b.n	800496c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ef      	bne.n	800494c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d160      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	0211      	lsls	r1, r2, #8
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	0912      	lsrs	r2, r2, #4
 8004990:	0452      	lsls	r2, r2, #17
 8004992:	430a      	orrs	r2, r1
 8004994:	492a      	ldr	r1, [pc, #168]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
 800499a:	e027      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d112      	bne.n	80049c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	0211      	lsls	r1, r2, #8
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6912      	ldr	r2, [r2, #16]
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	0552      	lsls	r2, r2, #21
 80049be:	430a      	orrs	r2, r1
 80049c0:	491f      	ldr	r1, [pc, #124]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]
 80049c6:	e011      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	0211      	lsls	r1, r2, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6952      	ldr	r2, [r2, #20]
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0652      	lsls	r2, r2, #25
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4916      	ldr	r1, [pc, #88]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd fc8a 	bl	8002310 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fe:	e009      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a00:	f7fd fc86 	bl	8002310 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d902      	bls.n	8004a14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
          break;
 8004a12:	e005      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ef      	beq.n	8004a00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4904      	ldr	r1, [pc, #16]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a52:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a5e:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0203 	and.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d10d      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
       ||
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a76:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
       ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d047      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e044      	b.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d018      	beq.n	8004aca <RCCEx_PLLSAI2_Config+0x86>
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d825      	bhi.n	8004ae8 <RCCEx_PLLSAI2_Config+0xa4>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d002      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x62>
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d009      	beq.n	8004ab8 <RCCEx_PLLSAI2_Config+0x74>
 8004aa4:	e020      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aa6:	4b55      	ldr	r3, [pc, #340]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11d      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab6:	e01a      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d116      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac8:	e013      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aca:	4b4c      	ldr	r3, [pc, #304]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad6:	4b49      	ldr	r3, [pc, #292]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ae6:	e006      	b.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e004      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004afe:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6819      	ldr	r1, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	430b      	orrs	r3, r1
 8004b14:	4939      	ldr	r1, [pc, #228]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d167      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2c:	f7fd fbf0 	bl	8002310 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b32:	e009      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b34:	f7fd fbec 	bl	8002310 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d902      	bls.n	8004b48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	73fb      	strb	r3, [r7, #15]
        break;
 8004b46:	e005      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ef      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d14a      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	0211      	lsls	r1, r2, #8
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	0912      	lsrs	r2, r2, #4
 8004b78:	0452      	lsls	r2, r2, #17
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	491f      	ldr	r1, [pc, #124]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	614b      	str	r3, [r1, #20]
 8004b82:	e011      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6892      	ldr	r2, [r2, #8]
 8004b94:	0211      	lsls	r1, r2, #8
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6912      	ldr	r2, [r2, #16]
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4916      	ldr	r1, [pc, #88]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fbac 	bl	8002310 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bba:	e009      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bbc:	f7fd fba8 	bl	8002310 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004bce:	e005      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e095      	b.n	8004d3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c22:	d009      	beq.n	8004c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
 8004c2a:	e005      	b.n	8004c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd f850 	bl	8001cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c78:	d902      	bls.n	8004c80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e002      	b.n	8004c86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c8e:	d007      	beq.n	8004ca0 <HAL_SPI_Init+0xa0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 0204 	and.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e040      	b.n	8004dda <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fd f807 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	; 0x24
 8004d72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fbe9 	bl	800555c <UART_SetConfig>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e022      	b.n	8004dda <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fe95 	bl	8005acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 ff1c 	bl	8005c10 <UART_CheckIdleState>
 8004dd8:	4603      	mov	r3, r0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b08b      	sub	sp, #44	; 0x2c
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d156      	bne.n	8004ea8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_UART_Transmit_IT+0x22>
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04f      	b.n	8004eaa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_UART_Transmit_IT+0x34>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e048      	b.n	8004eaa <HAL_UART_Transmit_IT+0xc6>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2221      	movs	r2, #33	; 0x21
 8004e48:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d107      	bne.n	8004e64 <HAL_UART_Transmit_IT+0x80>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <HAL_UART_Transmit_IT+0xd4>)
 8004e60:	669a      	str	r2, [r3, #104]	; 0x68
 8004e62:	e002      	b.n	8004e6a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <HAL_UART_Transmit_IT+0xd8>)
 8004e68:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	6a3a      	ldr	r2, [r7, #32]
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e6      	bne.n	8004e72 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	372c      	adds	r7, #44	; 0x2c
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	0800616b 	.word	0x0800616b
 8004ebc:	080060b3 	.word	0x080060b3

08004ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d142      	bne.n	8004f5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_Receive_IT+0x22>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e03b      	b.n	8004f5e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Receive_IT+0x34>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e034      	b.n	8004f5e <HAL_UART_Receive_IT+0x9e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_UART_Receive_IT+0xa8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01f      	beq.n	8004f4c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 ff6a 	bl	8005e2c <UART_Start_Receive_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	; 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40008000 	.word	0x40008000

08004f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	; 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d115      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00f      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 82a6 	beq.w	8005516 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
      }
      return;
 8004fd2:	e2a0      	b.n	8005516 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8117 	beq.w	800520c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fee:	4b85      	ldr	r3, [pc, #532]	; (8005204 <HAL_UART_IRQHandler+0x298>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 810a 	beq.w	800520c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d011      	beq.n	8005028 <HAL_UART_IRQHandler+0xbc>
 8005004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501e:	f043 0201 	orr.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d011      	beq.n	8005058 <HAL_UART_IRQHandler+0xec>
 8005034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2202      	movs	r2, #2
 8005046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d011      	beq.n	8005088 <HAL_UART_IRQHandler+0x11c>
 8005064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2204      	movs	r2, #4
 8005076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507e:	f043 0202 	orr.w	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d017      	beq.n	80050c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2208      	movs	r2, #8
 80050b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ba:	f043 0208 	orr.w	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d012      	beq.n	80050f6 <HAL_UART_IRQHandler+0x18a>
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00c      	beq.n	80050f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 820c 	beq.w	800551a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d005      	beq.n	800514e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04f      	beq.n	80051ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 ff36 	bl	8005fc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d141      	bne.n	80051e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800518e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800519a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1d9      	bne.n	8005162 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d013      	beq.n	80051de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_UART_IRQHandler+0x29c>)
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd fa23 	bl	800260e <HAL_DMA_Abort_IT>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e00f      	b.n	80051fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9a6 	bl	8005530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e00b      	b.n	80051fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f9a2 	bl	8005530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	e007      	b.n	80051fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f99e 	bl	8005530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80051fc:	e18d      	b.n	800551a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fe:	bf00      	nop
    return;
 8005200:	e18b      	b.n	800551a <HAL_UART_IRQHandler+0x5ae>
 8005202:	bf00      	nop
 8005204:	04000120 	.word	0x04000120
 8005208:	08006087 	.word	0x08006087

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005210:	2b01      	cmp	r3, #1
 8005212:	f040 8146 	bne.w	80054a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 813f 	beq.w	80054a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8138 	beq.w	80054a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2210      	movs	r2, #16
 8005238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	f040 80b4 	bne.w	80053b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005256:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 815f 	beq.w	800551e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526a:	429a      	cmp	r2, r3
 800526c:	f080 8157 	bcs.w	800551e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005276:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 8085 	bne.w	8005396 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1da      	bne.n	800528c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e1      	bne.n	80052d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800533c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e3      	bne.n	8005312 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	f023 0310 	bic.w	r3, r3, #16
 800536a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005378:	65bb      	str	r3, [r7, #88]	; 0x58
 800537a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800537e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e4      	bne.n	8005356 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4618      	mov	r0, r3
 8005392:	f7fd f8fe 	bl	8002592 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8ca 	bl	8005544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053b0:	e0b5      	b.n	800551e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80a7 	beq.w	8005522 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80053d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80a2 	beq.w	8005522 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
 8005402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e4      	bne.n	80053de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	623b      	str	r3, [r7, #32]
   return(result);
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005438:	633a      	str	r2, [r7, #48]	; 0x30
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800543e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e3      	bne.n	8005414 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0310 	bic.w	r3, r3, #16
 8005472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	617b      	str	r3, [r7, #20]
   return(result);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e4      	bne.n	800545e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f852 	bl	8005544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054a0:	e03f      	b.n	8005522 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <HAL_UART_IRQHandler+0x560>
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f83a 	bl	800653e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ca:	e02d      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00e      	beq.n	80054f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01c      	beq.n	8005526 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
    }
    return;
 80054f4:	e017      	b.n	8005526 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d012      	beq.n	8005528 <HAL_UART_IRQHandler+0x5bc>
 8005502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fe8b 	bl	800622a <UART_EndTransmit_IT>
    return;
 8005514:	e008      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005516:	bf00      	nop
 8005518:	e006      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
    return;
 800551a:	bf00      	nop
 800551c:	e004      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
      return;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005526:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005528:	37e8      	adds	r7, #232	; 0xe8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800555c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	431a      	orrs	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	4313      	orrs	r3, r2
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4ba4      	ldr	r3, [pc, #656]	; (800581c <UART_SetConfig+0x2c0>)
 800558c:	4013      	ands	r3, r2
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005594:	430b      	orrs	r3, r1
 8005596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a99      	ldr	r2, [pc, #612]	; (8005820 <UART_SetConfig+0x2c4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	4313      	orrs	r3, r2
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	430a      	orrs	r2, r1
 80055da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a90      	ldr	r2, [pc, #576]	; (8005824 <UART_SetConfig+0x2c8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d126      	bne.n	8005634 <UART_SetConfig+0xd8>
 80055e6:	4b90      	ldr	r3, [pc, #576]	; (8005828 <UART_SetConfig+0x2cc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d81b      	bhi.n	800562c <UART_SetConfig+0xd0>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0xa0>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800561d 	.word	0x0800561d
 8005604:	08005615 	.word	0x08005615
 8005608:	08005625 	.word	0x08005625
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e116      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005614:	2302      	movs	r3, #2
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e112      	b.n	8005842 <UART_SetConfig+0x2e6>
 800561c:	2304      	movs	r3, #4
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e10e      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005624:	2308      	movs	r3, #8
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e10a      	b.n	8005842 <UART_SetConfig+0x2e6>
 800562c:	2310      	movs	r3, #16
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e106      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7c      	ldr	r2, [pc, #496]	; (800582c <UART_SetConfig+0x2d0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d138      	bne.n	80056b0 <UART_SetConfig+0x154>
 800563e:	4b7a      	ldr	r3, [pc, #488]	; (8005828 <UART_SetConfig+0x2cc>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d82d      	bhi.n	80056a8 <UART_SetConfig+0x14c>
 800564c:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0xf8>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005689 	.word	0x08005689
 8005658:	080056a9 	.word	0x080056a9
 800565c:	080056a9 	.word	0x080056a9
 8005660:	080056a9 	.word	0x080056a9
 8005664:	08005699 	.word	0x08005699
 8005668:	080056a9 	.word	0x080056a9
 800566c:	080056a9 	.word	0x080056a9
 8005670:	080056a9 	.word	0x080056a9
 8005674:	08005691 	.word	0x08005691
 8005678:	080056a9 	.word	0x080056a9
 800567c:	080056a9 	.word	0x080056a9
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056a1 	.word	0x080056a1
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e0d8      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005690:	2302      	movs	r3, #2
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005696:	e0d4      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005698:	2304      	movs	r3, #4
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e0d0      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056a0:	2308      	movs	r3, #8
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e0cc      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ae:	e0c8      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5e      	ldr	r2, [pc, #376]	; (8005830 <UART_SetConfig+0x2d4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d125      	bne.n	8005706 <UART_SetConfig+0x1aa>
 80056ba:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <UART_SetConfig+0x2cc>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056c4:	2b30      	cmp	r3, #48	; 0x30
 80056c6:	d016      	beq.n	80056f6 <UART_SetConfig+0x19a>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d818      	bhi.n	80056fe <UART_SetConfig+0x1a2>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d00a      	beq.n	80056e6 <UART_SetConfig+0x18a>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d814      	bhi.n	80056fe <UART_SetConfig+0x1a2>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <UART_SetConfig+0x182>
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d008      	beq.n	80056ee <UART_SetConfig+0x192>
 80056dc:	e00f      	b.n	80056fe <UART_SetConfig+0x1a2>
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e4:	e0ad      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056e6:	2302      	movs	r3, #2
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ec:	e0a9      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056ee:	2304      	movs	r3, #4
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f4:	e0a5      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056f6:	2308      	movs	r3, #8
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fc:	e0a1      	b.n	8005842 <UART_SetConfig+0x2e6>
 80056fe:	2310      	movs	r3, #16
 8005700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005704:	e09d      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a4a      	ldr	r2, [pc, #296]	; (8005834 <UART_SetConfig+0x2d8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d125      	bne.n	800575c <UART_SetConfig+0x200>
 8005710:	4b45      	ldr	r3, [pc, #276]	; (8005828 <UART_SetConfig+0x2cc>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800571a:	2bc0      	cmp	r3, #192	; 0xc0
 800571c:	d016      	beq.n	800574c <UART_SetConfig+0x1f0>
 800571e:	2bc0      	cmp	r3, #192	; 0xc0
 8005720:	d818      	bhi.n	8005754 <UART_SetConfig+0x1f8>
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d00a      	beq.n	800573c <UART_SetConfig+0x1e0>
 8005726:	2b80      	cmp	r3, #128	; 0x80
 8005728:	d814      	bhi.n	8005754 <UART_SetConfig+0x1f8>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <UART_SetConfig+0x1d8>
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d008      	beq.n	8005744 <UART_SetConfig+0x1e8>
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x1f8>
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e082      	b.n	8005842 <UART_SetConfig+0x2e6>
 800573c:	2302      	movs	r3, #2
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e07e      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e07a      	b.n	8005842 <UART_SetConfig+0x2e6>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e076      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e072      	b.n	8005842 <UART_SetConfig+0x2e6>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a35      	ldr	r2, [pc, #212]	; (8005838 <UART_SetConfig+0x2dc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d12a      	bne.n	80057bc <UART_SetConfig+0x260>
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <UART_SetConfig+0x2cc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005774:	d01a      	beq.n	80057ac <UART_SetConfig+0x250>
 8005776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800577a:	d81b      	bhi.n	80057b4 <UART_SetConfig+0x258>
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d00c      	beq.n	800579c <UART_SetConfig+0x240>
 8005782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005786:	d815      	bhi.n	80057b4 <UART_SetConfig+0x258>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <UART_SetConfig+0x238>
 800578c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005790:	d008      	beq.n	80057a4 <UART_SetConfig+0x248>
 8005792:	e00f      	b.n	80057b4 <UART_SetConfig+0x258>
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e052      	b.n	8005842 <UART_SetConfig+0x2e6>
 800579c:	2302      	movs	r3, #2
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e04e      	b.n	8005842 <UART_SetConfig+0x2e6>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e04a      	b.n	8005842 <UART_SetConfig+0x2e6>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e046      	b.n	8005842 <UART_SetConfig+0x2e6>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ba:	e042      	b.n	8005842 <UART_SetConfig+0x2e6>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a17      	ldr	r2, [pc, #92]	; (8005820 <UART_SetConfig+0x2c4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d13a      	bne.n	800583c <UART_SetConfig+0x2e0>
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <UART_SetConfig+0x2cc>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057d4:	d01a      	beq.n	800580c <UART_SetConfig+0x2b0>
 80057d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057da:	d81b      	bhi.n	8005814 <UART_SetConfig+0x2b8>
 80057dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e0:	d00c      	beq.n	80057fc <UART_SetConfig+0x2a0>
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d815      	bhi.n	8005814 <UART_SetConfig+0x2b8>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <UART_SetConfig+0x298>
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f0:	d008      	beq.n	8005804 <UART_SetConfig+0x2a8>
 80057f2:	e00f      	b.n	8005814 <UART_SetConfig+0x2b8>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e022      	b.n	8005842 <UART_SetConfig+0x2e6>
 80057fc:	2302      	movs	r3, #2
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e01e      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580a:	e01a      	b.n	8005842 <UART_SetConfig+0x2e6>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005812:	e016      	b.n	8005842 <UART_SetConfig+0x2e6>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581a:	e012      	b.n	8005842 <UART_SetConfig+0x2e6>
 800581c:	efff69f3 	.word	0xefff69f3
 8005820:	40008000 	.word	0x40008000
 8005824:	40013800 	.word	0x40013800
 8005828:	40021000 	.word	0x40021000
 800582c:	40004400 	.word	0x40004400
 8005830:	40004800 	.word	0x40004800
 8005834:	40004c00 	.word	0x40004c00
 8005838:	40005000 	.word	0x40005000
 800583c:	2310      	movs	r3, #16
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a9f      	ldr	r2, [pc, #636]	; (8005ac4 <UART_SetConfig+0x568>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d17a      	bne.n	8005942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800584c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005850:	2b08      	cmp	r3, #8
 8005852:	d824      	bhi.n	800589e <UART_SetConfig+0x342>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x300>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005881 	.word	0x08005881
 8005860:	0800589f 	.word	0x0800589f
 8005864:	08005889 	.word	0x08005889
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800588f 	.word	0x0800588f
 8005870:	0800589f 	.word	0x0800589f
 8005874:	0800589f 	.word	0x0800589f
 8005878:	0800589f 	.word	0x0800589f
 800587c:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fc76 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005884:	61f8      	str	r0, [r7, #28]
        break;
 8005886:	e010      	b.n	80058aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005888:	4b8f      	ldr	r3, [pc, #572]	; (8005ac8 <UART_SetConfig+0x56c>)
 800588a:	61fb      	str	r3, [r7, #28]
        break;
 800588c:	e00d      	b.n	80058aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588e:	f7fe fbd7 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8005892:	61f8      	str	r0, [r7, #28]
        break;
 8005894:	e009      	b.n	80058aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	61fb      	str	r3, [r7, #28]
        break;
 800589c:	e005      	b.n	80058aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80fb 	beq.w	8005aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d305      	bcc.n	80058ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d903      	bls.n	80058d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058d4:	e0e8      	b.n	8005aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2200      	movs	r2, #0
 80058da:	461c      	mov	r4, r3
 80058dc:	4615      	mov	r5, r2
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	022b      	lsls	r3, r5, #8
 80058e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058ec:	0222      	lsls	r2, r4, #8
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	0849      	lsrs	r1, r1, #1
 80058f4:	2000      	movs	r0, #0
 80058f6:	4688      	mov	r8, r1
 80058f8:	4681      	mov	r9, r0
 80058fa:	eb12 0a08 	adds.w	sl, r2, r8
 80058fe:	eb43 0b09 	adc.w	fp, r3, r9
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005910:	4650      	mov	r0, sl
 8005912:	4659      	mov	r1, fp
 8005914:	f7fb f948 	bl	8000ba8 <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d308      	bcc.n	800593a <UART_SetConfig+0x3de>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d204      	bcs.n	800593a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e0b6      	b.n	8005aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005940:	e0b2      	b.n	8005aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d15e      	bne.n	8005a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800594c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005950:	2b08      	cmp	r3, #8
 8005952:	d828      	bhi.n	80059a6 <UART_SetConfig+0x44a>
 8005954:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x400>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	08005981 	.word	0x08005981
 8005960:	08005989 	.word	0x08005989
 8005964:	08005991 	.word	0x08005991
 8005968:	080059a7 	.word	0x080059a7
 800596c:	08005997 	.word	0x08005997
 8005970:	080059a7 	.word	0x080059a7
 8005974:	080059a7 	.word	0x080059a7
 8005978:	080059a7 	.word	0x080059a7
 800597c:	0800599f 	.word	0x0800599f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005980:	f7fe fbf6 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005984:	61f8      	str	r0, [r7, #28]
        break;
 8005986:	e014      	b.n	80059b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005988:	f7fe fc08 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 800598c:	61f8      	str	r0, [r7, #28]
        break;
 800598e:	e010      	b.n	80059b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005990:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <UART_SetConfig+0x56c>)
 8005992:	61fb      	str	r3, [r7, #28]
        break;
 8005994:	e00d      	b.n	80059b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005996:	f7fe fb53 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 800599a:	61f8      	str	r0, [r7, #28]
        break;
 800599c:	e009      	b.n	80059b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a2:	61fb      	str	r3, [r7, #28]
        break;
 80059a4:	e005      	b.n	80059b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d077      	beq.n	8005aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005a      	lsls	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b0f      	cmp	r3, #15
 80059d2:	d916      	bls.n	8005a02 <UART_SetConfig+0x4a6>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059da:	d212      	bcs.n	8005a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f023 030f 	bic.w	r3, r3, #15
 80059e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	8afb      	ldrh	r3, [r7, #22]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	8afa      	ldrh	r2, [r7, #22]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e052      	b.n	8005aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a08:	e04e      	b.n	8005aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d827      	bhi.n	8005a62 <UART_SetConfig+0x506>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x4bc>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe fb98 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e014      	b.n	8005a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fe fbaa 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e010      	b.n	8005a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	; (8005ac8 <UART_SetConfig+0x56c>)
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e00d      	b.n	8005a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fe faf5 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8005a56:	61f8      	str	r0, [r7, #28]
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	61fb      	str	r3, [r7, #28]
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d019      	beq.n	8005aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	085a      	lsrs	r2, r3, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	d909      	bls.n	8005aa2 <UART_SetConfig+0x546>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a94:	d205      	bcs.n	8005aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	e002      	b.n	8005aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	; 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40008000 	.word	0x40008000
 8005ac8:	00f42400 	.word	0x00f42400

08005acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bca:	d10a      	bne.n	8005be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c20:	f7fc fb76 	bl	8002310 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d10e      	bne.n	8005c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f82d 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e023      	b.n	8005c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d10e      	bne.n	8005c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f817 	bl	8005ca2 <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e00d      	b.n	8005c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b09c      	sub	sp, #112	; 0x70
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb2:	e0a5      	b.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cba:	f000 80a1 	beq.w	8005e00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbe:	f7fc fb27 	bl	8002310 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d302      	bcc.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d13e      	bne.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e6      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e067      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d04f      	beq.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6e:	d147      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e6      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dcc:	623a      	str	r2, [r7, #32]
 8005dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	69f9      	ldr	r1, [r7, #28]
 8005dd2:	6a3a      	ldr	r2, [r7, #32]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e010      	b.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	f43f af4a 	beq.w	8005cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3770      	adds	r7, #112	; 0x70
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b097      	sub	sp, #92	; 0x5c
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	d10e      	bne.n	8005e7e <UART_Start_Receive_IT+0x52>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <UART_Start_Receive_IT+0x48>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e72:	e02d      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	22ff      	movs	r2, #255	; 0xff
 8005e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e7c:	e028      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10d      	bne.n	8005ea2 <UART_Start_Receive_IT+0x76>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <UART_Start_Receive_IT+0x6c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e96:	e01b      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	227f      	movs	r2, #127	; 0x7f
 8005e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ea0:	e016      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eaa:	d10d      	bne.n	8005ec8 <UART_Start_Receive_IT+0x9c>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <UART_Start_Receive_IT+0x92>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	227f      	movs	r2, #127	; 0x7f
 8005eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ebc:	e008      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	223f      	movs	r2, #63	; 0x3f
 8005ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ec6:	e003      	b.n	8005ed0 <UART_Start_Receive_IT+0xa4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2222      	movs	r2, #34	; 0x22
 8005edc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005efe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e5      	bne.n	8005ede <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d107      	bne.n	8005f2c <UART_Start_Receive_IT+0x100>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <UART_Start_Receive_IT+0x18c>)
 8005f28:	665a      	str	r2, [r3, #100]	; 0x64
 8005f2a:	e002      	b.n	8005f32 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <UART_Start_Receive_IT+0x190>)
 8005f30:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d019      	beq.n	8005f76 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
 8005f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e6      	bne.n	8005f42 <UART_Start_Receive_IT+0x116>
 8005f74:	e018      	b.n	8005fa8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	613b      	str	r3, [r7, #16]
   return(result);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f043 0320 	orr.w	r3, r3, #32
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69f9      	ldr	r1, [r7, #28]
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	375c      	adds	r7, #92	; 0x5c
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	080063df 	.word	0x080063df
 8005fbc:	0800627f 	.word	0x0800627f

08005fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b095      	sub	sp, #84	; 0x54
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e6      	bne.n	8005fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	61fb      	str	r3, [r7, #28]
   return(result);
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800601a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	2b01      	cmp	r3, #1
 8006034:	d118      	bne.n	8006068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	60bb      	str	r3, [r7, #8]
   return(result);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	647b      	str	r3, [r7, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	613b      	str	r3, [r7, #16]
   return(result);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	665a      	str	r2, [r3, #100]	; 0x64
}
 800607a:	bf00      	nop
 800607c:	3754      	adds	r7, #84	; 0x54
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fa43 	bl	8005530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b08f      	sub	sp, #60	; 0x3c
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060be:	2b21      	cmp	r3, #33	; 0x21
 80060c0:	d14d      	bne.n	800615e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d132      	bne.n	8006134 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	61fb      	str	r3, [r7, #28]
   return(result);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	60bb      	str	r3, [r7, #8]
   return(result);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006114:	633b      	str	r3, [r7, #48]	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6979      	ldr	r1, [r7, #20]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	613b      	str	r3, [r7, #16]
   return(result);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e6      	bne.n	8006100 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006132:	e014      	b.n	800615e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	b292      	uxth	r2, r2
 8006140:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800615e:	bf00      	nop
 8006160:	373c      	adds	r7, #60	; 0x3c
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b091      	sub	sp, #68	; 0x44
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006176:	2b21      	cmp	r3, #33	; 0x21
 8006178:	d151      	bne.n	800621e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d132      	bne.n	80061ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	623b      	str	r3, [r7, #32]
   return(result);
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	633b      	str	r3, [r7, #48]	; 0x30
 80061a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e6      	bne.n	8006186 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	69b9      	ldr	r1, [r7, #24]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	617b      	str	r3, [r7, #20]
   return(result);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80061ea:	e018      	b.n	800621e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fe:	b292      	uxth	r2, r2
 8006200:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800621e:	bf00      	nop
 8006220:	3744      	adds	r7, #68	; 0x44
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b088      	sub	sp, #32
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6979      	ldr	r1, [r7, #20]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	613b      	str	r3, [r7, #16]
   return(result);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e6      	bne.n	8006232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb fca7 	bl	8001bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006276:	bf00      	nop
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b096      	sub	sp, #88	; 0x58
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800628c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006294:	2b22      	cmp	r3, #34	; 0x22
 8006296:	f040 8094 	bne.w	80063c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80062a8:	b2d9      	uxtb	r1, r3
 80062aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	400a      	ands	r2, r1
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d179      	bne.n	80063d6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f6:	653b      	str	r3, [r7, #80]	; 0x50
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
 8006302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e6      	bne.n	80062e2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	623b      	str	r3, [r7, #32]
   return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006334:	633a      	str	r2, [r7, #48]	; 0x30
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800633a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006358:	2b01      	cmp	r3, #1
 800635a:	d12e      	bne.n	80063ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0310 	bic.w	r3, r3, #16
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	617b      	str	r3, [r7, #20]
   return(result);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d103      	bne.n	80063aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2210      	movs	r2, #16
 80063a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff f8c6 	bl	8005544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063b8:	e00d      	b.n	80063d6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb fbd6 	bl	8001b6c <HAL_UART_RxCpltCallback>
}
 80063c0:	e009      	b.n	80063d6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	8b1b      	ldrh	r3, [r3, #24]
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	b292      	uxth	r2, r2
 80063d4:	831a      	strh	r2, [r3, #24]
}
 80063d6:	bf00      	nop
 80063d8:	3758      	adds	r7, #88	; 0x58
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b096      	sub	sp, #88	; 0x58
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f4:	2b22      	cmp	r3, #34	; 0x22
 80063f6:	f040 8094 	bne.w	8006522 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006400:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800640a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800640e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006412:	4013      	ands	r3, r2
 8006414:	b29a      	uxth	r2, r3
 8006416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006418:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d179      	bne.n	8006536 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006460:	643b      	str	r3, [r7, #64]	; 0x40
 8006462:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e6      	bne.n	8006442 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	61fb      	str	r3, [r7, #28]
   return(result);
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	64bb      	str	r3, [r7, #72]	; 0x48
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e5      	bne.n	8006474 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d12e      	bne.n	800651a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0310 	bic.w	r3, r3, #16
 80064d6:	647b      	str	r3, [r7, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	613b      	str	r3, [r7, #16]
   return(result);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e6      	bne.n	80064c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d103      	bne.n	800650a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff f816 	bl	8005544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006518:	e00d      	b.n	8006536 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb fb26 	bl	8001b6c <HAL_UART_RxCpltCallback>
}
 8006520:	e009      	b.n	8006536 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	8b1b      	ldrh	r3, [r3, #24]
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0208 	orr.w	r2, r2, #8
 8006532:	b292      	uxth	r2, r2
 8006534:	831a      	strh	r2, [r3, #24]
}
 8006536:	bf00      	nop
 8006538:	3758      	adds	r7, #88	; 0x58
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <__cvt>:
 8006552:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006556:	ec55 4b10 	vmov	r4, r5, d0
 800655a:	2d00      	cmp	r5, #0
 800655c:	460e      	mov	r6, r1
 800655e:	4619      	mov	r1, r3
 8006560:	462b      	mov	r3, r5
 8006562:	bfbb      	ittet	lt
 8006564:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006568:	461d      	movlt	r5, r3
 800656a:	2300      	movge	r3, #0
 800656c:	232d      	movlt	r3, #45	; 0x2d
 800656e:	700b      	strb	r3, [r1, #0]
 8006570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006572:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006576:	4691      	mov	r9, r2
 8006578:	f023 0820 	bic.w	r8, r3, #32
 800657c:	bfbc      	itt	lt
 800657e:	4622      	movlt	r2, r4
 8006580:	4614      	movlt	r4, r2
 8006582:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006586:	d005      	beq.n	8006594 <__cvt+0x42>
 8006588:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800658c:	d100      	bne.n	8006590 <__cvt+0x3e>
 800658e:	3601      	adds	r6, #1
 8006590:	2102      	movs	r1, #2
 8006592:	e000      	b.n	8006596 <__cvt+0x44>
 8006594:	2103      	movs	r1, #3
 8006596:	ab03      	add	r3, sp, #12
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	ab02      	add	r3, sp, #8
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	ec45 4b10 	vmov	d0, r4, r5
 80065a2:	4653      	mov	r3, sl
 80065a4:	4632      	mov	r2, r6
 80065a6:	f000 fe47 	bl	8007238 <_dtoa_r>
 80065aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065ae:	4607      	mov	r7, r0
 80065b0:	d102      	bne.n	80065b8 <__cvt+0x66>
 80065b2:	f019 0f01 	tst.w	r9, #1
 80065b6:	d022      	beq.n	80065fe <__cvt+0xac>
 80065b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065bc:	eb07 0906 	add.w	r9, r7, r6
 80065c0:	d110      	bne.n	80065e4 <__cvt+0x92>
 80065c2:	783b      	ldrb	r3, [r7, #0]
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d10a      	bne.n	80065de <__cvt+0x8c>
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7fa fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d4:	b918      	cbnz	r0, 80065de <__cvt+0x8c>
 80065d6:	f1c6 0601 	rsb	r6, r6, #1
 80065da:	f8ca 6000 	str.w	r6, [sl]
 80065de:	f8da 3000 	ldr.w	r3, [sl]
 80065e2:	4499      	add	r9, r3
 80065e4:	2200      	movs	r2, #0
 80065e6:	2300      	movs	r3, #0
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7fa fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80065f0:	b108      	cbz	r0, 80065f6 <__cvt+0xa4>
 80065f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80065f6:	2230      	movs	r2, #48	; 0x30
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	454b      	cmp	r3, r9
 80065fc:	d307      	bcc.n	800660e <__cvt+0xbc>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006602:	1bdb      	subs	r3, r3, r7
 8006604:	4638      	mov	r0, r7
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	b004      	add	sp, #16
 800660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e7f0      	b.n	80065f8 <__cvt+0xa6>

08006616 <__exponent>:
 8006616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006618:	4603      	mov	r3, r0
 800661a:	2900      	cmp	r1, #0
 800661c:	bfb8      	it	lt
 800661e:	4249      	neglt	r1, r1
 8006620:	f803 2b02 	strb.w	r2, [r3], #2
 8006624:	bfb4      	ite	lt
 8006626:	222d      	movlt	r2, #45	; 0x2d
 8006628:	222b      	movge	r2, #43	; 0x2b
 800662a:	2909      	cmp	r1, #9
 800662c:	7042      	strb	r2, [r0, #1]
 800662e:	dd2a      	ble.n	8006686 <__exponent+0x70>
 8006630:	f10d 0207 	add.w	r2, sp, #7
 8006634:	4617      	mov	r7, r2
 8006636:	260a      	movs	r6, #10
 8006638:	4694      	mov	ip, r2
 800663a:	fb91 f5f6 	sdiv	r5, r1, r6
 800663e:	fb06 1415 	mls	r4, r6, r5, r1
 8006642:	3430      	adds	r4, #48	; 0x30
 8006644:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006648:	460c      	mov	r4, r1
 800664a:	2c63      	cmp	r4, #99	; 0x63
 800664c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006650:	4629      	mov	r1, r5
 8006652:	dcf1      	bgt.n	8006638 <__exponent+0x22>
 8006654:	3130      	adds	r1, #48	; 0x30
 8006656:	f1ac 0402 	sub.w	r4, ip, #2
 800665a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800665e:	1c41      	adds	r1, r0, #1
 8006660:	4622      	mov	r2, r4
 8006662:	42ba      	cmp	r2, r7
 8006664:	d30a      	bcc.n	800667c <__exponent+0x66>
 8006666:	f10d 0209 	add.w	r2, sp, #9
 800666a:	eba2 020c 	sub.w	r2, r2, ip
 800666e:	42bc      	cmp	r4, r7
 8006670:	bf88      	it	hi
 8006672:	2200      	movhi	r2, #0
 8006674:	4413      	add	r3, r2
 8006676:	1a18      	subs	r0, r3, r0
 8006678:	b003      	add	sp, #12
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006680:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006684:	e7ed      	b.n	8006662 <__exponent+0x4c>
 8006686:	2330      	movs	r3, #48	; 0x30
 8006688:	3130      	adds	r1, #48	; 0x30
 800668a:	7083      	strb	r3, [r0, #2]
 800668c:	70c1      	strb	r1, [r0, #3]
 800668e:	1d03      	adds	r3, r0, #4
 8006690:	e7f1      	b.n	8006676 <__exponent+0x60>
	...

08006694 <_printf_float>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	ed2d 8b02 	vpush	{d8}
 800669c:	b08d      	sub	sp, #52	; 0x34
 800669e:	460c      	mov	r4, r1
 80066a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066a4:	4616      	mov	r6, r2
 80066a6:	461f      	mov	r7, r3
 80066a8:	4605      	mov	r5, r0
 80066aa:	f000 fcff 	bl	80070ac <_localeconv_r>
 80066ae:	f8d0 a000 	ldr.w	sl, [r0]
 80066b2:	4650      	mov	r0, sl
 80066b4:	f7f9 fddc 	bl	8000270 <strlen>
 80066b8:	2300      	movs	r3, #0
 80066ba:	930a      	str	r3, [sp, #40]	; 0x28
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	9305      	str	r3, [sp, #20]
 80066c0:	f8d8 3000 	ldr.w	r3, [r8]
 80066c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066c8:	3307      	adds	r3, #7
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	f103 0208 	add.w	r2, r3, #8
 80066d2:	f8c8 2000 	str.w	r2, [r8]
 80066d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066de:	9307      	str	r3, [sp, #28]
 80066e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80066e4:	ee08 0a10 	vmov	s16, r0
 80066e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80066ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f0:	4b9e      	ldr	r3, [pc, #632]	; (800696c <_printf_float+0x2d8>)
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066f6:	f7fa fa19 	bl	8000b2c <__aeabi_dcmpun>
 80066fa:	bb88      	cbnz	r0, 8006760 <_printf_float+0xcc>
 80066fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006700:	4b9a      	ldr	r3, [pc, #616]	; (800696c <_printf_float+0x2d8>)
 8006702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006706:	f7fa f9f3 	bl	8000af0 <__aeabi_dcmple>
 800670a:	bb48      	cbnz	r0, 8006760 <_printf_float+0xcc>
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7fa f9e2 	bl	8000adc <__aeabi_dcmplt>
 8006718:	b110      	cbz	r0, 8006720 <_printf_float+0x8c>
 800671a:	232d      	movs	r3, #45	; 0x2d
 800671c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006720:	4a93      	ldr	r2, [pc, #588]	; (8006970 <_printf_float+0x2dc>)
 8006722:	4b94      	ldr	r3, [pc, #592]	; (8006974 <_printf_float+0x2e0>)
 8006724:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006728:	bf94      	ite	ls
 800672a:	4690      	movls	r8, r2
 800672c:	4698      	movhi	r8, r3
 800672e:	2303      	movs	r3, #3
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	9b05      	ldr	r3, [sp, #20]
 8006734:	f023 0304 	bic.w	r3, r3, #4
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	9700      	str	r7, [sp, #0]
 8006740:	4633      	mov	r3, r6
 8006742:	aa0b      	add	r2, sp, #44	; 0x2c
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f9da 	bl	8006b00 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	f040 8090 	bne.w	8006872 <_printf_float+0x1de>
 8006752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006756:	b00d      	add	sp, #52	; 0x34
 8006758:	ecbd 8b02 	vpop	{d8}
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	f7fa f9e0 	bl	8000b2c <__aeabi_dcmpun>
 800676c:	b140      	cbz	r0, 8006780 <_printf_float+0xec>
 800676e:	464b      	mov	r3, r9
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbc      	itt	lt
 8006774:	232d      	movlt	r3, #45	; 0x2d
 8006776:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800677a:	4a7f      	ldr	r2, [pc, #508]	; (8006978 <_printf_float+0x2e4>)
 800677c:	4b7f      	ldr	r3, [pc, #508]	; (800697c <_printf_float+0x2e8>)
 800677e:	e7d1      	b.n	8006724 <_printf_float+0x90>
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006786:	9206      	str	r2, [sp, #24]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	d13f      	bne.n	800680c <_printf_float+0x178>
 800678c:	2306      	movs	r3, #6
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	9b05      	ldr	r3, [sp, #20]
 8006792:	6861      	ldr	r1, [r4, #4]
 8006794:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006798:	2300      	movs	r3, #0
 800679a:	9303      	str	r3, [sp, #12]
 800679c:	ab0a      	add	r3, sp, #40	; 0x28
 800679e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067a2:	ab09      	add	r3, sp, #36	; 0x24
 80067a4:	ec49 8b10 	vmov	d0, r8, r9
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7ff fece 	bl	8006552 <__cvt>
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ba:	2b47      	cmp	r3, #71	; 0x47
 80067bc:	4680      	mov	r8, r0
 80067be:	d108      	bne.n	80067d2 <_printf_float+0x13e>
 80067c0:	1cc8      	adds	r0, r1, #3
 80067c2:	db02      	blt.n	80067ca <_printf_float+0x136>
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	4299      	cmp	r1, r3
 80067c8:	dd41      	ble.n	800684e <_printf_float+0x1ba>
 80067ca:	f1ab 0302 	sub.w	r3, fp, #2
 80067ce:	fa5f fb83 	uxtb.w	fp, r3
 80067d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067d6:	d820      	bhi.n	800681a <_printf_float+0x186>
 80067d8:	3901      	subs	r1, #1
 80067da:	465a      	mov	r2, fp
 80067dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067e0:	9109      	str	r1, [sp, #36]	; 0x24
 80067e2:	f7ff ff18 	bl	8006616 <__exponent>
 80067e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067e8:	1813      	adds	r3, r2, r0
 80067ea:	2a01      	cmp	r2, #1
 80067ec:	4681      	mov	r9, r0
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	dc02      	bgt.n	80067f8 <_printf_float+0x164>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	07d2      	lsls	r2, r2, #31
 80067f6:	d501      	bpl.n	80067fc <_printf_float+0x168>
 80067f8:	3301      	adds	r3, #1
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006800:	2b00      	cmp	r3, #0
 8006802:	d09c      	beq.n	800673e <_printf_float+0xaa>
 8006804:	232d      	movs	r3, #45	; 0x2d
 8006806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680a:	e798      	b.n	800673e <_printf_float+0xaa>
 800680c:	9a06      	ldr	r2, [sp, #24]
 800680e:	2a47      	cmp	r2, #71	; 0x47
 8006810:	d1be      	bne.n	8006790 <_printf_float+0xfc>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1bc      	bne.n	8006790 <_printf_float+0xfc>
 8006816:	2301      	movs	r3, #1
 8006818:	e7b9      	b.n	800678e <_printf_float+0xfa>
 800681a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800681e:	d118      	bne.n	8006852 <_printf_float+0x1be>
 8006820:	2900      	cmp	r1, #0
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	dd0b      	ble.n	800683e <_printf_float+0x1aa>
 8006826:	6121      	str	r1, [r4, #16]
 8006828:	b913      	cbnz	r3, 8006830 <_printf_float+0x19c>
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	07d0      	lsls	r0, r2, #31
 800682e:	d502      	bpl.n	8006836 <_printf_float+0x1a2>
 8006830:	3301      	adds	r3, #1
 8006832:	440b      	add	r3, r1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	65a1      	str	r1, [r4, #88]	; 0x58
 8006838:	f04f 0900 	mov.w	r9, #0
 800683c:	e7de      	b.n	80067fc <_printf_float+0x168>
 800683e:	b913      	cbnz	r3, 8006846 <_printf_float+0x1b2>
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	07d2      	lsls	r2, r2, #31
 8006844:	d501      	bpl.n	800684a <_printf_float+0x1b6>
 8006846:	3302      	adds	r3, #2
 8006848:	e7f4      	b.n	8006834 <_printf_float+0x1a0>
 800684a:	2301      	movs	r3, #1
 800684c:	e7f2      	b.n	8006834 <_printf_float+0x1a0>
 800684e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006854:	4299      	cmp	r1, r3
 8006856:	db05      	blt.n	8006864 <_printf_float+0x1d0>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	6121      	str	r1, [r4, #16]
 800685c:	07d8      	lsls	r0, r3, #31
 800685e:	d5ea      	bpl.n	8006836 <_printf_float+0x1a2>
 8006860:	1c4b      	adds	r3, r1, #1
 8006862:	e7e7      	b.n	8006834 <_printf_float+0x1a0>
 8006864:	2900      	cmp	r1, #0
 8006866:	bfd4      	ite	le
 8006868:	f1c1 0202 	rsble	r2, r1, #2
 800686c:	2201      	movgt	r2, #1
 800686e:	4413      	add	r3, r2
 8006870:	e7e0      	b.n	8006834 <_printf_float+0x1a0>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	055a      	lsls	r2, r3, #21
 8006876:	d407      	bmi.n	8006888 <_printf_float+0x1f4>
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	4642      	mov	r2, r8
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	d12c      	bne.n	80068e0 <_printf_float+0x24c>
 8006886:	e764      	b.n	8006752 <_printf_float+0xbe>
 8006888:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800688c:	f240 80e0 	bls.w	8006a50 <_printf_float+0x3bc>
 8006890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	f7fa f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800689c:	2800      	cmp	r0, #0
 800689e:	d034      	beq.n	800690a <_printf_float+0x276>
 80068a0:	4a37      	ldr	r2, [pc, #220]	; (8006980 <_printf_float+0x2ec>)
 80068a2:	2301      	movs	r3, #1
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f af51 	beq.w	8006752 <_printf_float+0xbe>
 80068b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b4:	429a      	cmp	r2, r3
 80068b6:	db02      	blt.n	80068be <_printf_float+0x22a>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07d8      	lsls	r0, r3, #31
 80068bc:	d510      	bpl.n	80068e0 <_printf_float+0x24c>
 80068be:	ee18 3a10 	vmov	r3, s16
 80068c2:	4652      	mov	r2, sl
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af41 	beq.w	8006752 <_printf_float+0xbe>
 80068d0:	f04f 0800 	mov.w	r8, #0
 80068d4:	f104 091a 	add.w	r9, r4, #26
 80068d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068da:	3b01      	subs	r3, #1
 80068dc:	4543      	cmp	r3, r8
 80068de:	dc09      	bgt.n	80068f4 <_printf_float+0x260>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	079b      	lsls	r3, r3, #30
 80068e4:	f100 8107 	bmi.w	8006af6 <_printf_float+0x462>
 80068e8:	68e0      	ldr	r0, [r4, #12]
 80068ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ec:	4298      	cmp	r0, r3
 80068ee:	bfb8      	it	lt
 80068f0:	4618      	movlt	r0, r3
 80068f2:	e730      	b.n	8006756 <_printf_float+0xc2>
 80068f4:	2301      	movs	r3, #1
 80068f6:	464a      	mov	r2, r9
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f af27 	beq.w	8006752 <_printf_float+0xbe>
 8006904:	f108 0801 	add.w	r8, r8, #1
 8006908:	e7e6      	b.n	80068d8 <_printf_float+0x244>
 800690a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	dc39      	bgt.n	8006984 <_printf_float+0x2f0>
 8006910:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <_printf_float+0x2ec>)
 8006912:	2301      	movs	r3, #1
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af19 	beq.w	8006752 <_printf_float+0xbe>
 8006920:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006924:	4313      	orrs	r3, r2
 8006926:	d102      	bne.n	800692e <_printf_float+0x29a>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07d9      	lsls	r1, r3, #31
 800692c:	d5d8      	bpl.n	80068e0 <_printf_float+0x24c>
 800692e:	ee18 3a10 	vmov	r3, s16
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af09 	beq.w	8006752 <_printf_float+0xbe>
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	f104 0a1a 	add.w	sl, r4, #26
 8006948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694a:	425b      	negs	r3, r3
 800694c:	454b      	cmp	r3, r9
 800694e:	dc01      	bgt.n	8006954 <_printf_float+0x2c0>
 8006950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006952:	e792      	b.n	800687a <_printf_float+0x1e6>
 8006954:	2301      	movs	r3, #1
 8006956:	4652      	mov	r2, sl
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f aef7 	beq.w	8006752 <_printf_float+0xbe>
 8006964:	f109 0901 	add.w	r9, r9, #1
 8006968:	e7ee      	b.n	8006948 <_printf_float+0x2b4>
 800696a:	bf00      	nop
 800696c:	7fefffff 	.word	0x7fefffff
 8006970:	080095bc 	.word	0x080095bc
 8006974:	080095c0 	.word	0x080095c0
 8006978:	080095c4 	.word	0x080095c4
 800697c:	080095c8 	.word	0x080095c8
 8006980:	080095cc 	.word	0x080095cc
 8006984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006986:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006988:	429a      	cmp	r2, r3
 800698a:	bfa8      	it	ge
 800698c:	461a      	movge	r2, r3
 800698e:	2a00      	cmp	r2, #0
 8006990:	4691      	mov	r9, r2
 8006992:	dc37      	bgt.n	8006a04 <_printf_float+0x370>
 8006994:	f04f 0b00 	mov.w	fp, #0
 8006998:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800699c:	f104 021a 	add.w	r2, r4, #26
 80069a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	eba3 0309 	sub.w	r3, r3, r9
 80069a8:	455b      	cmp	r3, fp
 80069aa:	dc33      	bgt.n	8006a14 <_printf_float+0x380>
 80069ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b0:	429a      	cmp	r2, r3
 80069b2:	db3b      	blt.n	8006a2c <_printf_float+0x398>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	07da      	lsls	r2, r3, #31
 80069b8:	d438      	bmi.n	8006a2c <_printf_float+0x398>
 80069ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80069be:	eba2 0903 	sub.w	r9, r2, r3
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	1ad2      	subs	r2, r2, r3
 80069c6:	4591      	cmp	r9, r2
 80069c8:	bfa8      	it	ge
 80069ca:	4691      	movge	r9, r2
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	dc35      	bgt.n	8006a3e <_printf_float+0x3aa>
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069da:	f104 0a1a 	add.w	sl, r4, #26
 80069de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	eba3 0309 	sub.w	r3, r3, r9
 80069e8:	4543      	cmp	r3, r8
 80069ea:	f77f af79 	ble.w	80068e0 <_printf_float+0x24c>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4652      	mov	r2, sl
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f aeaa 	beq.w	8006752 <_printf_float+0xbe>
 80069fe:	f108 0801 	add.w	r8, r8, #1
 8006a02:	e7ec      	b.n	80069de <_printf_float+0x34a>
 8006a04:	4613      	mov	r3, r2
 8006a06:	4631      	mov	r1, r6
 8006a08:	4642      	mov	r2, r8
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d1c0      	bne.n	8006994 <_printf_float+0x300>
 8006a12:	e69e      	b.n	8006752 <_printf_float+0xbe>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	9205      	str	r2, [sp, #20]
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f ae97 	beq.w	8006752 <_printf_float+0xbe>
 8006a24:	9a05      	ldr	r2, [sp, #20]
 8006a26:	f10b 0b01 	add.w	fp, fp, #1
 8006a2a:	e7b9      	b.n	80069a0 <_printf_float+0x30c>
 8006a2c:	ee18 3a10 	vmov	r3, s16
 8006a30:	4652      	mov	r2, sl
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d1be      	bne.n	80069ba <_printf_float+0x326>
 8006a3c:	e689      	b.n	8006752 <_printf_float+0xbe>
 8006a3e:	9a05      	ldr	r2, [sp, #20]
 8006a40:	464b      	mov	r3, r9
 8006a42:	4442      	add	r2, r8
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d1c1      	bne.n	80069d2 <_printf_float+0x33e>
 8006a4e:	e680      	b.n	8006752 <_printf_float+0xbe>
 8006a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a52:	2a01      	cmp	r2, #1
 8006a54:	dc01      	bgt.n	8006a5a <_printf_float+0x3c6>
 8006a56:	07db      	lsls	r3, r3, #31
 8006a58:	d53a      	bpl.n	8006ad0 <_printf_float+0x43c>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae74 	beq.w	8006752 <_printf_float+0xbe>
 8006a6a:	ee18 3a10 	vmov	r3, s16
 8006a6e:	4652      	mov	r2, sl
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f ae6b 	beq.w	8006752 <_printf_float+0xbe>
 8006a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a80:	2200      	movs	r2, #0
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a88:	f7fa f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a8c:	b9d8      	cbnz	r0, 8006ac6 <_printf_float+0x432>
 8006a8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006a92:	f108 0201 	add.w	r2, r8, #1
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d10e      	bne.n	8006abe <_printf_float+0x42a>
 8006aa0:	e657      	b.n	8006752 <_printf_float+0xbe>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae50 	beq.w	8006752 <_printf_float+0xbe>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	4543      	cmp	r3, r8
 8006abc:	dcf1      	bgt.n	8006aa2 <_printf_float+0x40e>
 8006abe:	464b      	mov	r3, r9
 8006ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ac4:	e6da      	b.n	800687c <_printf_float+0x1e8>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	f104 0a1a 	add.w	sl, r4, #26
 8006ace:	e7f2      	b.n	8006ab6 <_printf_float+0x422>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	e7df      	b.n	8006a96 <_printf_float+0x402>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	464a      	mov	r2, r9
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f ae36 	beq.w	8006752 <_printf_float+0xbe>
 8006ae6:	f108 0801 	add.w	r8, r8, #1
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aee:	1a5b      	subs	r3, r3, r1
 8006af0:	4543      	cmp	r3, r8
 8006af2:	dcf0      	bgt.n	8006ad6 <_printf_float+0x442>
 8006af4:	e6f8      	b.n	80068e8 <_printf_float+0x254>
 8006af6:	f04f 0800 	mov.w	r8, #0
 8006afa:	f104 0919 	add.w	r9, r4, #25
 8006afe:	e7f4      	b.n	8006aea <_printf_float+0x456>

08006b00 <_printf_common>:
 8006b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	4616      	mov	r6, r2
 8006b06:	4699      	mov	r9, r3
 8006b08:	688a      	ldr	r2, [r1, #8]
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	bfb8      	it	lt
 8006b14:	4613      	movlt	r3, r2
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	b10a      	cbz	r2, 8006b26 <_printf_common+0x26>
 8006b22:	3301      	adds	r3, #1
 8006b24:	6033      	str	r3, [r6, #0]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	0699      	lsls	r1, r3, #26
 8006b2a:	bf42      	ittt	mi
 8006b2c:	6833      	ldrmi	r3, [r6, #0]
 8006b2e:	3302      	addmi	r3, #2
 8006b30:	6033      	strmi	r3, [r6, #0]
 8006b32:	6825      	ldr	r5, [r4, #0]
 8006b34:	f015 0506 	ands.w	r5, r5, #6
 8006b38:	d106      	bne.n	8006b48 <_printf_common+0x48>
 8006b3a:	f104 0a19 	add.w	sl, r4, #25
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	6832      	ldr	r2, [r6, #0]
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	42ab      	cmp	r3, r5
 8006b46:	dc26      	bgt.n	8006b96 <_printf_common+0x96>
 8006b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b4c:	1e13      	subs	r3, r2, #0
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	bf18      	it	ne
 8006b52:	2301      	movne	r3, #1
 8006b54:	0692      	lsls	r2, r2, #26
 8006b56:	d42b      	bmi.n	8006bb0 <_printf_common+0xb0>
 8006b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4638      	mov	r0, r7
 8006b60:	47c0      	blx	r8
 8006b62:	3001      	adds	r0, #1
 8006b64:	d01e      	beq.n	8006ba4 <_printf_common+0xa4>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	f003 0306 	and.w	r3, r3, #6
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	bf02      	ittt	eq
 8006b72:	68e5      	ldreq	r5, [r4, #12]
 8006b74:	6833      	ldreq	r3, [r6, #0]
 8006b76:	1aed      	subeq	r5, r5, r3
 8006b78:	68a3      	ldr	r3, [r4, #8]
 8006b7a:	bf0c      	ite	eq
 8006b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b80:	2500      	movne	r5, #0
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bfc4      	itt	gt
 8006b86:	1a9b      	subgt	r3, r3, r2
 8006b88:	18ed      	addgt	r5, r5, r3
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	341a      	adds	r4, #26
 8006b8e:	42b5      	cmp	r5, r6
 8006b90:	d11a      	bne.n	8006bc8 <_printf_common+0xc8>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e008      	b.n	8006ba8 <_printf_common+0xa8>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	47c0      	blx	r8
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d103      	bne.n	8006bac <_printf_common+0xac>
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7c6      	b.n	8006b3e <_printf_common+0x3e>
 8006bb0:	18e1      	adds	r1, r4, r3
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	2030      	movs	r0, #48	; 0x30
 8006bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bba:	4422      	add	r2, r4
 8006bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	e7c7      	b.n	8006b58 <_printf_common+0x58>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c0      	blx	r8
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d0e6      	beq.n	8006ba4 <_printf_common+0xa4>
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7d9      	b.n	8006b8e <_printf_common+0x8e>
	...

08006bdc <_printf_i>:
 8006bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	7e0f      	ldrb	r7, [r1, #24]
 8006be2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006be4:	2f78      	cmp	r7, #120	; 0x78
 8006be6:	4691      	mov	r9, r2
 8006be8:	4680      	mov	r8, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	469a      	mov	sl, r3
 8006bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bf2:	d807      	bhi.n	8006c04 <_printf_i+0x28>
 8006bf4:	2f62      	cmp	r7, #98	; 0x62
 8006bf6:	d80a      	bhi.n	8006c0e <_printf_i+0x32>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	f000 80d4 	beq.w	8006da6 <_printf_i+0x1ca>
 8006bfe:	2f58      	cmp	r7, #88	; 0x58
 8006c00:	f000 80c0 	beq.w	8006d84 <_printf_i+0x1a8>
 8006c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c0c:	e03a      	b.n	8006c84 <_printf_i+0xa8>
 8006c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c12:	2b15      	cmp	r3, #21
 8006c14:	d8f6      	bhi.n	8006c04 <_printf_i+0x28>
 8006c16:	a101      	add	r1, pc, #4	; (adr r1, 8006c1c <_printf_i+0x40>)
 8006c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c05 	.word	0x08006c05
 8006c28:	08006c05 	.word	0x08006c05
 8006c2c:	08006c05 	.word	0x08006c05
 8006c30:	08006c05 	.word	0x08006c05
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c05 	.word	0x08006c05
 8006c3c:	08006c05 	.word	0x08006c05
 8006c40:	08006c05 	.word	0x08006c05
 8006c44:	08006c05 	.word	0x08006c05
 8006c48:	08006d8d 	.word	0x08006d8d
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006d47 	.word	0x08006d47
 8006c54:	08006c05 	.word	0x08006c05
 8006c58:	08006c05 	.word	0x08006c05
 8006c5c:	08006daf 	.word	0x08006daf
 8006c60:	08006c05 	.word	0x08006c05
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	08006c05 	.word	0x08006c05
 8006c6c:	08006c05 	.word	0x08006c05
 8006c70:	08006d4f 	.word	0x08006d4f
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	602a      	str	r2, [r5, #0]
 8006c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c84:	2301      	movs	r3, #1
 8006c86:	e09f      	b.n	8006dc8 <_printf_i+0x1ec>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	0607      	lsls	r7, r0, #24
 8006c8e:	f103 0104 	add.w	r1, r3, #4
 8006c92:	6029      	str	r1, [r5, #0]
 8006c94:	d501      	bpl.n	8006c9a <_printf_i+0xbe>
 8006c96:	681e      	ldr	r6, [r3, #0]
 8006c98:	e003      	b.n	8006ca2 <_printf_i+0xc6>
 8006c9a:	0646      	lsls	r6, r0, #25
 8006c9c:	d5fb      	bpl.n	8006c96 <_printf_i+0xba>
 8006c9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	da03      	bge.n	8006cae <_printf_i+0xd2>
 8006ca6:	232d      	movs	r3, #45	; 0x2d
 8006ca8:	4276      	negs	r6, r6
 8006caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cae:	485a      	ldr	r0, [pc, #360]	; (8006e18 <_printf_i+0x23c>)
 8006cb0:	230a      	movs	r3, #10
 8006cb2:	e012      	b.n	8006cda <_printf_i+0xfe>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	6820      	ldr	r0, [r4, #0]
 8006cb8:	1d19      	adds	r1, r3, #4
 8006cba:	6029      	str	r1, [r5, #0]
 8006cbc:	0605      	lsls	r5, r0, #24
 8006cbe:	d501      	bpl.n	8006cc4 <_printf_i+0xe8>
 8006cc0:	681e      	ldr	r6, [r3, #0]
 8006cc2:	e002      	b.n	8006cca <_printf_i+0xee>
 8006cc4:	0641      	lsls	r1, r0, #25
 8006cc6:	d5fb      	bpl.n	8006cc0 <_printf_i+0xe4>
 8006cc8:	881e      	ldrh	r6, [r3, #0]
 8006cca:	4853      	ldr	r0, [pc, #332]	; (8006e18 <_printf_i+0x23c>)
 8006ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cce:	bf0c      	ite	eq
 8006cd0:	2308      	moveq	r3, #8
 8006cd2:	230a      	movne	r3, #10
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cda:	6865      	ldr	r5, [r4, #4]
 8006cdc:	60a5      	str	r5, [r4, #8]
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	bfa2      	ittt	ge
 8006ce2:	6821      	ldrge	r1, [r4, #0]
 8006ce4:	f021 0104 	bicge.w	r1, r1, #4
 8006ce8:	6021      	strge	r1, [r4, #0]
 8006cea:	b90e      	cbnz	r6, 8006cf0 <_printf_i+0x114>
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	d04b      	beq.n	8006d88 <_printf_i+0x1ac>
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cfa:	5dc7      	ldrb	r7, [r0, r7]
 8006cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d00:	4637      	mov	r7, r6
 8006d02:	42bb      	cmp	r3, r7
 8006d04:	460e      	mov	r6, r1
 8006d06:	d9f4      	bls.n	8006cf2 <_printf_i+0x116>
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d10b      	bne.n	8006d24 <_printf_i+0x148>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	07de      	lsls	r6, r3, #31
 8006d10:	d508      	bpl.n	8006d24 <_printf_i+0x148>
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	4299      	cmp	r1, r3
 8006d18:	bfde      	ittt	le
 8006d1a:	2330      	movle	r3, #48	; 0x30
 8006d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d24:	1b52      	subs	r2, r2, r5
 8006d26:	6122      	str	r2, [r4, #16]
 8006d28:	f8cd a000 	str.w	sl, [sp]
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	aa03      	add	r2, sp, #12
 8006d30:	4621      	mov	r1, r4
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff fee4 	bl	8006b00 <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d14a      	bne.n	8006dd2 <_printf_i+0x1f6>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d40:	b004      	add	sp, #16
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f043 0320 	orr.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	4833      	ldr	r0, [pc, #204]	; (8006e1c <_printf_i+0x240>)
 8006d50:	2778      	movs	r7, #120	; 0x78
 8006d52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	6829      	ldr	r1, [r5, #0]
 8006d5a:	061f      	lsls	r7, r3, #24
 8006d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d60:	d402      	bmi.n	8006d68 <_printf_i+0x18c>
 8006d62:	065f      	lsls	r7, r3, #25
 8006d64:	bf48      	it	mi
 8006d66:	b2b6      	uxthmi	r6, r6
 8006d68:	07df      	lsls	r7, r3, #31
 8006d6a:	bf48      	it	mi
 8006d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d70:	6029      	str	r1, [r5, #0]
 8006d72:	bf48      	it	mi
 8006d74:	6023      	strmi	r3, [r4, #0]
 8006d76:	b91e      	cbnz	r6, 8006d80 <_printf_i+0x1a4>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	f023 0320 	bic.w	r3, r3, #32
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	2310      	movs	r3, #16
 8006d82:	e7a7      	b.n	8006cd4 <_printf_i+0xf8>
 8006d84:	4824      	ldr	r0, [pc, #144]	; (8006e18 <_printf_i+0x23c>)
 8006d86:	e7e4      	b.n	8006d52 <_printf_i+0x176>
 8006d88:	4615      	mov	r5, r2
 8006d8a:	e7bd      	b.n	8006d08 <_printf_i+0x12c>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	6826      	ldr	r6, [r4, #0]
 8006d90:	6961      	ldr	r1, [r4, #20]
 8006d92:	1d18      	adds	r0, r3, #4
 8006d94:	6028      	str	r0, [r5, #0]
 8006d96:	0635      	lsls	r5, r6, #24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	d501      	bpl.n	8006da0 <_printf_i+0x1c4>
 8006d9c:	6019      	str	r1, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <_printf_i+0x1ca>
 8006da0:	0670      	lsls	r0, r6, #25
 8006da2:	d5fb      	bpl.n	8006d9c <_printf_i+0x1c0>
 8006da4:	8019      	strh	r1, [r3, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	4615      	mov	r5, r2
 8006dac:	e7bc      	b.n	8006d28 <_printf_i+0x14c>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	602a      	str	r2, [r5, #0]
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	2100      	movs	r1, #0
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7f9 fa08 	bl	80001d0 <memchr>
 8006dc0:	b108      	cbz	r0, 8006dc6 <_printf_i+0x1ea>
 8006dc2:	1b40      	subs	r0, r0, r5
 8006dc4:	6060      	str	r0, [r4, #4]
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd0:	e7aa      	b.n	8006d28 <_printf_i+0x14c>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	47d0      	blx	sl
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d0ad      	beq.n	8006d3c <_printf_i+0x160>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	079b      	lsls	r3, r3, #30
 8006de4:	d413      	bmi.n	8006e0e <_printf_i+0x232>
 8006de6:	68e0      	ldr	r0, [r4, #12]
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	4298      	cmp	r0, r3
 8006dec:	bfb8      	it	lt
 8006dee:	4618      	movlt	r0, r3
 8006df0:	e7a6      	b.n	8006d40 <_printf_i+0x164>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4632      	mov	r2, r6
 8006df6:	4649      	mov	r1, r9
 8006df8:	4640      	mov	r0, r8
 8006dfa:	47d0      	blx	sl
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d09d      	beq.n	8006d3c <_printf_i+0x160>
 8006e00:	3501      	adds	r5, #1
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	9903      	ldr	r1, [sp, #12]
 8006e06:	1a5b      	subs	r3, r3, r1
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dcf2      	bgt.n	8006df2 <_printf_i+0x216>
 8006e0c:	e7eb      	b.n	8006de6 <_printf_i+0x20a>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	f104 0619 	add.w	r6, r4, #25
 8006e14:	e7f5      	b.n	8006e02 <_printf_i+0x226>
 8006e16:	bf00      	nop
 8006e18:	080095ce 	.word	0x080095ce
 8006e1c:	080095df 	.word	0x080095df

08006e20 <siprintf>:
 8006e20:	b40e      	push	{r1, r2, r3}
 8006e22:	b500      	push	{lr}
 8006e24:	b09c      	sub	sp, #112	; 0x70
 8006e26:	ab1d      	add	r3, sp, #116	; 0x74
 8006e28:	9002      	str	r0, [sp, #8]
 8006e2a:	9006      	str	r0, [sp, #24]
 8006e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e30:	4809      	ldr	r0, [pc, #36]	; (8006e58 <siprintf+0x38>)
 8006e32:	9107      	str	r1, [sp, #28]
 8006e34:	9104      	str	r1, [sp, #16]
 8006e36:	4909      	ldr	r1, [pc, #36]	; (8006e5c <siprintf+0x3c>)
 8006e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3c:	9105      	str	r1, [sp, #20]
 8006e3e:	6800      	ldr	r0, [r0, #0]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	a902      	add	r1, sp, #8
 8006e44:	f001 f844 	bl	8007ed0 <_svfiprintf_r>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	b01c      	add	sp, #112	; 0x70
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	20000098 	.word	0x20000098
 8006e5c:	ffff0208 	.word	0xffff0208

08006e60 <std>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
 8006e66:	e9c0 3300 	strd	r3, r3, [r0]
 8006e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e6e:	6083      	str	r3, [r0, #8]
 8006e70:	8181      	strh	r1, [r0, #12]
 8006e72:	6643      	str	r3, [r0, #100]	; 0x64
 8006e74:	81c2      	strh	r2, [r0, #14]
 8006e76:	6183      	str	r3, [r0, #24]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	305c      	adds	r0, #92	; 0x5c
 8006e7e:	f000 f90d 	bl	800709c <memset>
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <std+0x38>)
 8006e84:	6263      	str	r3, [r4, #36]	; 0x24
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <std+0x3c>)
 8006e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <std+0x40>)
 8006e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <std+0x44>)
 8006e90:	6224      	str	r4, [r4, #32]
 8006e92:	6323      	str	r3, [r4, #48]	; 0x30
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	08008d11 	.word	0x08008d11
 8006e9c:	08008d33 	.word	0x08008d33
 8006ea0:	08008d6b 	.word	0x08008d6b
 8006ea4:	08008d8f 	.word	0x08008d8f

08006ea8 <stdio_exit_handler>:
 8006ea8:	4a02      	ldr	r2, [pc, #8]	; (8006eb4 <stdio_exit_handler+0xc>)
 8006eaa:	4903      	ldr	r1, [pc, #12]	; (8006eb8 <stdio_exit_handler+0x10>)
 8006eac:	4803      	ldr	r0, [pc, #12]	; (8006ebc <stdio_exit_handler+0x14>)
 8006eae:	f000 b869 	b.w	8006f84 <_fwalk_sglue>
 8006eb2:	bf00      	nop
 8006eb4:	20000040 	.word	0x20000040
 8006eb8:	080085b1 	.word	0x080085b1
 8006ebc:	2000004c 	.word	0x2000004c

08006ec0 <cleanup_stdio>:
 8006ec0:	6841      	ldr	r1, [r0, #4]
 8006ec2:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <cleanup_stdio+0x34>)
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	4604      	mov	r4, r0
 8006eca:	d001      	beq.n	8006ed0 <cleanup_stdio+0x10>
 8006ecc:	f001 fb70 	bl	80085b0 <_fflush_r>
 8006ed0:	68a1      	ldr	r1, [r4, #8]
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <cleanup_stdio+0x38>)
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d002      	beq.n	8006ede <cleanup_stdio+0x1e>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f001 fb69 	bl	80085b0 <_fflush_r>
 8006ede:	68e1      	ldr	r1, [r4, #12]
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <cleanup_stdio+0x3c>)
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	d004      	beq.n	8006ef0 <cleanup_stdio+0x30>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eec:	f001 bb60 	b.w	80085b0 <_fflush_r>
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000510 	.word	0x20000510
 8006ef8:	20000578 	.word	0x20000578
 8006efc:	200005e0 	.word	0x200005e0

08006f00 <global_stdio_init.part.0>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <global_stdio_init.part.0+0x30>)
 8006f04:	4c0b      	ldr	r4, [pc, #44]	; (8006f34 <global_stdio_init.part.0+0x34>)
 8006f06:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <global_stdio_init.part.0+0x38>)
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2104      	movs	r1, #4
 8006f10:	f7ff ffa6 	bl	8006e60 <std>
 8006f14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f18:	2201      	movs	r2, #1
 8006f1a:	2109      	movs	r1, #9
 8006f1c:	f7ff ffa0 	bl	8006e60 <std>
 8006f20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f24:	2202      	movs	r2, #2
 8006f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2a:	2112      	movs	r1, #18
 8006f2c:	f7ff bf98 	b.w	8006e60 <std>
 8006f30:	20000648 	.word	0x20000648
 8006f34:	20000510 	.word	0x20000510
 8006f38:	08006ea9 	.word	0x08006ea9

08006f3c <__sfp_lock_acquire>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sfp_lock_acquire+0x8>)
 8006f3e:	f000 b8e3 	b.w	8007108 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	2000064d 	.word	0x2000064d

08006f48 <__sfp_lock_release>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__sfp_lock_release+0x8>)
 8006f4a:	f000 b8de 	b.w	800710a <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	2000064d 	.word	0x2000064d

08006f54 <__sinit>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4604      	mov	r4, r0
 8006f58:	f7ff fff0 	bl	8006f3c <__sfp_lock_acquire>
 8006f5c:	6a23      	ldr	r3, [r4, #32]
 8006f5e:	b11b      	cbz	r3, 8006f68 <__sinit+0x14>
 8006f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f64:	f7ff bff0 	b.w	8006f48 <__sfp_lock_release>
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <__sinit+0x28>)
 8006f6a:	6223      	str	r3, [r4, #32]
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <__sinit+0x2c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1f5      	bne.n	8006f60 <__sinit+0xc>
 8006f74:	f7ff ffc4 	bl	8006f00 <global_stdio_init.part.0>
 8006f78:	e7f2      	b.n	8006f60 <__sinit+0xc>
 8006f7a:	bf00      	nop
 8006f7c:	08006ec1 	.word	0x08006ec1
 8006f80:	20000648 	.word	0x20000648

08006f84 <_fwalk_sglue>:
 8006f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4688      	mov	r8, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f94:	f1b9 0901 	subs.w	r9, r9, #1
 8006f98:	d505      	bpl.n	8006fa6 <_fwalk_sglue+0x22>
 8006f9a:	6824      	ldr	r4, [r4, #0]
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	d1f7      	bne.n	8006f90 <_fwalk_sglue+0xc>
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d907      	bls.n	8006fbc <_fwalk_sglue+0x38>
 8006fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	d003      	beq.n	8006fbc <_fwalk_sglue+0x38>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	47c0      	blx	r8
 8006fba:	4306      	orrs	r6, r0
 8006fbc:	3568      	adds	r5, #104	; 0x68
 8006fbe:	e7e9      	b.n	8006f94 <_fwalk_sglue+0x10>

08006fc0 <iprintf>:
 8006fc0:	b40f      	push	{r0, r1, r2, r3}
 8006fc2:	b507      	push	{r0, r1, r2, lr}
 8006fc4:	4906      	ldr	r1, [pc, #24]	; (8006fe0 <iprintf+0x20>)
 8006fc6:	ab04      	add	r3, sp, #16
 8006fc8:	6808      	ldr	r0, [r1, #0]
 8006fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fce:	6881      	ldr	r1, [r0, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	f001 f8a5 	bl	8008120 <_vfiprintf_r>
 8006fd6:	b003      	add	sp, #12
 8006fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fdc:	b004      	add	sp, #16
 8006fde:	4770      	bx	lr
 8006fe0:	20000098 	.word	0x20000098

08006fe4 <_puts_r>:
 8006fe4:	6a03      	ldr	r3, [r0, #32]
 8006fe6:	b570      	push	{r4, r5, r6, lr}
 8006fe8:	6884      	ldr	r4, [r0, #8]
 8006fea:	4605      	mov	r5, r0
 8006fec:	460e      	mov	r6, r1
 8006fee:	b90b      	cbnz	r3, 8006ff4 <_puts_r+0x10>
 8006ff0:	f7ff ffb0 	bl	8006f54 <__sinit>
 8006ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d405      	bmi.n	8007006 <_puts_r+0x22>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	0598      	lsls	r0, r3, #22
 8006ffe:	d402      	bmi.n	8007006 <_puts_r+0x22>
 8007000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007002:	f000 f881 	bl	8007108 <__retarget_lock_acquire_recursive>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	0719      	lsls	r1, r3, #28
 800700a:	d513      	bpl.n	8007034 <_puts_r+0x50>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	b18b      	cbz	r3, 8007034 <_puts_r+0x50>
 8007010:	3e01      	subs	r6, #1
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007018:	3b01      	subs	r3, #1
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	b9e9      	cbnz	r1, 800705a <_puts_r+0x76>
 800701e:	2b00      	cmp	r3, #0
 8007020:	da2e      	bge.n	8007080 <_puts_r+0x9c>
 8007022:	4622      	mov	r2, r4
 8007024:	210a      	movs	r1, #10
 8007026:	4628      	mov	r0, r5
 8007028:	f001 fee4 	bl	8008df4 <__swbuf_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d007      	beq.n	8007040 <_puts_r+0x5c>
 8007030:	250a      	movs	r5, #10
 8007032:	e007      	b.n	8007044 <_puts_r+0x60>
 8007034:	4621      	mov	r1, r4
 8007036:	4628      	mov	r0, r5
 8007038:	f001 ff1a 	bl	8008e70 <__swsetup_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	d0e7      	beq.n	8007010 <_puts_r+0x2c>
 8007040:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d405      	bmi.n	8007056 <_puts_r+0x72>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	059b      	lsls	r3, r3, #22
 800704e:	d402      	bmi.n	8007056 <_puts_r+0x72>
 8007050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007052:	f000 f85a 	bl	800710a <__retarget_lock_release_recursive>
 8007056:	4628      	mov	r0, r5
 8007058:	bd70      	pop	{r4, r5, r6, pc}
 800705a:	2b00      	cmp	r3, #0
 800705c:	da04      	bge.n	8007068 <_puts_r+0x84>
 800705e:	69a2      	ldr	r2, [r4, #24]
 8007060:	429a      	cmp	r2, r3
 8007062:	dc06      	bgt.n	8007072 <_puts_r+0x8e>
 8007064:	290a      	cmp	r1, #10
 8007066:	d004      	beq.n	8007072 <_puts_r+0x8e>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	6022      	str	r2, [r4, #0]
 800706e:	7019      	strb	r1, [r3, #0]
 8007070:	e7cf      	b.n	8007012 <_puts_r+0x2e>
 8007072:	4622      	mov	r2, r4
 8007074:	4628      	mov	r0, r5
 8007076:	f001 febd 	bl	8008df4 <__swbuf_r>
 800707a:	3001      	adds	r0, #1
 800707c:	d1c9      	bne.n	8007012 <_puts_r+0x2e>
 800707e:	e7df      	b.n	8007040 <_puts_r+0x5c>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	250a      	movs	r5, #10
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	701d      	strb	r5, [r3, #0]
 800708a:	e7db      	b.n	8007044 <_puts_r+0x60>

0800708c <puts>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <puts+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f7ff bfa7 	b.w	8006fe4 <_puts_r>
 8007096:	bf00      	nop
 8007098:	20000098 	.word	0x20000098

0800709c <memset>:
 800709c:	4402      	add	r2, r0
 800709e:	4603      	mov	r3, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>

080070ac <_localeconv_r>:
 80070ac:	4800      	ldr	r0, [pc, #0]	; (80070b0 <_localeconv_r+0x4>)
 80070ae:	4770      	bx	lr
 80070b0:	2000018c 	.word	0x2000018c

080070b4 <__errno>:
 80070b4:	4b01      	ldr	r3, [pc, #4]	; (80070bc <__errno+0x8>)
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000098 	.word	0x20000098

080070c0 <__libc_init_array>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4d0d      	ldr	r5, [pc, #52]	; (80070f8 <__libc_init_array+0x38>)
 80070c4:	4c0d      	ldr	r4, [pc, #52]	; (80070fc <__libc_init_array+0x3c>)
 80070c6:	1b64      	subs	r4, r4, r5
 80070c8:	10a4      	asrs	r4, r4, #2
 80070ca:	2600      	movs	r6, #0
 80070cc:	42a6      	cmp	r6, r4
 80070ce:	d109      	bne.n	80070e4 <__libc_init_array+0x24>
 80070d0:	4d0b      	ldr	r5, [pc, #44]	; (8007100 <__libc_init_array+0x40>)
 80070d2:	4c0c      	ldr	r4, [pc, #48]	; (8007104 <__libc_init_array+0x44>)
 80070d4:	f002 f91c 	bl	8009310 <_init>
 80070d8:	1b64      	subs	r4, r4, r5
 80070da:	10a4      	asrs	r4, r4, #2
 80070dc:	2600      	movs	r6, #0
 80070de:	42a6      	cmp	r6, r4
 80070e0:	d105      	bne.n	80070ee <__libc_init_array+0x2e>
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e8:	4798      	blx	r3
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7ee      	b.n	80070cc <__libc_init_array+0xc>
 80070ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f2:	4798      	blx	r3
 80070f4:	3601      	adds	r6, #1
 80070f6:	e7f2      	b.n	80070de <__libc_init_array+0x1e>
 80070f8:	08009934 	.word	0x08009934
 80070fc:	08009934 	.word	0x08009934
 8007100:	08009934 	.word	0x08009934
 8007104:	08009938 	.word	0x08009938

08007108 <__retarget_lock_acquire_recursive>:
 8007108:	4770      	bx	lr

0800710a <__retarget_lock_release_recursive>:
 800710a:	4770      	bx	lr

0800710c <memcpy>:
 800710c:	440a      	add	r2, r1
 800710e:	4291      	cmp	r1, r2
 8007110:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007114:	d100      	bne.n	8007118 <memcpy+0xc>
 8007116:	4770      	bx	lr
 8007118:	b510      	push	{r4, lr}
 800711a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007122:	4291      	cmp	r1, r2
 8007124:	d1f9      	bne.n	800711a <memcpy+0xe>
 8007126:	bd10      	pop	{r4, pc}

08007128 <quorem>:
 8007128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	690c      	ldr	r4, [r1, #16]
 8007130:	42a3      	cmp	r3, r4
 8007132:	4607      	mov	r7, r0
 8007134:	db7e      	blt.n	8007234 <quorem+0x10c>
 8007136:	3c01      	subs	r4, #1
 8007138:	f101 0814 	add.w	r8, r1, #20
 800713c:	f100 0514 	add.w	r5, r0, #20
 8007140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800714a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800714e:	3301      	adds	r3, #1
 8007150:	429a      	cmp	r2, r3
 8007152:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007156:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800715a:	fbb2 f6f3 	udiv	r6, r2, r3
 800715e:	d331      	bcc.n	80071c4 <quorem+0x9c>
 8007160:	f04f 0e00 	mov.w	lr, #0
 8007164:	4640      	mov	r0, r8
 8007166:	46ac      	mov	ip, r5
 8007168:	46f2      	mov	sl, lr
 800716a:	f850 2b04 	ldr.w	r2, [r0], #4
 800716e:	b293      	uxth	r3, r2
 8007170:	fb06 e303 	mla	r3, r6, r3, lr
 8007174:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007178:	0c1a      	lsrs	r2, r3, #16
 800717a:	b29b      	uxth	r3, r3
 800717c:	ebaa 0303 	sub.w	r3, sl, r3
 8007180:	f8dc a000 	ldr.w	sl, [ip]
 8007184:	fa13 f38a 	uxtah	r3, r3, sl
 8007188:	fb06 220e 	mla	r2, r6, lr, r2
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	9b00      	ldr	r3, [sp, #0]
 8007190:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007194:	b292      	uxth	r2, r2
 8007196:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800719a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800719e:	f8bd 3000 	ldrh.w	r3, [sp]
 80071a2:	4581      	cmp	r9, r0
 80071a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a8:	f84c 3b04 	str.w	r3, [ip], #4
 80071ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071b0:	d2db      	bcs.n	800716a <quorem+0x42>
 80071b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80071b6:	b92b      	cbnz	r3, 80071c4 <quorem+0x9c>
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	3b04      	subs	r3, #4
 80071bc:	429d      	cmp	r5, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	d32c      	bcc.n	800721c <quorem+0xf4>
 80071c2:	613c      	str	r4, [r7, #16]
 80071c4:	4638      	mov	r0, r7
 80071c6:	f001 fca3 	bl	8008b10 <__mcmp>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	db22      	blt.n	8007214 <quorem+0xec>
 80071ce:	3601      	adds	r6, #1
 80071d0:	4629      	mov	r1, r5
 80071d2:	2000      	movs	r0, #0
 80071d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071d8:	f8d1 c000 	ldr.w	ip, [r1]
 80071dc:	b293      	uxth	r3, r2
 80071de:	1ac3      	subs	r3, r0, r3
 80071e0:	0c12      	lsrs	r2, r2, #16
 80071e2:	fa13 f38c 	uxtah	r3, r3, ip
 80071e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80071ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f4:	45c1      	cmp	r9, r8
 80071f6:	f841 3b04 	str.w	r3, [r1], #4
 80071fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071fe:	d2e9      	bcs.n	80071d4 <quorem+0xac>
 8007200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007208:	b922      	cbnz	r2, 8007214 <quorem+0xec>
 800720a:	3b04      	subs	r3, #4
 800720c:	429d      	cmp	r5, r3
 800720e:	461a      	mov	r2, r3
 8007210:	d30a      	bcc.n	8007228 <quorem+0x100>
 8007212:	613c      	str	r4, [r7, #16]
 8007214:	4630      	mov	r0, r6
 8007216:	b003      	add	sp, #12
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	3b04      	subs	r3, #4
 8007220:	2a00      	cmp	r2, #0
 8007222:	d1ce      	bne.n	80071c2 <quorem+0x9a>
 8007224:	3c01      	subs	r4, #1
 8007226:	e7c9      	b.n	80071bc <quorem+0x94>
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	3b04      	subs	r3, #4
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1f0      	bne.n	8007212 <quorem+0xea>
 8007230:	3c01      	subs	r4, #1
 8007232:	e7eb      	b.n	800720c <quorem+0xe4>
 8007234:	2000      	movs	r0, #0
 8007236:	e7ee      	b.n	8007216 <quorem+0xee>

08007238 <_dtoa_r>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	ed2d 8b04 	vpush	{d8-d9}
 8007240:	69c5      	ldr	r5, [r0, #28]
 8007242:	b093      	sub	sp, #76	; 0x4c
 8007244:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007248:	ec57 6b10 	vmov	r6, r7, d0
 800724c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007250:	9107      	str	r1, [sp, #28]
 8007252:	4604      	mov	r4, r0
 8007254:	920a      	str	r2, [sp, #40]	; 0x28
 8007256:	930d      	str	r3, [sp, #52]	; 0x34
 8007258:	b975      	cbnz	r5, 8007278 <_dtoa_r+0x40>
 800725a:	2010      	movs	r0, #16
 800725c:	f001 f87a 	bl	8008354 <malloc>
 8007260:	4602      	mov	r2, r0
 8007262:	61e0      	str	r0, [r4, #28]
 8007264:	b920      	cbnz	r0, 8007270 <_dtoa_r+0x38>
 8007266:	4bae      	ldr	r3, [pc, #696]	; (8007520 <_dtoa_r+0x2e8>)
 8007268:	21ef      	movs	r1, #239	; 0xef
 800726a:	48ae      	ldr	r0, [pc, #696]	; (8007524 <_dtoa_r+0x2ec>)
 800726c:	f001 ff4c 	bl	8009108 <__assert_func>
 8007270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007274:	6005      	str	r5, [r0, #0]
 8007276:	60c5      	str	r5, [r0, #12]
 8007278:	69e3      	ldr	r3, [r4, #28]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	b151      	cbz	r1, 8007294 <_dtoa_r+0x5c>
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	604a      	str	r2, [r1, #4]
 8007282:	2301      	movs	r3, #1
 8007284:	4093      	lsls	r3, r2
 8007286:	608b      	str	r3, [r1, #8]
 8007288:	4620      	mov	r0, r4
 800728a:	f001 fa05 	bl	8008698 <_Bfree>
 800728e:	69e3      	ldr	r3, [r4, #28]
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	1e3b      	subs	r3, r7, #0
 8007296:	bfbb      	ittet	lt
 8007298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800729c:	9303      	strlt	r3, [sp, #12]
 800729e:	2300      	movge	r3, #0
 80072a0:	2201      	movlt	r2, #1
 80072a2:	bfac      	ite	ge
 80072a4:	f8c8 3000 	strge.w	r3, [r8]
 80072a8:	f8c8 2000 	strlt.w	r2, [r8]
 80072ac:	4b9e      	ldr	r3, [pc, #632]	; (8007528 <_dtoa_r+0x2f0>)
 80072ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072b2:	ea33 0308 	bics.w	r3, r3, r8
 80072b6:	d11b      	bne.n	80072f0 <_dtoa_r+0xb8>
 80072b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072c4:	4333      	orrs	r3, r6
 80072c6:	f000 8593 	beq.w	8007df0 <_dtoa_r+0xbb8>
 80072ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072cc:	b963      	cbnz	r3, 80072e8 <_dtoa_r+0xb0>
 80072ce:	4b97      	ldr	r3, [pc, #604]	; (800752c <_dtoa_r+0x2f4>)
 80072d0:	e027      	b.n	8007322 <_dtoa_r+0xea>
 80072d2:	4b97      	ldr	r3, [pc, #604]	; (8007530 <_dtoa_r+0x2f8>)
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	3308      	adds	r3, #8
 80072d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	9800      	ldr	r0, [sp, #0]
 80072de:	b013      	add	sp, #76	; 0x4c
 80072e0:	ecbd 8b04 	vpop	{d8-d9}
 80072e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e8:	4b90      	ldr	r3, [pc, #576]	; (800752c <_dtoa_r+0x2f4>)
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	3303      	adds	r3, #3
 80072ee:	e7f3      	b.n	80072d8 <_dtoa_r+0xa0>
 80072f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072f4:	2200      	movs	r2, #0
 80072f6:	ec51 0b17 	vmov	r0, r1, d7
 80072fa:	eeb0 8a47 	vmov.f32	s16, s14
 80072fe:	eef0 8a67 	vmov.f32	s17, s15
 8007302:	2300      	movs	r3, #0
 8007304:	f7f9 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007308:	4681      	mov	r9, r0
 800730a:	b160      	cbz	r0, 8007326 <_dtoa_r+0xee>
 800730c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800730e:	2301      	movs	r3, #1
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8568 	beq.w	8007dea <_dtoa_r+0xbb2>
 800731a:	4b86      	ldr	r3, [pc, #536]	; (8007534 <_dtoa_r+0x2fc>)
 800731c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	e7da      	b.n	80072dc <_dtoa_r+0xa4>
 8007326:	aa10      	add	r2, sp, #64	; 0x40
 8007328:	a911      	add	r1, sp, #68	; 0x44
 800732a:	4620      	mov	r0, r4
 800732c:	eeb0 0a48 	vmov.f32	s0, s16
 8007330:	eef0 0a68 	vmov.f32	s1, s17
 8007334:	f001 fc92 	bl	8008c5c <__d2b>
 8007338:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800733c:	4682      	mov	sl, r0
 800733e:	2d00      	cmp	r5, #0
 8007340:	d07f      	beq.n	8007442 <_dtoa_r+0x20a>
 8007342:	ee18 3a90 	vmov	r3, s17
 8007346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800734a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800734e:	ec51 0b18 	vmov	r0, r1, d8
 8007352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800735a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800735e:	4619      	mov	r1, r3
 8007360:	2200      	movs	r2, #0
 8007362:	4b75      	ldr	r3, [pc, #468]	; (8007538 <_dtoa_r+0x300>)
 8007364:	f7f8 ff90 	bl	8000288 <__aeabi_dsub>
 8007368:	a367      	add	r3, pc, #412	; (adr r3, 8007508 <_dtoa_r+0x2d0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f9 f943 	bl	80005f8 <__aeabi_dmul>
 8007372:	a367      	add	r3, pc, #412	; (adr r3, 8007510 <_dtoa_r+0x2d8>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff88 	bl	800028c <__adddf3>
 800737c:	4606      	mov	r6, r0
 800737e:	4628      	mov	r0, r5
 8007380:	460f      	mov	r7, r1
 8007382:	f7f9 f8cf 	bl	8000524 <__aeabi_i2d>
 8007386:	a364      	add	r3, pc, #400	; (adr r3, 8007518 <_dtoa_r+0x2e0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f8 ff78 	bl	800028c <__adddf3>
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	f7f9 fbda 	bl	8000b58 <__aeabi_d2iz>
 80073a4:	2200      	movs	r2, #0
 80073a6:	4683      	mov	fp, r0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f9 fb95 	bl	8000adc <__aeabi_dcmplt>
 80073b2:	b148      	cbz	r0, 80073c8 <_dtoa_r+0x190>
 80073b4:	4658      	mov	r0, fp
 80073b6:	f7f9 f8b5 	bl	8000524 <__aeabi_i2d>
 80073ba:	4632      	mov	r2, r6
 80073bc:	463b      	mov	r3, r7
 80073be:	f7f9 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 80073c2:	b908      	cbnz	r0, 80073c8 <_dtoa_r+0x190>
 80073c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073c8:	f1bb 0f16 	cmp.w	fp, #22
 80073cc:	d857      	bhi.n	800747e <_dtoa_r+0x246>
 80073ce:	4b5b      	ldr	r3, [pc, #364]	; (800753c <_dtoa_r+0x304>)
 80073d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	ec51 0b18 	vmov	r0, r1, d8
 80073dc:	f7f9 fb7e 	bl	8000adc <__aeabi_dcmplt>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d04e      	beq.n	8007482 <_dtoa_r+0x24a>
 80073e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073e8:	2300      	movs	r3, #0
 80073ea:	930c      	str	r3, [sp, #48]	; 0x30
 80073ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ee:	1b5b      	subs	r3, r3, r5
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	bf45      	ittet	mi
 80073f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80073f8:	9305      	strmi	r3, [sp, #20]
 80073fa:	2300      	movpl	r3, #0
 80073fc:	2300      	movmi	r3, #0
 80073fe:	9206      	str	r2, [sp, #24]
 8007400:	bf54      	ite	pl
 8007402:	9305      	strpl	r3, [sp, #20]
 8007404:	9306      	strmi	r3, [sp, #24]
 8007406:	f1bb 0f00 	cmp.w	fp, #0
 800740a:	db3c      	blt.n	8007486 <_dtoa_r+0x24e>
 800740c:	9b06      	ldr	r3, [sp, #24]
 800740e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007412:	445b      	add	r3, fp
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	2300      	movs	r3, #0
 8007418:	9308      	str	r3, [sp, #32]
 800741a:	9b07      	ldr	r3, [sp, #28]
 800741c:	2b09      	cmp	r3, #9
 800741e:	d868      	bhi.n	80074f2 <_dtoa_r+0x2ba>
 8007420:	2b05      	cmp	r3, #5
 8007422:	bfc4      	itt	gt
 8007424:	3b04      	subgt	r3, #4
 8007426:	9307      	strgt	r3, [sp, #28]
 8007428:	9b07      	ldr	r3, [sp, #28]
 800742a:	f1a3 0302 	sub.w	r3, r3, #2
 800742e:	bfcc      	ite	gt
 8007430:	2500      	movgt	r5, #0
 8007432:	2501      	movle	r5, #1
 8007434:	2b03      	cmp	r3, #3
 8007436:	f200 8085 	bhi.w	8007544 <_dtoa_r+0x30c>
 800743a:	e8df f003 	tbb	[pc, r3]
 800743e:	3b2e      	.short	0x3b2e
 8007440:	5839      	.short	0x5839
 8007442:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007446:	441d      	add	r5, r3
 8007448:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800744c:	2b20      	cmp	r3, #32
 800744e:	bfc1      	itttt	gt
 8007450:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007454:	fa08 f803 	lslgt.w	r8, r8, r3
 8007458:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800745c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007460:	bfd6      	itet	le
 8007462:	f1c3 0320 	rsble	r3, r3, #32
 8007466:	ea48 0003 	orrgt.w	r0, r8, r3
 800746a:	fa06 f003 	lslle.w	r0, r6, r3
 800746e:	f7f9 f849 	bl	8000504 <__aeabi_ui2d>
 8007472:	2201      	movs	r2, #1
 8007474:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007478:	3d01      	subs	r5, #1
 800747a:	920e      	str	r2, [sp, #56]	; 0x38
 800747c:	e76f      	b.n	800735e <_dtoa_r+0x126>
 800747e:	2301      	movs	r3, #1
 8007480:	e7b3      	b.n	80073ea <_dtoa_r+0x1b2>
 8007482:	900c      	str	r0, [sp, #48]	; 0x30
 8007484:	e7b2      	b.n	80073ec <_dtoa_r+0x1b4>
 8007486:	9b05      	ldr	r3, [sp, #20]
 8007488:	eba3 030b 	sub.w	r3, r3, fp
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	f1cb 0300 	rsb	r3, fp, #0
 8007492:	9308      	str	r3, [sp, #32]
 8007494:	2300      	movs	r3, #0
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	e7bf      	b.n	800741a <_dtoa_r+0x1e2>
 800749a:	2300      	movs	r3, #0
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc52      	bgt.n	800754a <_dtoa_r+0x312>
 80074a4:	2301      	movs	r3, #1
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	461a      	mov	r2, r3
 80074ac:	920a      	str	r2, [sp, #40]	; 0x28
 80074ae:	e00b      	b.n	80074c8 <_dtoa_r+0x290>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e7f3      	b.n	800749c <_dtoa_r+0x264>
 80074b4:	2300      	movs	r3, #0
 80074b6:	9309      	str	r3, [sp, #36]	; 0x24
 80074b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ba:	445b      	add	r3, fp
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	bfb8      	it	lt
 80074c6:	2301      	movlt	r3, #1
 80074c8:	69e0      	ldr	r0, [r4, #28]
 80074ca:	2100      	movs	r1, #0
 80074cc:	2204      	movs	r2, #4
 80074ce:	f102 0614 	add.w	r6, r2, #20
 80074d2:	429e      	cmp	r6, r3
 80074d4:	d93d      	bls.n	8007552 <_dtoa_r+0x31a>
 80074d6:	6041      	str	r1, [r0, #4]
 80074d8:	4620      	mov	r0, r4
 80074da:	f001 f89d 	bl	8008618 <_Balloc>
 80074de:	9000      	str	r0, [sp, #0]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d139      	bne.n	8007558 <_dtoa_r+0x320>
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <_dtoa_r+0x308>)
 80074e6:	4602      	mov	r2, r0
 80074e8:	f240 11af 	movw	r1, #431	; 0x1af
 80074ec:	e6bd      	b.n	800726a <_dtoa_r+0x32>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7e1      	b.n	80074b6 <_dtoa_r+0x27e>
 80074f2:	2501      	movs	r5, #1
 80074f4:	2300      	movs	r3, #0
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	9509      	str	r5, [sp, #36]	; 0x24
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	2200      	movs	r2, #0
 8007504:	2312      	movs	r3, #18
 8007506:	e7d1      	b.n	80074ac <_dtoa_r+0x274>
 8007508:	636f4361 	.word	0x636f4361
 800750c:	3fd287a7 	.word	0x3fd287a7
 8007510:	8b60c8b3 	.word	0x8b60c8b3
 8007514:	3fc68a28 	.word	0x3fc68a28
 8007518:	509f79fb 	.word	0x509f79fb
 800751c:	3fd34413 	.word	0x3fd34413
 8007520:	080095fd 	.word	0x080095fd
 8007524:	08009614 	.word	0x08009614
 8007528:	7ff00000 	.word	0x7ff00000
 800752c:	080095f9 	.word	0x080095f9
 8007530:	080095f0 	.word	0x080095f0
 8007534:	080095cd 	.word	0x080095cd
 8007538:	3ff80000 	.word	0x3ff80000
 800753c:	08009710 	.word	0x08009710
 8007540:	0800966c 	.word	0x0800966c
 8007544:	2301      	movs	r3, #1
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	e7d7      	b.n	80074fa <_dtoa_r+0x2c2>
 800754a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	e7ba      	b.n	80074c8 <_dtoa_r+0x290>
 8007552:	3101      	adds	r1, #1
 8007554:	0052      	lsls	r2, r2, #1
 8007556:	e7ba      	b.n	80074ce <_dtoa_r+0x296>
 8007558:	69e3      	ldr	r3, [r4, #28]
 800755a:	9a00      	ldr	r2, [sp, #0]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	2b0e      	cmp	r3, #14
 8007562:	f200 80a8 	bhi.w	80076b6 <_dtoa_r+0x47e>
 8007566:	2d00      	cmp	r5, #0
 8007568:	f000 80a5 	beq.w	80076b6 <_dtoa_r+0x47e>
 800756c:	f1bb 0f00 	cmp.w	fp, #0
 8007570:	dd38      	ble.n	80075e4 <_dtoa_r+0x3ac>
 8007572:	4bc0      	ldr	r3, [pc, #768]	; (8007874 <_dtoa_r+0x63c>)
 8007574:	f00b 020f 	and.w	r2, fp, #15
 8007578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800757c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007580:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007584:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007588:	d019      	beq.n	80075be <_dtoa_r+0x386>
 800758a:	4bbb      	ldr	r3, [pc, #748]	; (8007878 <_dtoa_r+0x640>)
 800758c:	ec51 0b18 	vmov	r0, r1, d8
 8007590:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007594:	f7f9 f95a 	bl	800084c <__aeabi_ddiv>
 8007598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800759c:	f008 080f 	and.w	r8, r8, #15
 80075a0:	2503      	movs	r5, #3
 80075a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007878 <_dtoa_r+0x640>
 80075a6:	f1b8 0f00 	cmp.w	r8, #0
 80075aa:	d10a      	bne.n	80075c2 <_dtoa_r+0x38a>
 80075ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b0:	4632      	mov	r2, r6
 80075b2:	463b      	mov	r3, r7
 80075b4:	f7f9 f94a 	bl	800084c <__aeabi_ddiv>
 80075b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075bc:	e02b      	b.n	8007616 <_dtoa_r+0x3de>
 80075be:	2502      	movs	r5, #2
 80075c0:	e7ef      	b.n	80075a2 <_dtoa_r+0x36a>
 80075c2:	f018 0f01 	tst.w	r8, #1
 80075c6:	d008      	beq.n	80075da <_dtoa_r+0x3a2>
 80075c8:	4630      	mov	r0, r6
 80075ca:	4639      	mov	r1, r7
 80075cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	3501      	adds	r5, #1
 80075d6:	4606      	mov	r6, r0
 80075d8:	460f      	mov	r7, r1
 80075da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80075de:	f109 0908 	add.w	r9, r9, #8
 80075e2:	e7e0      	b.n	80075a6 <_dtoa_r+0x36e>
 80075e4:	f000 809f 	beq.w	8007726 <_dtoa_r+0x4ee>
 80075e8:	f1cb 0600 	rsb	r6, fp, #0
 80075ec:	4ba1      	ldr	r3, [pc, #644]	; (8007874 <_dtoa_r+0x63c>)
 80075ee:	4fa2      	ldr	r7, [pc, #648]	; (8007878 <_dtoa_r+0x640>)
 80075f0:	f006 020f 	and.w	r2, r6, #15
 80075f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	ec51 0b18 	vmov	r0, r1, d8
 8007600:	f7f8 fffa 	bl	80005f8 <__aeabi_dmul>
 8007604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007608:	1136      	asrs	r6, r6, #4
 800760a:	2300      	movs	r3, #0
 800760c:	2502      	movs	r5, #2
 800760e:	2e00      	cmp	r6, #0
 8007610:	d17e      	bne.n	8007710 <_dtoa_r+0x4d8>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1d0      	bne.n	80075b8 <_dtoa_r+0x380>
 8007616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007618:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8084 	beq.w	800772a <_dtoa_r+0x4f2>
 8007622:	4b96      	ldr	r3, [pc, #600]	; (800787c <_dtoa_r+0x644>)
 8007624:	2200      	movs	r2, #0
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	f7f9 fa57 	bl	8000adc <__aeabi_dcmplt>
 800762e:	2800      	cmp	r0, #0
 8007630:	d07b      	beq.n	800772a <_dtoa_r+0x4f2>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d078      	beq.n	800772a <_dtoa_r+0x4f2>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd39      	ble.n	80076b2 <_dtoa_r+0x47a>
 800763e:	4b90      	ldr	r3, [pc, #576]	; (8007880 <_dtoa_r+0x648>)
 8007640:	2200      	movs	r2, #0
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 ffd7 	bl	80005f8 <__aeabi_dmul>
 800764a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800764e:	9e01      	ldr	r6, [sp, #4]
 8007650:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007654:	3501      	adds	r5, #1
 8007656:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800765a:	4628      	mov	r0, r5
 800765c:	f7f8 ff62 	bl	8000524 <__aeabi_i2d>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	f7f8 ffc8 	bl	80005f8 <__aeabi_dmul>
 8007668:	4b86      	ldr	r3, [pc, #536]	; (8007884 <_dtoa_r+0x64c>)
 800766a:	2200      	movs	r2, #0
 800766c:	f7f8 fe0e 	bl	800028c <__adddf3>
 8007670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	2e00      	cmp	r6, #0
 800767c:	d158      	bne.n	8007730 <_dtoa_r+0x4f8>
 800767e:	4b82      	ldr	r3, [pc, #520]	; (8007888 <_dtoa_r+0x650>)
 8007680:	2200      	movs	r2, #0
 8007682:	4640      	mov	r0, r8
 8007684:	4649      	mov	r1, r9
 8007686:	f7f8 fdff 	bl	8000288 <__aeabi_dsub>
 800768a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800768e:	4680      	mov	r8, r0
 8007690:	4689      	mov	r9, r1
 8007692:	f7f9 fa41 	bl	8000b18 <__aeabi_dcmpgt>
 8007696:	2800      	cmp	r0, #0
 8007698:	f040 8296 	bne.w	8007bc8 <_dtoa_r+0x990>
 800769c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076a0:	4640      	mov	r0, r8
 80076a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a6:	4649      	mov	r1, r9
 80076a8:	f7f9 fa18 	bl	8000adc <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f040 8289 	bne.w	8007bc4 <_dtoa_r+0x98c>
 80076b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f2c0 814e 	blt.w	800795a <_dtoa_r+0x722>
 80076be:	f1bb 0f0e 	cmp.w	fp, #14
 80076c2:	f300 814a 	bgt.w	800795a <_dtoa_r+0x722>
 80076c6:	4b6b      	ldr	r3, [pc, #428]	; (8007874 <_dtoa_r+0x63c>)
 80076c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f280 80dc 	bge.w	8007890 <_dtoa_r+0x658>
 80076d8:	9b04      	ldr	r3, [sp, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f300 80d8 	bgt.w	8007890 <_dtoa_r+0x658>
 80076e0:	f040 826f 	bne.w	8007bc2 <_dtoa_r+0x98a>
 80076e4:	4b68      	ldr	r3, [pc, #416]	; (8007888 <_dtoa_r+0x650>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076f4:	f7f9 fa06 	bl	8000b04 <__aeabi_dcmpge>
 80076f8:	9e04      	ldr	r6, [sp, #16]
 80076fa:	4637      	mov	r7, r6
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 8245 	bne.w	8007b8c <_dtoa_r+0x954>
 8007702:	9d00      	ldr	r5, [sp, #0]
 8007704:	2331      	movs	r3, #49	; 0x31
 8007706:	f805 3b01 	strb.w	r3, [r5], #1
 800770a:	f10b 0b01 	add.w	fp, fp, #1
 800770e:	e241      	b.n	8007b94 <_dtoa_r+0x95c>
 8007710:	07f2      	lsls	r2, r6, #31
 8007712:	d505      	bpl.n	8007720 <_dtoa_r+0x4e8>
 8007714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007718:	f7f8 ff6e 	bl	80005f8 <__aeabi_dmul>
 800771c:	3501      	adds	r5, #1
 800771e:	2301      	movs	r3, #1
 8007720:	1076      	asrs	r6, r6, #1
 8007722:	3708      	adds	r7, #8
 8007724:	e773      	b.n	800760e <_dtoa_r+0x3d6>
 8007726:	2502      	movs	r5, #2
 8007728:	e775      	b.n	8007616 <_dtoa_r+0x3de>
 800772a:	9e04      	ldr	r6, [sp, #16]
 800772c:	465f      	mov	r7, fp
 800772e:	e792      	b.n	8007656 <_dtoa_r+0x41e>
 8007730:	9900      	ldr	r1, [sp, #0]
 8007732:	4b50      	ldr	r3, [pc, #320]	; (8007874 <_dtoa_r+0x63c>)
 8007734:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007738:	4431      	add	r1, r6
 800773a:	9102      	str	r1, [sp, #8]
 800773c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773e:	eeb0 9a47 	vmov.f32	s18, s14
 8007742:	eef0 9a67 	vmov.f32	s19, s15
 8007746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800774a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800774e:	2900      	cmp	r1, #0
 8007750:	d044      	beq.n	80077dc <_dtoa_r+0x5a4>
 8007752:	494e      	ldr	r1, [pc, #312]	; (800788c <_dtoa_r+0x654>)
 8007754:	2000      	movs	r0, #0
 8007756:	f7f9 f879 	bl	800084c <__aeabi_ddiv>
 800775a:	ec53 2b19 	vmov	r2, r3, d9
 800775e:	f7f8 fd93 	bl	8000288 <__aeabi_dsub>
 8007762:	9d00      	ldr	r5, [sp, #0]
 8007764:	ec41 0b19 	vmov	d9, r0, r1
 8007768:	4649      	mov	r1, r9
 800776a:	4640      	mov	r0, r8
 800776c:	f7f9 f9f4 	bl	8000b58 <__aeabi_d2iz>
 8007770:	4606      	mov	r6, r0
 8007772:	f7f8 fed7 	bl	8000524 <__aeabi_i2d>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 fd83 	bl	8000288 <__aeabi_dsub>
 8007782:	3630      	adds	r6, #48	; 0x30
 8007784:	f805 6b01 	strb.w	r6, [r5], #1
 8007788:	ec53 2b19 	vmov	r2, r3, d9
 800778c:	4680      	mov	r8, r0
 800778e:	4689      	mov	r9, r1
 8007790:	f7f9 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	d164      	bne.n	8007862 <_dtoa_r+0x62a>
 8007798:	4642      	mov	r2, r8
 800779a:	464b      	mov	r3, r9
 800779c:	4937      	ldr	r1, [pc, #220]	; (800787c <_dtoa_r+0x644>)
 800779e:	2000      	movs	r0, #0
 80077a0:	f7f8 fd72 	bl	8000288 <__aeabi_dsub>
 80077a4:	ec53 2b19 	vmov	r2, r3, d9
 80077a8:	f7f9 f998 	bl	8000adc <__aeabi_dcmplt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f040 80b6 	bne.w	800791e <_dtoa_r+0x6e6>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	429d      	cmp	r5, r3
 80077b6:	f43f af7c 	beq.w	80076b2 <_dtoa_r+0x47a>
 80077ba:	4b31      	ldr	r3, [pc, #196]	; (8007880 <_dtoa_r+0x648>)
 80077bc:	ec51 0b19 	vmov	r0, r1, d9
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <_dtoa_r+0x648>)
 80077c8:	ec41 0b19 	vmov	d9, r0, r1
 80077cc:	2200      	movs	r2, #0
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	4680      	mov	r8, r0
 80077d8:	4689      	mov	r9, r1
 80077da:	e7c5      	b.n	8007768 <_dtoa_r+0x530>
 80077dc:	ec51 0b17 	vmov	r0, r1, d7
 80077e0:	f7f8 ff0a 	bl	80005f8 <__aeabi_dmul>
 80077e4:	9b02      	ldr	r3, [sp, #8]
 80077e6:	9d00      	ldr	r5, [sp, #0]
 80077e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ea:	ec41 0b19 	vmov	d9, r0, r1
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	f7f9 f9b1 	bl	8000b58 <__aeabi_d2iz>
 80077f6:	4606      	mov	r6, r0
 80077f8:	f7f8 fe94 	bl	8000524 <__aeabi_i2d>
 80077fc:	3630      	adds	r6, #48	; 0x30
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4640      	mov	r0, r8
 8007804:	4649      	mov	r1, r9
 8007806:	f7f8 fd3f 	bl	8000288 <__aeabi_dsub>
 800780a:	f805 6b01 	strb.w	r6, [r5], #1
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	429d      	cmp	r5, r3
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	d124      	bne.n	8007866 <_dtoa_r+0x62e>
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <_dtoa_r+0x654>)
 800781e:	ec51 0b19 	vmov	r0, r1, d9
 8007822:	f7f8 fd33 	bl	800028c <__adddf3>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	f7f9 f973 	bl	8000b18 <__aeabi_dcmpgt>
 8007832:	2800      	cmp	r0, #0
 8007834:	d173      	bne.n	800791e <_dtoa_r+0x6e6>
 8007836:	ec53 2b19 	vmov	r2, r3, d9
 800783a:	4914      	ldr	r1, [pc, #80]	; (800788c <_dtoa_r+0x654>)
 800783c:	2000      	movs	r0, #0
 800783e:	f7f8 fd23 	bl	8000288 <__aeabi_dsub>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4640      	mov	r0, r8
 8007848:	4649      	mov	r1, r9
 800784a:	f7f9 f947 	bl	8000adc <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f af2f 	beq.w	80076b2 <_dtoa_r+0x47a>
 8007854:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007856:	1e6b      	subs	r3, r5, #1
 8007858:	930f      	str	r3, [sp, #60]	; 0x3c
 800785a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800785e:	2b30      	cmp	r3, #48	; 0x30
 8007860:	d0f8      	beq.n	8007854 <_dtoa_r+0x61c>
 8007862:	46bb      	mov	fp, r7
 8007864:	e04a      	b.n	80078fc <_dtoa_r+0x6c4>
 8007866:	4b06      	ldr	r3, [pc, #24]	; (8007880 <_dtoa_r+0x648>)
 8007868:	f7f8 fec6 	bl	80005f8 <__aeabi_dmul>
 800786c:	4680      	mov	r8, r0
 800786e:	4689      	mov	r9, r1
 8007870:	e7bd      	b.n	80077ee <_dtoa_r+0x5b6>
 8007872:	bf00      	nop
 8007874:	08009710 	.word	0x08009710
 8007878:	080096e8 	.word	0x080096e8
 800787c:	3ff00000 	.word	0x3ff00000
 8007880:	40240000 	.word	0x40240000
 8007884:	401c0000 	.word	0x401c0000
 8007888:	40140000 	.word	0x40140000
 800788c:	3fe00000 	.word	0x3fe00000
 8007890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007894:	9d00      	ldr	r5, [sp, #0]
 8007896:	4642      	mov	r2, r8
 8007898:	464b      	mov	r3, r9
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f8 ffd5 	bl	800084c <__aeabi_ddiv>
 80078a2:	f7f9 f959 	bl	8000b58 <__aeabi_d2iz>
 80078a6:	9001      	str	r0, [sp, #4]
 80078a8:	f7f8 fe3c 	bl	8000524 <__aeabi_i2d>
 80078ac:	4642      	mov	r2, r8
 80078ae:	464b      	mov	r3, r9
 80078b0:	f7f8 fea2 	bl	80005f8 <__aeabi_dmul>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f8 fce4 	bl	8000288 <__aeabi_dsub>
 80078c0:	9e01      	ldr	r6, [sp, #4]
 80078c2:	9f04      	ldr	r7, [sp, #16]
 80078c4:	3630      	adds	r6, #48	; 0x30
 80078c6:	f805 6b01 	strb.w	r6, [r5], #1
 80078ca:	9e00      	ldr	r6, [sp, #0]
 80078cc:	1bae      	subs	r6, r5, r6
 80078ce:	42b7      	cmp	r7, r6
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	d134      	bne.n	8007940 <_dtoa_r+0x708>
 80078d6:	f7f8 fcd9 	bl	800028c <__adddf3>
 80078da:	4642      	mov	r2, r8
 80078dc:	464b      	mov	r3, r9
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	f7f9 f919 	bl	8000b18 <__aeabi_dcmpgt>
 80078e6:	b9c8      	cbnz	r0, 800791c <_dtoa_r+0x6e4>
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	4630      	mov	r0, r6
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f9 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f4:	b110      	cbz	r0, 80078fc <_dtoa_r+0x6c4>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	07db      	lsls	r3, r3, #31
 80078fa:	d40f      	bmi.n	800791c <_dtoa_r+0x6e4>
 80078fc:	4651      	mov	r1, sl
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 feca 	bl	8008698 <_Bfree>
 8007904:	2300      	movs	r3, #0
 8007906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007908:	702b      	strb	r3, [r5, #0]
 800790a:	f10b 0301 	add.w	r3, fp, #1
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007912:	2b00      	cmp	r3, #0
 8007914:	f43f ace2 	beq.w	80072dc <_dtoa_r+0xa4>
 8007918:	601d      	str	r5, [r3, #0]
 800791a:	e4df      	b.n	80072dc <_dtoa_r+0xa4>
 800791c:	465f      	mov	r7, fp
 800791e:	462b      	mov	r3, r5
 8007920:	461d      	mov	r5, r3
 8007922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007926:	2a39      	cmp	r2, #57	; 0x39
 8007928:	d106      	bne.n	8007938 <_dtoa_r+0x700>
 800792a:	9a00      	ldr	r2, [sp, #0]
 800792c:	429a      	cmp	r2, r3
 800792e:	d1f7      	bne.n	8007920 <_dtoa_r+0x6e8>
 8007930:	9900      	ldr	r1, [sp, #0]
 8007932:	2230      	movs	r2, #48	; 0x30
 8007934:	3701      	adds	r7, #1
 8007936:	700a      	strb	r2, [r1, #0]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	3201      	adds	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e790      	b.n	8007862 <_dtoa_r+0x62a>
 8007940:	4ba3      	ldr	r3, [pc, #652]	; (8007bd0 <_dtoa_r+0x998>)
 8007942:	2200      	movs	r2, #0
 8007944:	f7f8 fe58 	bl	80005f8 <__aeabi_dmul>
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	4606      	mov	r6, r0
 800794e:	460f      	mov	r7, r1
 8007950:	f7f9 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007954:	2800      	cmp	r0, #0
 8007956:	d09e      	beq.n	8007896 <_dtoa_r+0x65e>
 8007958:	e7d0      	b.n	80078fc <_dtoa_r+0x6c4>
 800795a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800795c:	2a00      	cmp	r2, #0
 800795e:	f000 80ca 	beq.w	8007af6 <_dtoa_r+0x8be>
 8007962:	9a07      	ldr	r2, [sp, #28]
 8007964:	2a01      	cmp	r2, #1
 8007966:	f300 80ad 	bgt.w	8007ac4 <_dtoa_r+0x88c>
 800796a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800796c:	2a00      	cmp	r2, #0
 800796e:	f000 80a5 	beq.w	8007abc <_dtoa_r+0x884>
 8007972:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007976:	9e08      	ldr	r6, [sp, #32]
 8007978:	9d05      	ldr	r5, [sp, #20]
 800797a:	9a05      	ldr	r2, [sp, #20]
 800797c:	441a      	add	r2, r3
 800797e:	9205      	str	r2, [sp, #20]
 8007980:	9a06      	ldr	r2, [sp, #24]
 8007982:	2101      	movs	r1, #1
 8007984:	441a      	add	r2, r3
 8007986:	4620      	mov	r0, r4
 8007988:	9206      	str	r2, [sp, #24]
 800798a:	f000 ff3b 	bl	8008804 <__i2b>
 800798e:	4607      	mov	r7, r0
 8007990:	b165      	cbz	r5, 80079ac <_dtoa_r+0x774>
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	dd09      	ble.n	80079ac <_dtoa_r+0x774>
 8007998:	42ab      	cmp	r3, r5
 800799a:	9a05      	ldr	r2, [sp, #20]
 800799c:	bfa8      	it	ge
 800799e:	462b      	movge	r3, r5
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	9205      	str	r2, [sp, #20]
 80079a4:	9a06      	ldr	r2, [sp, #24]
 80079a6:	1aed      	subs	r5, r5, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	9306      	str	r3, [sp, #24]
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	b1f3      	cbz	r3, 80079ee <_dtoa_r+0x7b6>
 80079b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80a3 	beq.w	8007afe <_dtoa_r+0x8c6>
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	dd10      	ble.n	80079de <_dtoa_r+0x7a6>
 80079bc:	4639      	mov	r1, r7
 80079be:	4632      	mov	r2, r6
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 ffdf 	bl	8008984 <__pow5mult>
 80079c6:	4652      	mov	r2, sl
 80079c8:	4601      	mov	r1, r0
 80079ca:	4607      	mov	r7, r0
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 ff2f 	bl	8008830 <__multiply>
 80079d2:	4651      	mov	r1, sl
 80079d4:	4680      	mov	r8, r0
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fe5e 	bl	8008698 <_Bfree>
 80079dc:	46c2      	mov	sl, r8
 80079de:	9b08      	ldr	r3, [sp, #32]
 80079e0:	1b9a      	subs	r2, r3, r6
 80079e2:	d004      	beq.n	80079ee <_dtoa_r+0x7b6>
 80079e4:	4651      	mov	r1, sl
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 ffcc 	bl	8008984 <__pow5mult>
 80079ec:	4682      	mov	sl, r0
 80079ee:	2101      	movs	r1, #1
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 ff07 	bl	8008804 <__i2b>
 80079f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	4606      	mov	r6, r0
 80079fc:	f340 8081 	ble.w	8007b02 <_dtoa_r+0x8ca>
 8007a00:	461a      	mov	r2, r3
 8007a02:	4601      	mov	r1, r0
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 ffbd 	bl	8008984 <__pow5mult>
 8007a0a:	9b07      	ldr	r3, [sp, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	4606      	mov	r6, r0
 8007a10:	dd7a      	ble.n	8007b08 <_dtoa_r+0x8d0>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	6933      	ldr	r3, [r6, #16]
 8007a18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a1c:	6918      	ldr	r0, [r3, #16]
 8007a1e:	f000 fea3 	bl	8008768 <__hi0bits>
 8007a22:	f1c0 0020 	rsb	r0, r0, #32
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	4418      	add	r0, r3
 8007a2a:	f010 001f 	ands.w	r0, r0, #31
 8007a2e:	f000 8094 	beq.w	8007b5a <_dtoa_r+0x922>
 8007a32:	f1c0 0320 	rsb	r3, r0, #32
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	f340 8085 	ble.w	8007b46 <_dtoa_r+0x90e>
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	f1c0 001c 	rsb	r0, r0, #28
 8007a42:	4403      	add	r3, r0
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	4403      	add	r3, r0
 8007a4a:	4405      	add	r5, r0
 8007a4c:	9306      	str	r3, [sp, #24]
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd05      	ble.n	8007a60 <_dtoa_r+0x828>
 8007a54:	4651      	mov	r1, sl
 8007a56:	461a      	mov	r2, r3
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 ffed 	bl	8008a38 <__lshift>
 8007a5e:	4682      	mov	sl, r0
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dd05      	ble.n	8007a72 <_dtoa_r+0x83a>
 8007a66:	4631      	mov	r1, r6
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 ffe4 	bl	8008a38 <__lshift>
 8007a70:	4606      	mov	r6, r0
 8007a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d072      	beq.n	8007b5e <_dtoa_r+0x926>
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	f001 f848 	bl	8008b10 <__mcmp>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	da6c      	bge.n	8007b5e <_dtoa_r+0x926>
 8007a84:	2300      	movs	r3, #0
 8007a86:	4651      	mov	r1, sl
 8007a88:	220a      	movs	r2, #10
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 fe26 	bl	80086dc <__multadd>
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007a96:	4682      	mov	sl, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 81b0 	beq.w	8007dfe <_dtoa_r+0xbc6>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fe19 	bl	80086dc <__multadd>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	4607      	mov	r7, r0
 8007ab0:	f300 8096 	bgt.w	8007be0 <_dtoa_r+0x9a8>
 8007ab4:	9b07      	ldr	r3, [sp, #28]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	dc59      	bgt.n	8007b6e <_dtoa_r+0x936>
 8007aba:	e091      	b.n	8007be0 <_dtoa_r+0x9a8>
 8007abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ac2:	e758      	b.n	8007976 <_dtoa_r+0x73e>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	1e5e      	subs	r6, r3, #1
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	bfbf      	itttt	lt
 8007ace:	9b08      	ldrlt	r3, [sp, #32]
 8007ad0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ad2:	9608      	strlt	r6, [sp, #32]
 8007ad4:	1af3      	sublt	r3, r6, r3
 8007ad6:	bfb4      	ite	lt
 8007ad8:	18d2      	addlt	r2, r2, r3
 8007ada:	1b9e      	subge	r6, r3, r6
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	bfbc      	itt	lt
 8007ae0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007ae2:	2600      	movlt	r6, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfb7      	itett	lt
 8007ae8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007aec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007af0:	1a9d      	sublt	r5, r3, r2
 8007af2:	2300      	movlt	r3, #0
 8007af4:	e741      	b.n	800797a <_dtoa_r+0x742>
 8007af6:	9e08      	ldr	r6, [sp, #32]
 8007af8:	9d05      	ldr	r5, [sp, #20]
 8007afa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007afc:	e748      	b.n	8007990 <_dtoa_r+0x758>
 8007afe:	9a08      	ldr	r2, [sp, #32]
 8007b00:	e770      	b.n	80079e4 <_dtoa_r+0x7ac>
 8007b02:	9b07      	ldr	r3, [sp, #28]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	dc19      	bgt.n	8007b3c <_dtoa_r+0x904>
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	b9bb      	cbnz	r3, 8007b3c <_dtoa_r+0x904>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b12:	b99b      	cbnz	r3, 8007b3c <_dtoa_r+0x904>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b1a:	0d1b      	lsrs	r3, r3, #20
 8007b1c:	051b      	lsls	r3, r3, #20
 8007b1e:	b183      	cbz	r3, 8007b42 <_dtoa_r+0x90a>
 8007b20:	9b05      	ldr	r3, [sp, #20]
 8007b22:	3301      	adds	r3, #1
 8007b24:	9305      	str	r3, [sp, #20]
 8007b26:	9b06      	ldr	r3, [sp, #24]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	9306      	str	r3, [sp, #24]
 8007b2c:	f04f 0801 	mov.w	r8, #1
 8007b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f47f af6f 	bne.w	8007a16 <_dtoa_r+0x7de>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e774      	b.n	8007a26 <_dtoa_r+0x7ee>
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	e7f6      	b.n	8007b30 <_dtoa_r+0x8f8>
 8007b42:	4698      	mov	r8, r3
 8007b44:	e7f4      	b.n	8007b30 <_dtoa_r+0x8f8>
 8007b46:	d082      	beq.n	8007a4e <_dtoa_r+0x816>
 8007b48:	9a05      	ldr	r2, [sp, #20]
 8007b4a:	331c      	adds	r3, #28
 8007b4c:	441a      	add	r2, r3
 8007b4e:	9205      	str	r2, [sp, #20]
 8007b50:	9a06      	ldr	r2, [sp, #24]
 8007b52:	441a      	add	r2, r3
 8007b54:	441d      	add	r5, r3
 8007b56:	9206      	str	r2, [sp, #24]
 8007b58:	e779      	b.n	8007a4e <_dtoa_r+0x816>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	e7f4      	b.n	8007b48 <_dtoa_r+0x910>
 8007b5e:	9b04      	ldr	r3, [sp, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dc37      	bgt.n	8007bd4 <_dtoa_r+0x99c>
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	dd34      	ble.n	8007bd4 <_dtoa_r+0x99c>
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	b963      	cbnz	r3, 8007b8c <_dtoa_r+0x954>
 8007b72:	4631      	mov	r1, r6
 8007b74:	2205      	movs	r2, #5
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fdb0 	bl	80086dc <__multadd>
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	4606      	mov	r6, r0
 8007b80:	4650      	mov	r0, sl
 8007b82:	f000 ffc5 	bl	8008b10 <__mcmp>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f73f adbb 	bgt.w	8007702 <_dtoa_r+0x4ca>
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8e:	9d00      	ldr	r5, [sp, #0]
 8007b90:	ea6f 0b03 	mvn.w	fp, r3
 8007b94:	f04f 0800 	mov.w	r8, #0
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fd7c 	bl	8008698 <_Bfree>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	f43f aeab 	beq.w	80078fc <_dtoa_r+0x6c4>
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	d005      	beq.n	8007bb8 <_dtoa_r+0x980>
 8007bac:	45b8      	cmp	r8, r7
 8007bae:	d003      	beq.n	8007bb8 <_dtoa_r+0x980>
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 fd70 	bl	8008698 <_Bfree>
 8007bb8:	4639      	mov	r1, r7
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fd6c 	bl	8008698 <_Bfree>
 8007bc0:	e69c      	b.n	80078fc <_dtoa_r+0x6c4>
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	4637      	mov	r7, r6
 8007bc6:	e7e1      	b.n	8007b8c <_dtoa_r+0x954>
 8007bc8:	46bb      	mov	fp, r7
 8007bca:	4637      	mov	r7, r6
 8007bcc:	e599      	b.n	8007702 <_dtoa_r+0x4ca>
 8007bce:	bf00      	nop
 8007bd0:	40240000 	.word	0x40240000
 8007bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 80c8 	beq.w	8007d6c <_dtoa_r+0xb34>
 8007bdc:	9b04      	ldr	r3, [sp, #16]
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	dd05      	ble.n	8007bf0 <_dtoa_r+0x9b8>
 8007be4:	4639      	mov	r1, r7
 8007be6:	462a      	mov	r2, r5
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 ff25 	bl	8008a38 <__lshift>
 8007bee:	4607      	mov	r7, r0
 8007bf0:	f1b8 0f00 	cmp.w	r8, #0
 8007bf4:	d05b      	beq.n	8007cae <_dtoa_r+0xa76>
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fd0d 	bl	8008618 <_Balloc>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <_dtoa_r+0x9d6>
 8007c02:	4b83      	ldr	r3, [pc, #524]	; (8007e10 <_dtoa_r+0xbd8>)
 8007c04:	4602      	mov	r2, r0
 8007c06:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c0a:	f7ff bb2e 	b.w	800726a <_dtoa_r+0x32>
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	3202      	adds	r2, #2
 8007c12:	0092      	lsls	r2, r2, #2
 8007c14:	f107 010c 	add.w	r1, r7, #12
 8007c18:	300c      	adds	r0, #12
 8007c1a:	f7ff fa77 	bl	800710c <memcpy>
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4629      	mov	r1, r5
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 ff08 	bl	8008a38 <__lshift>
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c32:	4413      	add	r3, r2
 8007c34:	9308      	str	r3, [sp, #32]
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	46b8      	mov	r8, r7
 8007c3e:	9306      	str	r3, [sp, #24]
 8007c40:	4607      	mov	r7, r0
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	4631      	mov	r1, r6
 8007c46:	3b01      	subs	r3, #1
 8007c48:	4650      	mov	r0, sl
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	f7ff fa6c 	bl	8007128 <quorem>
 8007c50:	4641      	mov	r1, r8
 8007c52:	9002      	str	r0, [sp, #8]
 8007c54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c58:	4650      	mov	r0, sl
 8007c5a:	f000 ff59 	bl	8008b10 <__mcmp>
 8007c5e:	463a      	mov	r2, r7
 8007c60:	9005      	str	r0, [sp, #20]
 8007c62:	4631      	mov	r1, r6
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 ff6f 	bl	8008b48 <__mdiff>
 8007c6a:	68c2      	ldr	r2, [r0, #12]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	bb02      	cbnz	r2, 8007cb2 <_dtoa_r+0xa7a>
 8007c70:	4601      	mov	r1, r0
 8007c72:	4650      	mov	r0, sl
 8007c74:	f000 ff4c 	bl	8008b10 <__mcmp>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c80:	f000 fd0a 	bl	8008698 <_Bfree>
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c88:	9d04      	ldr	r5, [sp, #16]
 8007c8a:	ea43 0102 	orr.w	r1, r3, r2
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	4319      	orrs	r1, r3
 8007c92:	d110      	bne.n	8007cb6 <_dtoa_r+0xa7e>
 8007c94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c98:	d029      	beq.n	8007cee <_dtoa_r+0xab6>
 8007c9a:	9b05      	ldr	r3, [sp, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd02      	ble.n	8007ca6 <_dtoa_r+0xa6e>
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	f883 9000 	strb.w	r9, [r3]
 8007cac:	e774      	b.n	8007b98 <_dtoa_r+0x960>
 8007cae:	4638      	mov	r0, r7
 8007cb0:	e7ba      	b.n	8007c28 <_dtoa_r+0x9f0>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	e7e1      	b.n	8007c7a <_dtoa_r+0xa42>
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	db04      	blt.n	8007cc6 <_dtoa_r+0xa8e>
 8007cbc:	9907      	ldr	r1, [sp, #28]
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	9906      	ldr	r1, [sp, #24]
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	d120      	bne.n	8007d08 <_dtoa_r+0xad0>
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	dded      	ble.n	8007ca6 <_dtoa_r+0xa6e>
 8007cca:	4651      	mov	r1, sl
 8007ccc:	2201      	movs	r2, #1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 feb2 	bl	8008a38 <__lshift>
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4682      	mov	sl, r0
 8007cd8:	f000 ff1a 	bl	8008b10 <__mcmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	dc03      	bgt.n	8007ce8 <_dtoa_r+0xab0>
 8007ce0:	d1e1      	bne.n	8007ca6 <_dtoa_r+0xa6e>
 8007ce2:	f019 0f01 	tst.w	r9, #1
 8007ce6:	d0de      	beq.n	8007ca6 <_dtoa_r+0xa6e>
 8007ce8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cec:	d1d8      	bne.n	8007ca0 <_dtoa_r+0xa68>
 8007cee:	9a01      	ldr	r2, [sp, #4]
 8007cf0:	2339      	movs	r3, #57	; 0x39
 8007cf2:	7013      	strb	r3, [r2, #0]
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	461d      	mov	r5, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cfe:	2a39      	cmp	r2, #57	; 0x39
 8007d00:	d06c      	beq.n	8007ddc <_dtoa_r+0xba4>
 8007d02:	3201      	adds	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e747      	b.n	8007b98 <_dtoa_r+0x960>
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	dd07      	ble.n	8007d1c <_dtoa_r+0xae4>
 8007d0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d10:	d0ed      	beq.n	8007cee <_dtoa_r+0xab6>
 8007d12:	9a01      	ldr	r2, [sp, #4]
 8007d14:	f109 0301 	add.w	r3, r9, #1
 8007d18:	7013      	strb	r3, [r2, #0]
 8007d1a:	e73d      	b.n	8007b98 <_dtoa_r+0x960>
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	9a08      	ldr	r2, [sp, #32]
 8007d20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d043      	beq.n	8007db0 <_dtoa_r+0xb78>
 8007d28:	4651      	mov	r1, sl
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 fcd4 	bl	80086dc <__multadd>
 8007d34:	45b8      	cmp	r8, r7
 8007d36:	4682      	mov	sl, r0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f04f 020a 	mov.w	r2, #10
 8007d40:	4641      	mov	r1, r8
 8007d42:	4620      	mov	r0, r4
 8007d44:	d107      	bne.n	8007d56 <_dtoa_r+0xb1e>
 8007d46:	f000 fcc9 	bl	80086dc <__multadd>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	e775      	b.n	8007c42 <_dtoa_r+0xa0a>
 8007d56:	f000 fcc1 	bl	80086dc <__multadd>
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	220a      	movs	r2, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fcba 	bl	80086dc <__multadd>
 8007d68:	4607      	mov	r7, r0
 8007d6a:	e7f0      	b.n	8007d4e <_dtoa_r+0xb16>
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	9d00      	ldr	r5, [sp, #0]
 8007d72:	4631      	mov	r1, r6
 8007d74:	4650      	mov	r0, sl
 8007d76:	f7ff f9d7 	bl	8007128 <quorem>
 8007d7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	f805 9b01 	strb.w	r9, [r5], #1
 8007d84:	1aea      	subs	r2, r5, r3
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	dd07      	ble.n	8007d9c <_dtoa_r+0xb64>
 8007d8c:	4651      	mov	r1, sl
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fca2 	bl	80086dc <__multadd>
 8007d98:	4682      	mov	sl, r0
 8007d9a:	e7ea      	b.n	8007d72 <_dtoa_r+0xb3a>
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfc8      	it	gt
 8007da2:	461d      	movgt	r5, r3
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	bfd8      	it	le
 8007da8:	2501      	movle	r5, #1
 8007daa:	441d      	add	r5, r3
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	4651      	mov	r1, sl
 8007db2:	2201      	movs	r2, #1
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fe3f 	bl	8008a38 <__lshift>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	f000 fea7 	bl	8008b10 <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	dc96      	bgt.n	8007cf4 <_dtoa_r+0xabc>
 8007dc6:	d102      	bne.n	8007dce <_dtoa_r+0xb96>
 8007dc8:	f019 0f01 	tst.w	r9, #1
 8007dcc:	d192      	bne.n	8007cf4 <_dtoa_r+0xabc>
 8007dce:	462b      	mov	r3, r5
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd6:	2a30      	cmp	r2, #48	; 0x30
 8007dd8:	d0fa      	beq.n	8007dd0 <_dtoa_r+0xb98>
 8007dda:	e6dd      	b.n	8007b98 <_dtoa_r+0x960>
 8007ddc:	9a00      	ldr	r2, [sp, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d189      	bne.n	8007cf6 <_dtoa_r+0xabe>
 8007de2:	f10b 0b01 	add.w	fp, fp, #1
 8007de6:	2331      	movs	r3, #49	; 0x31
 8007de8:	e796      	b.n	8007d18 <_dtoa_r+0xae0>
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <_dtoa_r+0xbdc>)
 8007dec:	f7ff ba99 	b.w	8007322 <_dtoa_r+0xea>
 8007df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f47f aa6d 	bne.w	80072d2 <_dtoa_r+0x9a>
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <_dtoa_r+0xbe0>)
 8007dfa:	f7ff ba92 	b.w	8007322 <_dtoa_r+0xea>
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dcb5      	bgt.n	8007d70 <_dtoa_r+0xb38>
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	f73f aeb1 	bgt.w	8007b6e <_dtoa_r+0x936>
 8007e0c:	e7b0      	b.n	8007d70 <_dtoa_r+0xb38>
 8007e0e:	bf00      	nop
 8007e10:	0800966c 	.word	0x0800966c
 8007e14:	080095cc 	.word	0x080095cc
 8007e18:	080095f0 	.word	0x080095f0

08007e1c <__ssputs_r>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	688e      	ldr	r6, [r1, #8]
 8007e22:	461f      	mov	r7, r3
 8007e24:	42be      	cmp	r6, r7
 8007e26:	680b      	ldr	r3, [r1, #0]
 8007e28:	4682      	mov	sl, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	4690      	mov	r8, r2
 8007e2e:	d82c      	bhi.n	8007e8a <__ssputs_r+0x6e>
 8007e30:	898a      	ldrh	r2, [r1, #12]
 8007e32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e36:	d026      	beq.n	8007e86 <__ssputs_r+0x6a>
 8007e38:	6965      	ldr	r5, [r4, #20]
 8007e3a:	6909      	ldr	r1, [r1, #16]
 8007e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e40:	eba3 0901 	sub.w	r9, r3, r1
 8007e44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e48:	1c7b      	adds	r3, r7, #1
 8007e4a:	444b      	add	r3, r9
 8007e4c:	106d      	asrs	r5, r5, #1
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	bf38      	it	cc
 8007e52:	461d      	movcc	r5, r3
 8007e54:	0553      	lsls	r3, r2, #21
 8007e56:	d527      	bpl.n	8007ea8 <__ssputs_r+0x8c>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f000 faa3 	bl	80083a4 <_malloc_r>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b360      	cbz	r0, 8007ebc <__ssputs_r+0xa0>
 8007e62:	6921      	ldr	r1, [r4, #16]
 8007e64:	464a      	mov	r2, r9
 8007e66:	f7ff f951 	bl	800710c <memcpy>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	6126      	str	r6, [r4, #16]
 8007e78:	6165      	str	r5, [r4, #20]
 8007e7a:	444e      	add	r6, r9
 8007e7c:	eba5 0509 	sub.w	r5, r5, r9
 8007e80:	6026      	str	r6, [r4, #0]
 8007e82:	60a5      	str	r5, [r4, #8]
 8007e84:	463e      	mov	r6, r7
 8007e86:	42be      	cmp	r6, r7
 8007e88:	d900      	bls.n	8007e8c <__ssputs_r+0x70>
 8007e8a:	463e      	mov	r6, r7
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	4632      	mov	r2, r6
 8007e90:	4641      	mov	r1, r8
 8007e92:	f001 f8a7 	bl	8008fe4 <memmove>
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	1b9b      	subs	r3, r3, r6
 8007e9a:	60a3      	str	r3, [r4, #8]
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	4433      	add	r3, r6
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	f000 ff74 	bl	8008d96 <_realloc_r>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d1e0      	bne.n	8007e76 <__ssputs_r+0x5a>
 8007eb4:	6921      	ldr	r1, [r4, #16]
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f001 f95a 	bl	8009170 <_free_r>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	f8ca 3000 	str.w	r3, [sl]
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ece:	e7e9      	b.n	8007ea4 <__ssputs_r+0x88>

08007ed0 <_svfiprintf_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	4698      	mov	r8, r3
 8007ed6:	898b      	ldrh	r3, [r1, #12]
 8007ed8:	061b      	lsls	r3, r3, #24
 8007eda:	b09d      	sub	sp, #116	; 0x74
 8007edc:	4607      	mov	r7, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	d50e      	bpl.n	8007f02 <_svfiprintf_r+0x32>
 8007ee4:	690b      	ldr	r3, [r1, #16]
 8007ee6:	b963      	cbnz	r3, 8007f02 <_svfiprintf_r+0x32>
 8007ee8:	2140      	movs	r1, #64	; 0x40
 8007eea:	f000 fa5b 	bl	80083a4 <_malloc_r>
 8007eee:	6028      	str	r0, [r5, #0]
 8007ef0:	6128      	str	r0, [r5, #16]
 8007ef2:	b920      	cbnz	r0, 8007efe <_svfiprintf_r+0x2e>
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007efc:	e0d0      	b.n	80080a0 <_svfiprintf_r+0x1d0>
 8007efe:	2340      	movs	r3, #64	; 0x40
 8007f00:	616b      	str	r3, [r5, #20]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	2320      	movs	r3, #32
 8007f08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f10:	2330      	movs	r3, #48	; 0x30
 8007f12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080b8 <_svfiprintf_r+0x1e8>
 8007f16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f1a:	f04f 0901 	mov.w	r9, #1
 8007f1e:	4623      	mov	r3, r4
 8007f20:	469a      	mov	sl, r3
 8007f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f26:	b10a      	cbz	r2, 8007f2c <_svfiprintf_r+0x5c>
 8007f28:	2a25      	cmp	r2, #37	; 0x25
 8007f2a:	d1f9      	bne.n	8007f20 <_svfiprintf_r+0x50>
 8007f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f30:	d00b      	beq.n	8007f4a <_svfiprintf_r+0x7a>
 8007f32:	465b      	mov	r3, fp
 8007f34:	4622      	mov	r2, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff ff6f 	bl	8007e1c <__ssputs_r>
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f000 80a9 	beq.w	8008096 <_svfiprintf_r+0x1c6>
 8007f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f46:	445a      	add	r2, fp
 8007f48:	9209      	str	r2, [sp, #36]	; 0x24
 8007f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80a1 	beq.w	8008096 <_svfiprintf_r+0x1c6>
 8007f54:	2300      	movs	r3, #0
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f5e:	f10a 0a01 	add.w	sl, sl, #1
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	9307      	str	r3, [sp, #28]
 8007f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f6c:	4654      	mov	r4, sl
 8007f6e:	2205      	movs	r2, #5
 8007f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f74:	4850      	ldr	r0, [pc, #320]	; (80080b8 <_svfiprintf_r+0x1e8>)
 8007f76:	f7f8 f92b 	bl	80001d0 <memchr>
 8007f7a:	9a04      	ldr	r2, [sp, #16]
 8007f7c:	b9d8      	cbnz	r0, 8007fb6 <_svfiprintf_r+0xe6>
 8007f7e:	06d0      	lsls	r0, r2, #27
 8007f80:	bf44      	itt	mi
 8007f82:	2320      	movmi	r3, #32
 8007f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f88:	0711      	lsls	r1, r2, #28
 8007f8a:	bf44      	itt	mi
 8007f8c:	232b      	movmi	r3, #43	; 0x2b
 8007f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f92:	f89a 3000 	ldrb.w	r3, [sl]
 8007f96:	2b2a      	cmp	r3, #42	; 0x2a
 8007f98:	d015      	beq.n	8007fc6 <_svfiprintf_r+0xf6>
 8007f9a:	9a07      	ldr	r2, [sp, #28]
 8007f9c:	4654      	mov	r4, sl
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f04f 0c0a 	mov.w	ip, #10
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007faa:	3b30      	subs	r3, #48	; 0x30
 8007fac:	2b09      	cmp	r3, #9
 8007fae:	d94d      	bls.n	800804c <_svfiprintf_r+0x17c>
 8007fb0:	b1b0      	cbz	r0, 8007fe0 <_svfiprintf_r+0x110>
 8007fb2:	9207      	str	r2, [sp, #28]
 8007fb4:	e014      	b.n	8007fe0 <_svfiprintf_r+0x110>
 8007fb6:	eba0 0308 	sub.w	r3, r0, r8
 8007fba:	fa09 f303 	lsl.w	r3, r9, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	46a2      	mov	sl, r4
 8007fc4:	e7d2      	b.n	8007f6c <_svfiprintf_r+0x9c>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	1d19      	adds	r1, r3, #4
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	9103      	str	r1, [sp, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bfbb      	ittet	lt
 8007fd2:	425b      	neglt	r3, r3
 8007fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd8:	9307      	strge	r3, [sp, #28]
 8007fda:	9307      	strlt	r3, [sp, #28]
 8007fdc:	bfb8      	it	lt
 8007fde:	9204      	strlt	r2, [sp, #16]
 8007fe0:	7823      	ldrb	r3, [r4, #0]
 8007fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe4:	d10c      	bne.n	8008000 <_svfiprintf_r+0x130>
 8007fe6:	7863      	ldrb	r3, [r4, #1]
 8007fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fea:	d134      	bne.n	8008056 <_svfiprintf_r+0x186>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	9203      	str	r2, [sp, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfb8      	it	lt
 8007ff8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ffc:	3402      	adds	r4, #2
 8007ffe:	9305      	str	r3, [sp, #20]
 8008000:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80080c8 <_svfiprintf_r+0x1f8>
 8008004:	7821      	ldrb	r1, [r4, #0]
 8008006:	2203      	movs	r2, #3
 8008008:	4650      	mov	r0, sl
 800800a:	f7f8 f8e1 	bl	80001d0 <memchr>
 800800e:	b138      	cbz	r0, 8008020 <_svfiprintf_r+0x150>
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	eba0 000a 	sub.w	r0, r0, sl
 8008016:	2240      	movs	r2, #64	; 0x40
 8008018:	4082      	lsls	r2, r0
 800801a:	4313      	orrs	r3, r2
 800801c:	3401      	adds	r4, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008024:	4825      	ldr	r0, [pc, #148]	; (80080bc <_svfiprintf_r+0x1ec>)
 8008026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800802a:	2206      	movs	r2, #6
 800802c:	f7f8 f8d0 	bl	80001d0 <memchr>
 8008030:	2800      	cmp	r0, #0
 8008032:	d038      	beq.n	80080a6 <_svfiprintf_r+0x1d6>
 8008034:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <_svfiprintf_r+0x1f0>)
 8008036:	bb1b      	cbnz	r3, 8008080 <_svfiprintf_r+0x1b0>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	3307      	adds	r3, #7
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	3308      	adds	r3, #8
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008046:	4433      	add	r3, r6
 8008048:	9309      	str	r3, [sp, #36]	; 0x24
 800804a:	e768      	b.n	8007f1e <_svfiprintf_r+0x4e>
 800804c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008050:	460c      	mov	r4, r1
 8008052:	2001      	movs	r0, #1
 8008054:	e7a6      	b.n	8007fa4 <_svfiprintf_r+0xd4>
 8008056:	2300      	movs	r3, #0
 8008058:	3401      	adds	r4, #1
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	4619      	mov	r1, r3
 800805e:	f04f 0c0a 	mov.w	ip, #10
 8008062:	4620      	mov	r0, r4
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_svfiprintf_r+0x1a6>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c6      	beq.n	8008000 <_svfiprintf_r+0x130>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c4      	b.n	8008000 <_svfiprintf_r+0x130>
 8008076:	fb0c 2101 	mla	r1, ip, r1, r2
 800807a:	4604      	mov	r4, r0
 800807c:	2301      	movs	r3, #1
 800807e:	e7f0      	b.n	8008062 <_svfiprintf_r+0x192>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	462a      	mov	r2, r5
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <_svfiprintf_r+0x1f4>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4638      	mov	r0, r7
 800808c:	f7fe fb02 	bl	8006694 <_printf_float>
 8008090:	1c42      	adds	r2, r0, #1
 8008092:	4606      	mov	r6, r0
 8008094:	d1d6      	bne.n	8008044 <_svfiprintf_r+0x174>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	065b      	lsls	r3, r3, #25
 800809a:	f53f af2d 	bmi.w	8007ef8 <_svfiprintf_r+0x28>
 800809e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a0:	b01d      	add	sp, #116	; 0x74
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	ab03      	add	r3, sp, #12
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	462a      	mov	r2, r5
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <_svfiprintf_r+0x1f4>)
 80080ae:	a904      	add	r1, sp, #16
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7fe fd93 	bl	8006bdc <_printf_i>
 80080b6:	e7eb      	b.n	8008090 <_svfiprintf_r+0x1c0>
 80080b8:	0800967d 	.word	0x0800967d
 80080bc:	08009687 	.word	0x08009687
 80080c0:	08006695 	.word	0x08006695
 80080c4:	08007e1d 	.word	0x08007e1d
 80080c8:	08009683 	.word	0x08009683

080080cc <__sfputc_r>:
 80080cc:	6893      	ldr	r3, [r2, #8]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	b410      	push	{r4}
 80080d4:	6093      	str	r3, [r2, #8]
 80080d6:	da08      	bge.n	80080ea <__sfputc_r+0x1e>
 80080d8:	6994      	ldr	r4, [r2, #24]
 80080da:	42a3      	cmp	r3, r4
 80080dc:	db01      	blt.n	80080e2 <__sfputc_r+0x16>
 80080de:	290a      	cmp	r1, #10
 80080e0:	d103      	bne.n	80080ea <__sfputc_r+0x1e>
 80080e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e6:	f000 be85 	b.w	8008df4 <__swbuf_r>
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	1c58      	adds	r0, r3, #1
 80080ee:	6010      	str	r0, [r2, #0]
 80080f0:	7019      	strb	r1, [r3, #0]
 80080f2:	4608      	mov	r0, r1
 80080f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <__sfputs_r>:
 80080fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	4614      	mov	r4, r2
 8008102:	18d5      	adds	r5, r2, r3
 8008104:	42ac      	cmp	r4, r5
 8008106:	d101      	bne.n	800810c <__sfputs_r+0x12>
 8008108:	2000      	movs	r0, #0
 800810a:	e007      	b.n	800811c <__sfputs_r+0x22>
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	463a      	mov	r2, r7
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ffda 	bl	80080cc <__sfputc_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d1f3      	bne.n	8008104 <__sfputs_r+0xa>
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008120 <_vfiprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	460d      	mov	r5, r1
 8008126:	b09d      	sub	sp, #116	; 0x74
 8008128:	4614      	mov	r4, r2
 800812a:	4698      	mov	r8, r3
 800812c:	4606      	mov	r6, r0
 800812e:	b118      	cbz	r0, 8008138 <_vfiprintf_r+0x18>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <_vfiprintf_r+0x18>
 8008134:	f7fe ff0e 	bl	8006f54 <__sinit>
 8008138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813a:	07d9      	lsls	r1, r3, #31
 800813c:	d405      	bmi.n	800814a <_vfiprintf_r+0x2a>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	059a      	lsls	r2, r3, #22
 8008142:	d402      	bmi.n	800814a <_vfiprintf_r+0x2a>
 8008144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008146:	f7fe ffdf 	bl	8007108 <__retarget_lock_acquire_recursive>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	d501      	bpl.n	8008154 <_vfiprintf_r+0x34>
 8008150:	692b      	ldr	r3, [r5, #16]
 8008152:	b99b      	cbnz	r3, 800817c <_vfiprintf_r+0x5c>
 8008154:	4629      	mov	r1, r5
 8008156:	4630      	mov	r0, r6
 8008158:	f000 fe8a 	bl	8008e70 <__swsetup_r>
 800815c:	b170      	cbz	r0, 800817c <_vfiprintf_r+0x5c>
 800815e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008160:	07dc      	lsls	r4, r3, #31
 8008162:	d504      	bpl.n	800816e <_vfiprintf_r+0x4e>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008168:	b01d      	add	sp, #116	; 0x74
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	0598      	lsls	r0, r3, #22
 8008172:	d4f7      	bmi.n	8008164 <_vfiprintf_r+0x44>
 8008174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008176:	f7fe ffc8 	bl	800710a <__retarget_lock_release_recursive>
 800817a:	e7f3      	b.n	8008164 <_vfiprintf_r+0x44>
 800817c:	2300      	movs	r3, #0
 800817e:	9309      	str	r3, [sp, #36]	; 0x24
 8008180:	2320      	movs	r3, #32
 8008182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008186:	f8cd 800c 	str.w	r8, [sp, #12]
 800818a:	2330      	movs	r3, #48	; 0x30
 800818c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008340 <_vfiprintf_r+0x220>
 8008190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008194:	f04f 0901 	mov.w	r9, #1
 8008198:	4623      	mov	r3, r4
 800819a:	469a      	mov	sl, r3
 800819c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a0:	b10a      	cbz	r2, 80081a6 <_vfiprintf_r+0x86>
 80081a2:	2a25      	cmp	r2, #37	; 0x25
 80081a4:	d1f9      	bne.n	800819a <_vfiprintf_r+0x7a>
 80081a6:	ebba 0b04 	subs.w	fp, sl, r4
 80081aa:	d00b      	beq.n	80081c4 <_vfiprintf_r+0xa4>
 80081ac:	465b      	mov	r3, fp
 80081ae:	4622      	mov	r2, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff ffa1 	bl	80080fa <__sfputs_r>
 80081b8:	3001      	adds	r0, #1
 80081ba:	f000 80a9 	beq.w	8008310 <_vfiprintf_r+0x1f0>
 80081be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c0:	445a      	add	r2, fp
 80081c2:	9209      	str	r2, [sp, #36]	; 0x24
 80081c4:	f89a 3000 	ldrb.w	r3, [sl]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80a1 	beq.w	8008310 <_vfiprintf_r+0x1f0>
 80081ce:	2300      	movs	r3, #0
 80081d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d8:	f10a 0a01 	add.w	sl, sl, #1
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e4:	931a      	str	r3, [sp, #104]	; 0x68
 80081e6:	4654      	mov	r4, sl
 80081e8:	2205      	movs	r2, #5
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	4854      	ldr	r0, [pc, #336]	; (8008340 <_vfiprintf_r+0x220>)
 80081f0:	f7f7 ffee 	bl	80001d0 <memchr>
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	b9d8      	cbnz	r0, 8008230 <_vfiprintf_r+0x110>
 80081f8:	06d1      	lsls	r1, r2, #27
 80081fa:	bf44      	itt	mi
 80081fc:	2320      	movmi	r3, #32
 80081fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008202:	0713      	lsls	r3, r2, #28
 8008204:	bf44      	itt	mi
 8008206:	232b      	movmi	r3, #43	; 0x2b
 8008208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820c:	f89a 3000 	ldrb.w	r3, [sl]
 8008210:	2b2a      	cmp	r3, #42	; 0x2a
 8008212:	d015      	beq.n	8008240 <_vfiprintf_r+0x120>
 8008214:	9a07      	ldr	r2, [sp, #28]
 8008216:	4654      	mov	r4, sl
 8008218:	2000      	movs	r0, #0
 800821a:	f04f 0c0a 	mov.w	ip, #10
 800821e:	4621      	mov	r1, r4
 8008220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008224:	3b30      	subs	r3, #48	; 0x30
 8008226:	2b09      	cmp	r3, #9
 8008228:	d94d      	bls.n	80082c6 <_vfiprintf_r+0x1a6>
 800822a:	b1b0      	cbz	r0, 800825a <_vfiprintf_r+0x13a>
 800822c:	9207      	str	r2, [sp, #28]
 800822e:	e014      	b.n	800825a <_vfiprintf_r+0x13a>
 8008230:	eba0 0308 	sub.w	r3, r0, r8
 8008234:	fa09 f303 	lsl.w	r3, r9, r3
 8008238:	4313      	orrs	r3, r2
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	46a2      	mov	sl, r4
 800823e:	e7d2      	b.n	80081e6 <_vfiprintf_r+0xc6>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d19      	adds	r1, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9103      	str	r1, [sp, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfbb      	ittet	lt
 800824c:	425b      	neglt	r3, r3
 800824e:	f042 0202 	orrlt.w	r2, r2, #2
 8008252:	9307      	strge	r3, [sp, #28]
 8008254:	9307      	strlt	r3, [sp, #28]
 8008256:	bfb8      	it	lt
 8008258:	9204      	strlt	r2, [sp, #16]
 800825a:	7823      	ldrb	r3, [r4, #0]
 800825c:	2b2e      	cmp	r3, #46	; 0x2e
 800825e:	d10c      	bne.n	800827a <_vfiprintf_r+0x15a>
 8008260:	7863      	ldrb	r3, [r4, #1]
 8008262:	2b2a      	cmp	r3, #42	; 0x2a
 8008264:	d134      	bne.n	80082d0 <_vfiprintf_r+0x1b0>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	1d1a      	adds	r2, r3, #4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	9203      	str	r2, [sp, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008276:	3402      	adds	r4, #2
 8008278:	9305      	str	r3, [sp, #20]
 800827a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008350 <_vfiprintf_r+0x230>
 800827e:	7821      	ldrb	r1, [r4, #0]
 8008280:	2203      	movs	r2, #3
 8008282:	4650      	mov	r0, sl
 8008284:	f7f7 ffa4 	bl	80001d0 <memchr>
 8008288:	b138      	cbz	r0, 800829a <_vfiprintf_r+0x17a>
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	eba0 000a 	sub.w	r0, r0, sl
 8008290:	2240      	movs	r2, #64	; 0x40
 8008292:	4082      	lsls	r2, r0
 8008294:	4313      	orrs	r3, r2
 8008296:	3401      	adds	r4, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829e:	4829      	ldr	r0, [pc, #164]	; (8008344 <_vfiprintf_r+0x224>)
 80082a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a4:	2206      	movs	r2, #6
 80082a6:	f7f7 ff93 	bl	80001d0 <memchr>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d03f      	beq.n	800832e <_vfiprintf_r+0x20e>
 80082ae:	4b26      	ldr	r3, [pc, #152]	; (8008348 <_vfiprintf_r+0x228>)
 80082b0:	bb1b      	cbnz	r3, 80082fa <_vfiprintf_r+0x1da>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	3307      	adds	r3, #7
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	3308      	adds	r3, #8
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	443b      	add	r3, r7
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	e768      	b.n	8008198 <_vfiprintf_r+0x78>
 80082c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ca:	460c      	mov	r4, r1
 80082cc:	2001      	movs	r0, #1
 80082ce:	e7a6      	b.n	800821e <_vfiprintf_r+0xfe>
 80082d0:	2300      	movs	r3, #0
 80082d2:	3401      	adds	r4, #1
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	4619      	mov	r1, r3
 80082d8:	f04f 0c0a 	mov.w	ip, #10
 80082dc:	4620      	mov	r0, r4
 80082de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e2:	3a30      	subs	r2, #48	; 0x30
 80082e4:	2a09      	cmp	r2, #9
 80082e6:	d903      	bls.n	80082f0 <_vfiprintf_r+0x1d0>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0c6      	beq.n	800827a <_vfiprintf_r+0x15a>
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	e7c4      	b.n	800827a <_vfiprintf_r+0x15a>
 80082f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f4:	4604      	mov	r4, r0
 80082f6:	2301      	movs	r3, #1
 80082f8:	e7f0      	b.n	80082dc <_vfiprintf_r+0x1bc>
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <_vfiprintf_r+0x22c>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	4630      	mov	r0, r6
 8008306:	f7fe f9c5 	bl	8006694 <_printf_float>
 800830a:	4607      	mov	r7, r0
 800830c:	1c78      	adds	r0, r7, #1
 800830e:	d1d6      	bne.n	80082be <_vfiprintf_r+0x19e>
 8008310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d405      	bmi.n	8008322 <_vfiprintf_r+0x202>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d402      	bmi.n	8008322 <_vfiprintf_r+0x202>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7fe fef4 	bl	800710a <__retarget_lock_release_recursive>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	065b      	lsls	r3, r3, #25
 8008326:	f53f af1d 	bmi.w	8008164 <_vfiprintf_r+0x44>
 800832a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832c:	e71c      	b.n	8008168 <_vfiprintf_r+0x48>
 800832e:	ab03      	add	r3, sp, #12
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	462a      	mov	r2, r5
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <_vfiprintf_r+0x22c>)
 8008336:	a904      	add	r1, sp, #16
 8008338:	4630      	mov	r0, r6
 800833a:	f7fe fc4f 	bl	8006bdc <_printf_i>
 800833e:	e7e4      	b.n	800830a <_vfiprintf_r+0x1ea>
 8008340:	0800967d 	.word	0x0800967d
 8008344:	08009687 	.word	0x08009687
 8008348:	08006695 	.word	0x08006695
 800834c:	080080fb 	.word	0x080080fb
 8008350:	08009683 	.word	0x08009683

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 b823 	b.w	80083a4 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	20000098 	.word	0x20000098

08008364 <sbrk_aligned>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4e0e      	ldr	r6, [pc, #56]	; (80083a0 <sbrk_aligned+0x3c>)
 8008368:	460c      	mov	r4, r1
 800836a:	6831      	ldr	r1, [r6, #0]
 800836c:	4605      	mov	r5, r0
 800836e:	b911      	cbnz	r1, 8008376 <sbrk_aligned+0x12>
 8008370:	f000 fea8 	bl	80090c4 <_sbrk_r>
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f000 fea3 	bl	80090c4 <_sbrk_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d00a      	beq.n	8008398 <sbrk_aligned+0x34>
 8008382:	1cc4      	adds	r4, r0, #3
 8008384:	f024 0403 	bic.w	r4, r4, #3
 8008388:	42a0      	cmp	r0, r4
 800838a:	d007      	beq.n	800839c <sbrk_aligned+0x38>
 800838c:	1a21      	subs	r1, r4, r0
 800838e:	4628      	mov	r0, r5
 8008390:	f000 fe98 	bl	80090c4 <_sbrk_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d101      	bne.n	800839c <sbrk_aligned+0x38>
 8008398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800839c:	4620      	mov	r0, r4
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	20000654 	.word	0x20000654

080083a4 <_malloc_r>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	1ccd      	adds	r5, r1, #3
 80083aa:	f025 0503 	bic.w	r5, r5, #3
 80083ae:	3508      	adds	r5, #8
 80083b0:	2d0c      	cmp	r5, #12
 80083b2:	bf38      	it	cc
 80083b4:	250c      	movcc	r5, #12
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	4607      	mov	r7, r0
 80083ba:	db01      	blt.n	80083c0 <_malloc_r+0x1c>
 80083bc:	42a9      	cmp	r1, r5
 80083be:	d905      	bls.n	80083cc <_malloc_r+0x28>
 80083c0:	230c      	movs	r3, #12
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	2600      	movs	r6, #0
 80083c6:	4630      	mov	r0, r6
 80083c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084a0 <_malloc_r+0xfc>
 80083d0:	f000 f916 	bl	8008600 <__malloc_lock>
 80083d4:	f8d8 3000 	ldr.w	r3, [r8]
 80083d8:	461c      	mov	r4, r3
 80083da:	bb5c      	cbnz	r4, 8008434 <_malloc_r+0x90>
 80083dc:	4629      	mov	r1, r5
 80083de:	4638      	mov	r0, r7
 80083e0:	f7ff ffc0 	bl	8008364 <sbrk_aligned>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	4604      	mov	r4, r0
 80083e8:	d155      	bne.n	8008496 <_malloc_r+0xf2>
 80083ea:	f8d8 4000 	ldr.w	r4, [r8]
 80083ee:	4626      	mov	r6, r4
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	d145      	bne.n	8008480 <_malloc_r+0xdc>
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	d048      	beq.n	800848a <_malloc_r+0xe6>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4631      	mov	r1, r6
 80083fc:	4638      	mov	r0, r7
 80083fe:	eb04 0903 	add.w	r9, r4, r3
 8008402:	f000 fe5f 	bl	80090c4 <_sbrk_r>
 8008406:	4581      	cmp	r9, r0
 8008408:	d13f      	bne.n	800848a <_malloc_r+0xe6>
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	1a6d      	subs	r5, r5, r1
 800840e:	4629      	mov	r1, r5
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ffa7 	bl	8008364 <sbrk_aligned>
 8008416:	3001      	adds	r0, #1
 8008418:	d037      	beq.n	800848a <_malloc_r+0xe6>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	442b      	add	r3, r5
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	f8d8 3000 	ldr.w	r3, [r8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d038      	beq.n	800849a <_malloc_r+0xf6>
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	42a2      	cmp	r2, r4
 800842c:	d12b      	bne.n	8008486 <_malloc_r+0xe2>
 800842e:	2200      	movs	r2, #0
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	e00f      	b.n	8008454 <_malloc_r+0xb0>
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	1b52      	subs	r2, r2, r5
 8008438:	d41f      	bmi.n	800847a <_malloc_r+0xd6>
 800843a:	2a0b      	cmp	r2, #11
 800843c:	d917      	bls.n	800846e <_malloc_r+0xca>
 800843e:	1961      	adds	r1, r4, r5
 8008440:	42a3      	cmp	r3, r4
 8008442:	6025      	str	r5, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	6059      	strne	r1, [r3, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	bf08      	it	eq
 800844c:	f8c8 1000 	streq.w	r1, [r8]
 8008450:	5162      	str	r2, [r4, r5]
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	4638      	mov	r0, r7
 8008456:	f104 060b 	add.w	r6, r4, #11
 800845a:	f000 f8d7 	bl	800860c <__malloc_unlock>
 800845e:	f026 0607 	bic.w	r6, r6, #7
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	1af2      	subs	r2, r6, r3
 8008466:	d0ae      	beq.n	80083c6 <_malloc_r+0x22>
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	50a3      	str	r3, [r4, r2]
 800846c:	e7ab      	b.n	80083c6 <_malloc_r+0x22>
 800846e:	42a3      	cmp	r3, r4
 8008470:	6862      	ldr	r2, [r4, #4]
 8008472:	d1dd      	bne.n	8008430 <_malloc_r+0x8c>
 8008474:	f8c8 2000 	str.w	r2, [r8]
 8008478:	e7ec      	b.n	8008454 <_malloc_r+0xb0>
 800847a:	4623      	mov	r3, r4
 800847c:	6864      	ldr	r4, [r4, #4]
 800847e:	e7ac      	b.n	80083da <_malloc_r+0x36>
 8008480:	4634      	mov	r4, r6
 8008482:	6876      	ldr	r6, [r6, #4]
 8008484:	e7b4      	b.n	80083f0 <_malloc_r+0x4c>
 8008486:	4613      	mov	r3, r2
 8008488:	e7cc      	b.n	8008424 <_malloc_r+0x80>
 800848a:	230c      	movs	r3, #12
 800848c:	603b      	str	r3, [r7, #0]
 800848e:	4638      	mov	r0, r7
 8008490:	f000 f8bc 	bl	800860c <__malloc_unlock>
 8008494:	e797      	b.n	80083c6 <_malloc_r+0x22>
 8008496:	6025      	str	r5, [r4, #0]
 8008498:	e7dc      	b.n	8008454 <_malloc_r+0xb0>
 800849a:	605b      	str	r3, [r3, #4]
 800849c:	deff      	udf	#255	; 0xff
 800849e:	bf00      	nop
 80084a0:	20000650 	.word	0x20000650

080084a4 <__sflush_r>:
 80084a4:	898a      	ldrh	r2, [r1, #12]
 80084a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	4605      	mov	r5, r0
 80084ac:	0710      	lsls	r0, r2, #28
 80084ae:	460c      	mov	r4, r1
 80084b0:	d458      	bmi.n	8008564 <__sflush_r+0xc0>
 80084b2:	684b      	ldr	r3, [r1, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc05      	bgt.n	80084c4 <__sflush_r+0x20>
 80084b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc02      	bgt.n	80084c4 <__sflush_r+0x20>
 80084be:	2000      	movs	r0, #0
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d0f9      	beq.n	80084be <__sflush_r+0x1a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084d0:	682f      	ldr	r7, [r5, #0]
 80084d2:	6a21      	ldr	r1, [r4, #32]
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	d032      	beq.n	800853e <__sflush_r+0x9a>
 80084d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	075a      	lsls	r2, r3, #29
 80084de:	d505      	bpl.n	80084ec <__sflush_r+0x48>
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	1ac0      	subs	r0, r0, r3
 80084e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e6:	b10b      	cbz	r3, 80084ec <__sflush_r+0x48>
 80084e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ea:	1ac0      	subs	r0, r0, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	4602      	mov	r2, r0
 80084f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084f2:	6a21      	ldr	r1, [r4, #32]
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b0      	blx	r6
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	d106      	bne.n	800850c <__sflush_r+0x68>
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	291d      	cmp	r1, #29
 8008502:	d82b      	bhi.n	800855c <__sflush_r+0xb8>
 8008504:	4a29      	ldr	r2, [pc, #164]	; (80085ac <__sflush_r+0x108>)
 8008506:	410a      	asrs	r2, r1
 8008508:	07d6      	lsls	r6, r2, #31
 800850a:	d427      	bmi.n	800855c <__sflush_r+0xb8>
 800850c:	2200      	movs	r2, #0
 800850e:	6062      	str	r2, [r4, #4]
 8008510:	04d9      	lsls	r1, r3, #19
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	d504      	bpl.n	8008522 <__sflush_r+0x7e>
 8008518:	1c42      	adds	r2, r0, #1
 800851a:	d101      	bne.n	8008520 <__sflush_r+0x7c>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b903      	cbnz	r3, 8008522 <__sflush_r+0x7e>
 8008520:	6560      	str	r0, [r4, #84]	; 0x54
 8008522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008524:	602f      	str	r7, [r5, #0]
 8008526:	2900      	cmp	r1, #0
 8008528:	d0c9      	beq.n	80084be <__sflush_r+0x1a>
 800852a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852e:	4299      	cmp	r1, r3
 8008530:	d002      	beq.n	8008538 <__sflush_r+0x94>
 8008532:	4628      	mov	r0, r5
 8008534:	f000 fe1c 	bl	8009170 <_free_r>
 8008538:	2000      	movs	r0, #0
 800853a:	6360      	str	r0, [r4, #52]	; 0x34
 800853c:	e7c0      	b.n	80084c0 <__sflush_r+0x1c>
 800853e:	2301      	movs	r3, #1
 8008540:	4628      	mov	r0, r5
 8008542:	47b0      	blx	r6
 8008544:	1c41      	adds	r1, r0, #1
 8008546:	d1c8      	bne.n	80084da <__sflush_r+0x36>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c5      	beq.n	80084da <__sflush_r+0x36>
 800854e:	2b1d      	cmp	r3, #29
 8008550:	d001      	beq.n	8008556 <__sflush_r+0xb2>
 8008552:	2b16      	cmp	r3, #22
 8008554:	d101      	bne.n	800855a <__sflush_r+0xb6>
 8008556:	602f      	str	r7, [r5, #0]
 8008558:	e7b1      	b.n	80084be <__sflush_r+0x1a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	e7ad      	b.n	80084c0 <__sflush_r+0x1c>
 8008564:	690f      	ldr	r7, [r1, #16]
 8008566:	2f00      	cmp	r7, #0
 8008568:	d0a9      	beq.n	80084be <__sflush_r+0x1a>
 800856a:	0793      	lsls	r3, r2, #30
 800856c:	680e      	ldr	r6, [r1, #0]
 800856e:	bf08      	it	eq
 8008570:	694b      	ldreq	r3, [r1, #20]
 8008572:	600f      	str	r7, [r1, #0]
 8008574:	bf18      	it	ne
 8008576:	2300      	movne	r3, #0
 8008578:	eba6 0807 	sub.w	r8, r6, r7
 800857c:	608b      	str	r3, [r1, #8]
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	dd9c      	ble.n	80084be <__sflush_r+0x1a>
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008588:	4643      	mov	r3, r8
 800858a:	463a      	mov	r2, r7
 800858c:	4628      	mov	r0, r5
 800858e:	47b0      	blx	r6
 8008590:	2800      	cmp	r0, #0
 8008592:	dc06      	bgt.n	80085a2 <__sflush_r+0xfe>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a0:	e78e      	b.n	80084c0 <__sflush_r+0x1c>
 80085a2:	4407      	add	r7, r0
 80085a4:	eba8 0800 	sub.w	r8, r8, r0
 80085a8:	e7e9      	b.n	800857e <__sflush_r+0xda>
 80085aa:	bf00      	nop
 80085ac:	dfbffffe 	.word	0xdfbffffe

080085b0 <_fflush_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b913      	cbnz	r3, 80085c0 <_fflush_r+0x10>
 80085ba:	2500      	movs	r5, #0
 80085bc:	4628      	mov	r0, r5
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	b118      	cbz	r0, 80085ca <_fflush_r+0x1a>
 80085c2:	6a03      	ldr	r3, [r0, #32]
 80085c4:	b90b      	cbnz	r3, 80085ca <_fflush_r+0x1a>
 80085c6:	f7fe fcc5 	bl	8006f54 <__sinit>
 80085ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f3      	beq.n	80085ba <_fflush_r+0xa>
 80085d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d4:	07d0      	lsls	r0, r2, #31
 80085d6:	d404      	bmi.n	80085e2 <_fflush_r+0x32>
 80085d8:	0599      	lsls	r1, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_fflush_r+0x32>
 80085dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085de:	f7fe fd93 	bl	8007108 <__retarget_lock_acquire_recursive>
 80085e2:	4628      	mov	r0, r5
 80085e4:	4621      	mov	r1, r4
 80085e6:	f7ff ff5d 	bl	80084a4 <__sflush_r>
 80085ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ec:	07da      	lsls	r2, r3, #31
 80085ee:	4605      	mov	r5, r0
 80085f0:	d4e4      	bmi.n	80085bc <_fflush_r+0xc>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	059b      	lsls	r3, r3, #22
 80085f6:	d4e1      	bmi.n	80085bc <_fflush_r+0xc>
 80085f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085fa:	f7fe fd86 	bl	800710a <__retarget_lock_release_recursive>
 80085fe:	e7dd      	b.n	80085bc <_fflush_r+0xc>

08008600 <__malloc_lock>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__malloc_lock+0x8>)
 8008602:	f7fe bd81 	b.w	8007108 <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	2000064c 	.word	0x2000064c

0800860c <__malloc_unlock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_unlock+0x8>)
 800860e:	f7fe bd7c 	b.w	800710a <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	2000064c 	.word	0x2000064c

08008618 <_Balloc>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	69c6      	ldr	r6, [r0, #28]
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	b976      	cbnz	r6, 8008640 <_Balloc+0x28>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff fe96 	bl	8008354 <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	61e0      	str	r0, [r4, #28]
 800862c:	b920      	cbnz	r0, 8008638 <_Balloc+0x20>
 800862e:	4b18      	ldr	r3, [pc, #96]	; (8008690 <_Balloc+0x78>)
 8008630:	4818      	ldr	r0, [pc, #96]	; (8008694 <_Balloc+0x7c>)
 8008632:	216b      	movs	r1, #107	; 0x6b
 8008634:	f000 fd68 	bl	8009108 <__assert_func>
 8008638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800863c:	6006      	str	r6, [r0, #0]
 800863e:	60c6      	str	r6, [r0, #12]
 8008640:	69e6      	ldr	r6, [r4, #28]
 8008642:	68f3      	ldr	r3, [r6, #12]
 8008644:	b183      	cbz	r3, 8008668 <_Balloc+0x50>
 8008646:	69e3      	ldr	r3, [r4, #28]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800864e:	b9b8      	cbnz	r0, 8008680 <_Balloc+0x68>
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f605 	lsl.w	r6, r1, r5
 8008656:	1d72      	adds	r2, r6, #5
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fd72 	bl	8009144 <_calloc_r>
 8008660:	b160      	cbz	r0, 800867c <_Balloc+0x64>
 8008662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008666:	e00e      	b.n	8008686 <_Balloc+0x6e>
 8008668:	2221      	movs	r2, #33	; 0x21
 800866a:	2104      	movs	r1, #4
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fd69 	bl	8009144 <_calloc_r>
 8008672:	69e3      	ldr	r3, [r4, #28]
 8008674:	60f0      	str	r0, [r6, #12]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e4      	bne.n	8008646 <_Balloc+0x2e>
 800867c:	2000      	movs	r0, #0
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	6802      	ldr	r2, [r0, #0]
 8008682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008686:	2300      	movs	r3, #0
 8008688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800868c:	e7f7      	b.n	800867e <_Balloc+0x66>
 800868e:	bf00      	nop
 8008690:	080095fd 	.word	0x080095fd
 8008694:	0800968e 	.word	0x0800968e

08008698 <_Bfree>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	69c6      	ldr	r6, [r0, #28]
 800869c:	4605      	mov	r5, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	b976      	cbnz	r6, 80086c0 <_Bfree+0x28>
 80086a2:	2010      	movs	r0, #16
 80086a4:	f7ff fe56 	bl	8008354 <malloc>
 80086a8:	4602      	mov	r2, r0
 80086aa:	61e8      	str	r0, [r5, #28]
 80086ac:	b920      	cbnz	r0, 80086b8 <_Bfree+0x20>
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <_Bfree+0x3c>)
 80086b0:	4809      	ldr	r0, [pc, #36]	; (80086d8 <_Bfree+0x40>)
 80086b2:	218f      	movs	r1, #143	; 0x8f
 80086b4:	f000 fd28 	bl	8009108 <__assert_func>
 80086b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086bc:	6006      	str	r6, [r0, #0]
 80086be:	60c6      	str	r6, [r0, #12]
 80086c0:	b13c      	cbz	r4, 80086d2 <_Bfree+0x3a>
 80086c2:	69eb      	ldr	r3, [r5, #28]
 80086c4:	6862      	ldr	r2, [r4, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086cc:	6021      	str	r1, [r4, #0]
 80086ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	080095fd 	.word	0x080095fd
 80086d8:	0800968e 	.word	0x0800968e

080086dc <__multadd>:
 80086dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	690d      	ldr	r5, [r1, #16]
 80086e2:	4607      	mov	r7, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	461e      	mov	r6, r3
 80086e8:	f101 0c14 	add.w	ip, r1, #20
 80086ec:	2000      	movs	r0, #0
 80086ee:	f8dc 3000 	ldr.w	r3, [ip]
 80086f2:	b299      	uxth	r1, r3
 80086f4:	fb02 6101 	mla	r1, r2, r1, r6
 80086f8:	0c1e      	lsrs	r6, r3, #16
 80086fa:	0c0b      	lsrs	r3, r1, #16
 80086fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008700:	b289      	uxth	r1, r1
 8008702:	3001      	adds	r0, #1
 8008704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008708:	4285      	cmp	r5, r0
 800870a:	f84c 1b04 	str.w	r1, [ip], #4
 800870e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008712:	dcec      	bgt.n	80086ee <__multadd+0x12>
 8008714:	b30e      	cbz	r6, 800875a <__multadd+0x7e>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc19      	bgt.n	8008750 <__multadd+0x74>
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	4638      	mov	r0, r7
 8008720:	3101      	adds	r1, #1
 8008722:	f7ff ff79 	bl	8008618 <_Balloc>
 8008726:	4680      	mov	r8, r0
 8008728:	b928      	cbnz	r0, 8008736 <__multadd+0x5a>
 800872a:	4602      	mov	r2, r0
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <__multadd+0x84>)
 800872e:	480d      	ldr	r0, [pc, #52]	; (8008764 <__multadd+0x88>)
 8008730:	21ba      	movs	r1, #186	; 0xba
 8008732:	f000 fce9 	bl	8009108 <__assert_func>
 8008736:	6922      	ldr	r2, [r4, #16]
 8008738:	3202      	adds	r2, #2
 800873a:	f104 010c 	add.w	r1, r4, #12
 800873e:	0092      	lsls	r2, r2, #2
 8008740:	300c      	adds	r0, #12
 8008742:	f7fe fce3 	bl	800710c <memcpy>
 8008746:	4621      	mov	r1, r4
 8008748:	4638      	mov	r0, r7
 800874a:	f7ff ffa5 	bl	8008698 <_Bfree>
 800874e:	4644      	mov	r4, r8
 8008750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008754:	3501      	adds	r5, #1
 8008756:	615e      	str	r6, [r3, #20]
 8008758:	6125      	str	r5, [r4, #16]
 800875a:	4620      	mov	r0, r4
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	0800966c 	.word	0x0800966c
 8008764:	0800968e 	.word	0x0800968e

08008768 <__hi0bits>:
 8008768:	0c03      	lsrs	r3, r0, #16
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	b9d3      	cbnz	r3, 80087a4 <__hi0bits+0x3c>
 800876e:	0400      	lsls	r0, r0, #16
 8008770:	2310      	movs	r3, #16
 8008772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008776:	bf04      	itt	eq
 8008778:	0200      	lsleq	r0, r0, #8
 800877a:	3308      	addeq	r3, #8
 800877c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008780:	bf04      	itt	eq
 8008782:	0100      	lsleq	r0, r0, #4
 8008784:	3304      	addeq	r3, #4
 8008786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800878a:	bf04      	itt	eq
 800878c:	0080      	lsleq	r0, r0, #2
 800878e:	3302      	addeq	r3, #2
 8008790:	2800      	cmp	r0, #0
 8008792:	db05      	blt.n	80087a0 <__hi0bits+0x38>
 8008794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008798:	f103 0301 	add.w	r3, r3, #1
 800879c:	bf08      	it	eq
 800879e:	2320      	moveq	r3, #32
 80087a0:	4618      	mov	r0, r3
 80087a2:	4770      	bx	lr
 80087a4:	2300      	movs	r3, #0
 80087a6:	e7e4      	b.n	8008772 <__hi0bits+0xa>

080087a8 <__lo0bits>:
 80087a8:	6803      	ldr	r3, [r0, #0]
 80087aa:	f013 0207 	ands.w	r2, r3, #7
 80087ae:	d00c      	beq.n	80087ca <__lo0bits+0x22>
 80087b0:	07d9      	lsls	r1, r3, #31
 80087b2:	d422      	bmi.n	80087fa <__lo0bits+0x52>
 80087b4:	079a      	lsls	r2, r3, #30
 80087b6:	bf49      	itett	mi
 80087b8:	085b      	lsrmi	r3, r3, #1
 80087ba:	089b      	lsrpl	r3, r3, #2
 80087bc:	6003      	strmi	r3, [r0, #0]
 80087be:	2201      	movmi	r2, #1
 80087c0:	bf5c      	itt	pl
 80087c2:	6003      	strpl	r3, [r0, #0]
 80087c4:	2202      	movpl	r2, #2
 80087c6:	4610      	mov	r0, r2
 80087c8:	4770      	bx	lr
 80087ca:	b299      	uxth	r1, r3
 80087cc:	b909      	cbnz	r1, 80087d2 <__lo0bits+0x2a>
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	2210      	movs	r2, #16
 80087d2:	b2d9      	uxtb	r1, r3
 80087d4:	b909      	cbnz	r1, 80087da <__lo0bits+0x32>
 80087d6:	3208      	adds	r2, #8
 80087d8:	0a1b      	lsrs	r3, r3, #8
 80087da:	0719      	lsls	r1, r3, #28
 80087dc:	bf04      	itt	eq
 80087de:	091b      	lsreq	r3, r3, #4
 80087e0:	3204      	addeq	r2, #4
 80087e2:	0799      	lsls	r1, r3, #30
 80087e4:	bf04      	itt	eq
 80087e6:	089b      	lsreq	r3, r3, #2
 80087e8:	3202      	addeq	r2, #2
 80087ea:	07d9      	lsls	r1, r3, #31
 80087ec:	d403      	bmi.n	80087f6 <__lo0bits+0x4e>
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	f102 0201 	add.w	r2, r2, #1
 80087f4:	d003      	beq.n	80087fe <__lo0bits+0x56>
 80087f6:	6003      	str	r3, [r0, #0]
 80087f8:	e7e5      	b.n	80087c6 <__lo0bits+0x1e>
 80087fa:	2200      	movs	r2, #0
 80087fc:	e7e3      	b.n	80087c6 <__lo0bits+0x1e>
 80087fe:	2220      	movs	r2, #32
 8008800:	e7e1      	b.n	80087c6 <__lo0bits+0x1e>
	...

08008804 <__i2b>:
 8008804:	b510      	push	{r4, lr}
 8008806:	460c      	mov	r4, r1
 8008808:	2101      	movs	r1, #1
 800880a:	f7ff ff05 	bl	8008618 <_Balloc>
 800880e:	4602      	mov	r2, r0
 8008810:	b928      	cbnz	r0, 800881e <__i2b+0x1a>
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <__i2b+0x24>)
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <__i2b+0x28>)
 8008816:	f240 1145 	movw	r1, #325	; 0x145
 800881a:	f000 fc75 	bl	8009108 <__assert_func>
 800881e:	2301      	movs	r3, #1
 8008820:	6144      	str	r4, [r0, #20]
 8008822:	6103      	str	r3, [r0, #16]
 8008824:	bd10      	pop	{r4, pc}
 8008826:	bf00      	nop
 8008828:	0800966c 	.word	0x0800966c
 800882c:	0800968e 	.word	0x0800968e

08008830 <__multiply>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4691      	mov	r9, r2
 8008836:	690a      	ldr	r2, [r1, #16]
 8008838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800883c:	429a      	cmp	r2, r3
 800883e:	bfb8      	it	lt
 8008840:	460b      	movlt	r3, r1
 8008842:	460c      	mov	r4, r1
 8008844:	bfbc      	itt	lt
 8008846:	464c      	movlt	r4, r9
 8008848:	4699      	movlt	r9, r3
 800884a:	6927      	ldr	r7, [r4, #16]
 800884c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	6861      	ldr	r1, [r4, #4]
 8008854:	eb07 060a 	add.w	r6, r7, sl
 8008858:	42b3      	cmp	r3, r6
 800885a:	b085      	sub	sp, #20
 800885c:	bfb8      	it	lt
 800885e:	3101      	addlt	r1, #1
 8008860:	f7ff feda 	bl	8008618 <_Balloc>
 8008864:	b930      	cbnz	r0, 8008874 <__multiply+0x44>
 8008866:	4602      	mov	r2, r0
 8008868:	4b44      	ldr	r3, [pc, #272]	; (800897c <__multiply+0x14c>)
 800886a:	4845      	ldr	r0, [pc, #276]	; (8008980 <__multiply+0x150>)
 800886c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008870:	f000 fc4a 	bl	8009108 <__assert_func>
 8008874:	f100 0514 	add.w	r5, r0, #20
 8008878:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800887c:	462b      	mov	r3, r5
 800887e:	2200      	movs	r2, #0
 8008880:	4543      	cmp	r3, r8
 8008882:	d321      	bcc.n	80088c8 <__multiply+0x98>
 8008884:	f104 0314 	add.w	r3, r4, #20
 8008888:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800888c:	f109 0314 	add.w	r3, r9, #20
 8008890:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008894:	9202      	str	r2, [sp, #8]
 8008896:	1b3a      	subs	r2, r7, r4
 8008898:	3a15      	subs	r2, #21
 800889a:	f022 0203 	bic.w	r2, r2, #3
 800889e:	3204      	adds	r2, #4
 80088a0:	f104 0115 	add.w	r1, r4, #21
 80088a4:	428f      	cmp	r7, r1
 80088a6:	bf38      	it	cc
 80088a8:	2204      	movcc	r2, #4
 80088aa:	9201      	str	r2, [sp, #4]
 80088ac:	9a02      	ldr	r2, [sp, #8]
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d80c      	bhi.n	80088ce <__multiply+0x9e>
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	dd03      	ble.n	80088c0 <__multiply+0x90>
 80088b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d05b      	beq.n	8008978 <__multiply+0x148>
 80088c0:	6106      	str	r6, [r0, #16]
 80088c2:	b005      	add	sp, #20
 80088c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c8:	f843 2b04 	str.w	r2, [r3], #4
 80088cc:	e7d8      	b.n	8008880 <__multiply+0x50>
 80088ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80088d2:	f1ba 0f00 	cmp.w	sl, #0
 80088d6:	d024      	beq.n	8008922 <__multiply+0xf2>
 80088d8:	f104 0e14 	add.w	lr, r4, #20
 80088dc:	46a9      	mov	r9, r5
 80088de:	f04f 0c00 	mov.w	ip, #0
 80088e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088e6:	f8d9 1000 	ldr.w	r1, [r9]
 80088ea:	fa1f fb82 	uxth.w	fp, r2
 80088ee:	b289      	uxth	r1, r1
 80088f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80088f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088f8:	f8d9 2000 	ldr.w	r2, [r9]
 80088fc:	4461      	add	r1, ip
 80088fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008902:	fb0a c20b 	mla	r2, sl, fp, ip
 8008906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800890a:	b289      	uxth	r1, r1
 800890c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008910:	4577      	cmp	r7, lr
 8008912:	f849 1b04 	str.w	r1, [r9], #4
 8008916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800891a:	d8e2      	bhi.n	80088e2 <__multiply+0xb2>
 800891c:	9a01      	ldr	r2, [sp, #4]
 800891e:	f845 c002 	str.w	ip, [r5, r2]
 8008922:	9a03      	ldr	r2, [sp, #12]
 8008924:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008928:	3304      	adds	r3, #4
 800892a:	f1b9 0f00 	cmp.w	r9, #0
 800892e:	d021      	beq.n	8008974 <__multiply+0x144>
 8008930:	6829      	ldr	r1, [r5, #0]
 8008932:	f104 0c14 	add.w	ip, r4, #20
 8008936:	46ae      	mov	lr, r5
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f8bc b000 	ldrh.w	fp, [ip]
 8008940:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008944:	fb09 220b 	mla	r2, r9, fp, r2
 8008948:	4452      	add	r2, sl
 800894a:	b289      	uxth	r1, r1
 800894c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008950:	f84e 1b04 	str.w	r1, [lr], #4
 8008954:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800895c:	f8be 1000 	ldrh.w	r1, [lr]
 8008960:	fb09 110a 	mla	r1, r9, sl, r1
 8008964:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008968:	4567      	cmp	r7, ip
 800896a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800896e:	d8e5      	bhi.n	800893c <__multiply+0x10c>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	50a9      	str	r1, [r5, r2]
 8008974:	3504      	adds	r5, #4
 8008976:	e799      	b.n	80088ac <__multiply+0x7c>
 8008978:	3e01      	subs	r6, #1
 800897a:	e79b      	b.n	80088b4 <__multiply+0x84>
 800897c:	0800966c 	.word	0x0800966c
 8008980:	0800968e 	.word	0x0800968e

08008984 <__pow5mult>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	f012 0203 	ands.w	r2, r2, #3
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	d007      	beq.n	80089a4 <__pow5mult+0x20>
 8008994:	4c25      	ldr	r4, [pc, #148]	; (8008a2c <__pow5mult+0xa8>)
 8008996:	3a01      	subs	r2, #1
 8008998:	2300      	movs	r3, #0
 800899a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899e:	f7ff fe9d 	bl	80086dc <__multadd>
 80089a2:	4607      	mov	r7, r0
 80089a4:	10ad      	asrs	r5, r5, #2
 80089a6:	d03d      	beq.n	8008a24 <__pow5mult+0xa0>
 80089a8:	69f4      	ldr	r4, [r6, #28]
 80089aa:	b97c      	cbnz	r4, 80089cc <__pow5mult+0x48>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f7ff fcd1 	bl	8008354 <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	61f0      	str	r0, [r6, #28]
 80089b6:	b928      	cbnz	r0, 80089c4 <__pow5mult+0x40>
 80089b8:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <__pow5mult+0xac>)
 80089ba:	481e      	ldr	r0, [pc, #120]	; (8008a34 <__pow5mult+0xb0>)
 80089bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80089c0:	f000 fba2 	bl	8009108 <__assert_func>
 80089c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c8:	6004      	str	r4, [r0, #0]
 80089ca:	60c4      	str	r4, [r0, #12]
 80089cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d4:	b94c      	cbnz	r4, 80089ea <__pow5mult+0x66>
 80089d6:	f240 2171 	movw	r1, #625	; 0x271
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff12 	bl	8008804 <__i2b>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e6:	4604      	mov	r4, r0
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	07eb      	lsls	r3, r5, #31
 80089f0:	d50a      	bpl.n	8008a08 <__pow5mult+0x84>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4622      	mov	r2, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff1a 	bl	8008830 <__multiply>
 80089fc:	4639      	mov	r1, r7
 80089fe:	4680      	mov	r8, r0
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fe49 	bl	8008698 <_Bfree>
 8008a06:	4647      	mov	r7, r8
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	d00b      	beq.n	8008a24 <__pow5mult+0xa0>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	b938      	cbnz	r0, 8008a20 <__pow5mult+0x9c>
 8008a10:	4622      	mov	r2, r4
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ff0b 	bl	8008830 <__multiply>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	f8c0 9000 	str.w	r9, [r0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	e7e4      	b.n	80089ee <__pow5mult+0x6a>
 8008a24:	4638      	mov	r0, r7
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	080097d8 	.word	0x080097d8
 8008a30:	080095fd 	.word	0x080095fd
 8008a34:	0800968e 	.word	0x0800968e

08008a38 <__lshift>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	6849      	ldr	r1, [r1, #4]
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4691      	mov	r9, r2
 8008a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a50:	f108 0601 	add.w	r6, r8, #1
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	db0b      	blt.n	8008a70 <__lshift+0x38>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fddd 	bl	8008618 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b948      	cbnz	r0, 8008a76 <__lshift+0x3e>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b28      	ldr	r3, [pc, #160]	; (8008b08 <__lshift+0xd0>)
 8008a66:	4829      	ldr	r0, [pc, #164]	; (8008b0c <__lshift+0xd4>)
 8008a68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a6c:	f000 fb4c 	bl	8009108 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	e7ee      	b.n	8008a54 <__lshift+0x1c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f100 0114 	add.w	r1, r0, #20
 8008a7c:	f100 0210 	add.w	r2, r0, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	4553      	cmp	r3, sl
 8008a84:	db33      	blt.n	8008aee <__lshift+0xb6>
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	f019 091f 	ands.w	r9, r9, #31
 8008a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a9c:	d02b      	beq.n	8008af6 <__lshift+0xbe>
 8008a9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008aa2:	468a      	mov	sl, r1
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	fa00 f009 	lsl.w	r0, r0, r9
 8008aac:	4310      	orrs	r0, r2
 8008aae:	f84a 0b04 	str.w	r0, [sl], #4
 8008ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab6:	459c      	cmp	ip, r3
 8008ab8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008abc:	d8f3      	bhi.n	8008aa6 <__lshift+0x6e>
 8008abe:	ebac 0304 	sub.w	r3, ip, r4
 8008ac2:	3b15      	subs	r3, #21
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	3304      	adds	r3, #4
 8008aca:	f104 0015 	add.w	r0, r4, #21
 8008ace:	4584      	cmp	ip, r0
 8008ad0:	bf38      	it	cc
 8008ad2:	2304      	movcc	r3, #4
 8008ad4:	50ca      	str	r2, [r1, r3]
 8008ad6:	b10a      	cbz	r2, 8008adc <__lshift+0xa4>
 8008ad8:	f108 0602 	add.w	r6, r8, #2
 8008adc:	3e01      	subs	r6, #1
 8008ade:	4638      	mov	r0, r7
 8008ae0:	612e      	str	r6, [r5, #16]
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	f7ff fdd8 	bl	8008698 <_Bfree>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7c5      	b.n	8008a82 <__lshift+0x4a>
 8008af6:	3904      	subs	r1, #4
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b00:	459c      	cmp	ip, r3
 8008b02:	d8f9      	bhi.n	8008af8 <__lshift+0xc0>
 8008b04:	e7ea      	b.n	8008adc <__lshift+0xa4>
 8008b06:	bf00      	nop
 8008b08:	0800966c 	.word	0x0800966c
 8008b0c:	0800968e 	.word	0x0800968e

08008b10 <__mcmp>:
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	6902      	ldr	r2, [r0, #16]
 8008b14:	690c      	ldr	r4, [r1, #16]
 8008b16:	1b12      	subs	r2, r2, r4
 8008b18:	d10e      	bne.n	8008b38 <__mcmp+0x28>
 8008b1a:	f100 0314 	add.w	r3, r0, #20
 8008b1e:	3114      	adds	r1, #20
 8008b20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b30:	42a5      	cmp	r5, r4
 8008b32:	d003      	beq.n	8008b3c <__mcmp+0x2c>
 8008b34:	d305      	bcc.n	8008b42 <__mcmp+0x32>
 8008b36:	2201      	movs	r2, #1
 8008b38:	4610      	mov	r0, r2
 8008b3a:	bd30      	pop	{r4, r5, pc}
 8008b3c:	4283      	cmp	r3, r0
 8008b3e:	d3f3      	bcc.n	8008b28 <__mcmp+0x18>
 8008b40:	e7fa      	b.n	8008b38 <__mcmp+0x28>
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b46:	e7f7      	b.n	8008b38 <__mcmp+0x28>

08008b48 <__mdiff>:
 8008b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	4606      	mov	r6, r0
 8008b50:	4611      	mov	r1, r2
 8008b52:	4620      	mov	r0, r4
 8008b54:	4690      	mov	r8, r2
 8008b56:	f7ff ffdb 	bl	8008b10 <__mcmp>
 8008b5a:	1e05      	subs	r5, r0, #0
 8008b5c:	d110      	bne.n	8008b80 <__mdiff+0x38>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff fd59 	bl	8008618 <_Balloc>
 8008b66:	b930      	cbnz	r0, 8008b76 <__mdiff+0x2e>
 8008b68:	4b3a      	ldr	r3, [pc, #232]	; (8008c54 <__mdiff+0x10c>)
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	f240 2137 	movw	r1, #567	; 0x237
 8008b70:	4839      	ldr	r0, [pc, #228]	; (8008c58 <__mdiff+0x110>)
 8008b72:	f000 fac9 	bl	8009108 <__assert_func>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	bfa4      	itt	ge
 8008b82:	4643      	movge	r3, r8
 8008b84:	46a0      	movge	r8, r4
 8008b86:	4630      	mov	r0, r6
 8008b88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b8c:	bfa6      	itte	ge
 8008b8e:	461c      	movge	r4, r3
 8008b90:	2500      	movge	r5, #0
 8008b92:	2501      	movlt	r5, #1
 8008b94:	f7ff fd40 	bl	8008618 <_Balloc>
 8008b98:	b920      	cbnz	r0, 8008ba4 <__mdiff+0x5c>
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	; (8008c54 <__mdiff+0x10c>)
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	f240 2145 	movw	r1, #581	; 0x245
 8008ba2:	e7e5      	b.n	8008b70 <__mdiff+0x28>
 8008ba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ba8:	6926      	ldr	r6, [r4, #16]
 8008baa:	60c5      	str	r5, [r0, #12]
 8008bac:	f104 0914 	add.w	r9, r4, #20
 8008bb0:	f108 0514 	add.w	r5, r8, #20
 8008bb4:	f100 0e14 	add.w	lr, r0, #20
 8008bb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bc0:	f108 0210 	add.w	r2, r8, #16
 8008bc4:	46f2      	mov	sl, lr
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bd0:	fa11 f88b 	uxtah	r8, r1, fp
 8008bd4:	b299      	uxth	r1, r3
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	eba8 0801 	sub.w	r8, r8, r1
 8008bdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008be0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008be4:	fa1f f888 	uxth.w	r8, r8
 8008be8:	1419      	asrs	r1, r3, #16
 8008bea:	454e      	cmp	r6, r9
 8008bec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bf0:	f84a 3b04 	str.w	r3, [sl], #4
 8008bf4:	d8e8      	bhi.n	8008bc8 <__mdiff+0x80>
 8008bf6:	1b33      	subs	r3, r6, r4
 8008bf8:	3b15      	subs	r3, #21
 8008bfa:	f023 0303 	bic.w	r3, r3, #3
 8008bfe:	3304      	adds	r3, #4
 8008c00:	3415      	adds	r4, #21
 8008c02:	42a6      	cmp	r6, r4
 8008c04:	bf38      	it	cc
 8008c06:	2304      	movcc	r3, #4
 8008c08:	441d      	add	r5, r3
 8008c0a:	4473      	add	r3, lr
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	462e      	mov	r6, r5
 8008c10:	4566      	cmp	r6, ip
 8008c12:	d30e      	bcc.n	8008c32 <__mdiff+0xea>
 8008c14:	f10c 0203 	add.w	r2, ip, #3
 8008c18:	1b52      	subs	r2, r2, r5
 8008c1a:	f022 0203 	bic.w	r2, r2, #3
 8008c1e:	3d03      	subs	r5, #3
 8008c20:	45ac      	cmp	ip, r5
 8008c22:	bf38      	it	cc
 8008c24:	2200      	movcc	r2, #0
 8008c26:	4413      	add	r3, r2
 8008c28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c2c:	b17a      	cbz	r2, 8008c4e <__mdiff+0x106>
 8008c2e:	6107      	str	r7, [r0, #16]
 8008c30:	e7a4      	b.n	8008b7c <__mdiff+0x34>
 8008c32:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c36:	fa11 f288 	uxtah	r2, r1, r8
 8008c3a:	1414      	asrs	r4, r2, #16
 8008c3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c40:	b292      	uxth	r2, r2
 8008c42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c46:	f84e 2b04 	str.w	r2, [lr], #4
 8008c4a:	1421      	asrs	r1, r4, #16
 8008c4c:	e7e0      	b.n	8008c10 <__mdiff+0xc8>
 8008c4e:	3f01      	subs	r7, #1
 8008c50:	e7ea      	b.n	8008c28 <__mdiff+0xe0>
 8008c52:	bf00      	nop
 8008c54:	0800966c 	.word	0x0800966c
 8008c58:	0800968e 	.word	0x0800968e

08008c5c <__d2b>:
 8008c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c60:	460f      	mov	r7, r1
 8008c62:	2101      	movs	r1, #1
 8008c64:	ec59 8b10 	vmov	r8, r9, d0
 8008c68:	4616      	mov	r6, r2
 8008c6a:	f7ff fcd5 	bl	8008618 <_Balloc>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	b930      	cbnz	r0, 8008c80 <__d2b+0x24>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <__d2b+0xac>)
 8008c76:	4825      	ldr	r0, [pc, #148]	; (8008d0c <__d2b+0xb0>)
 8008c78:	f240 310f 	movw	r1, #783	; 0x30f
 8008c7c:	f000 fa44 	bl	8009108 <__assert_func>
 8008c80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c88:	bb2d      	cbnz	r5, 8008cd6 <__d2b+0x7a>
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c90:	d026      	beq.n	8008ce0 <__d2b+0x84>
 8008c92:	4668      	mov	r0, sp
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f7ff fd87 	bl	80087a8 <__lo0bits>
 8008c9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c9e:	b1e8      	cbz	r0, 8008cdc <__d2b+0x80>
 8008ca0:	f1c0 0320 	rsb	r3, r0, #32
 8008ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	40c2      	lsrs	r2, r0
 8008cac:	6163      	str	r3, [r4, #20]
 8008cae:	9201      	str	r2, [sp, #4]
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	61a3      	str	r3, [r4, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bf14      	ite	ne
 8008cb8:	2202      	movne	r2, #2
 8008cba:	2201      	moveq	r2, #1
 8008cbc:	6122      	str	r2, [r4, #16]
 8008cbe:	b1bd      	cbz	r5, 8008cf0 <__d2b+0x94>
 8008cc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cc4:	4405      	add	r5, r0
 8008cc6:	603d      	str	r5, [r7, #0]
 8008cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ccc:	6030      	str	r0, [r6, #0]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	b003      	add	sp, #12
 8008cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cda:	e7d6      	b.n	8008c8a <__d2b+0x2e>
 8008cdc:	6161      	str	r1, [r4, #20]
 8008cde:	e7e7      	b.n	8008cb0 <__d2b+0x54>
 8008ce0:	a801      	add	r0, sp, #4
 8008ce2:	f7ff fd61 	bl	80087a8 <__lo0bits>
 8008ce6:	9b01      	ldr	r3, [sp, #4]
 8008ce8:	6163      	str	r3, [r4, #20]
 8008cea:	3020      	adds	r0, #32
 8008cec:	2201      	movs	r2, #1
 8008cee:	e7e5      	b.n	8008cbc <__d2b+0x60>
 8008cf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf8:	6038      	str	r0, [r7, #0]
 8008cfa:	6918      	ldr	r0, [r3, #16]
 8008cfc:	f7ff fd34 	bl	8008768 <__hi0bits>
 8008d00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d04:	e7e2      	b.n	8008ccc <__d2b+0x70>
 8008d06:	bf00      	nop
 8008d08:	0800966c 	.word	0x0800966c
 8008d0c:	0800968e 	.word	0x0800968e

08008d10 <__sread>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	460c      	mov	r4, r1
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	f000 f9c2 	bl	80090a0 <_read_r>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	bfab      	itete	ge
 8008d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d22:	89a3      	ldrhlt	r3, [r4, #12]
 8008d24:	181b      	addge	r3, r3, r0
 8008d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d2a:	bfac      	ite	ge
 8008d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d2e:	81a3      	strhlt	r3, [r4, #12]
 8008d30:	bd10      	pop	{r4, pc}

08008d32 <__swrite>:
 8008d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d36:	461f      	mov	r7, r3
 8008d38:	898b      	ldrh	r3, [r1, #12]
 8008d3a:	05db      	lsls	r3, r3, #23
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	4616      	mov	r6, r2
 8008d42:	d505      	bpl.n	8008d50 <__swrite+0x1e>
 8008d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d48:	2302      	movs	r3, #2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f000 f996 	bl	800907c <_lseek_r>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	463b      	mov	r3, r7
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d66:	f000 b9bd 	b.w	80090e4 <_write_r>

08008d6a <__sseek>:
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d72:	f000 f983 	bl	800907c <_lseek_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	bf15      	itete	ne
 8008d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d86:	81a3      	strheq	r3, [r4, #12]
 8008d88:	bf18      	it	ne
 8008d8a:	81a3      	strhne	r3, [r4, #12]
 8008d8c:	bd10      	pop	{r4, pc}

08008d8e <__sclose>:
 8008d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d92:	f000 b941 	b.w	8009018 <_close_r>

08008d96 <_realloc_r>:
 8008d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	4680      	mov	r8, r0
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	460e      	mov	r6, r1
 8008da0:	b921      	cbnz	r1, 8008dac <_realloc_r+0x16>
 8008da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da6:	4611      	mov	r1, r2
 8008da8:	f7ff bafc 	b.w	80083a4 <_malloc_r>
 8008dac:	b92a      	cbnz	r2, 8008dba <_realloc_r+0x24>
 8008dae:	f000 f9df 	bl	8009170 <_free_r>
 8008db2:	4625      	mov	r5, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dba:	f000 fa37 	bl	800922c <_malloc_usable_size_r>
 8008dbe:	4284      	cmp	r4, r0
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	d802      	bhi.n	8008dca <_realloc_r+0x34>
 8008dc4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dc8:	d812      	bhi.n	8008df0 <_realloc_r+0x5a>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4640      	mov	r0, r8
 8008dce:	f7ff fae9 	bl	80083a4 <_malloc_r>
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d0ed      	beq.n	8008db4 <_realloc_r+0x1e>
 8008dd8:	42bc      	cmp	r4, r7
 8008dda:	4622      	mov	r2, r4
 8008ddc:	4631      	mov	r1, r6
 8008dde:	bf28      	it	cs
 8008de0:	463a      	movcs	r2, r7
 8008de2:	f7fe f993 	bl	800710c <memcpy>
 8008de6:	4631      	mov	r1, r6
 8008de8:	4640      	mov	r0, r8
 8008dea:	f000 f9c1 	bl	8009170 <_free_r>
 8008dee:	e7e1      	b.n	8008db4 <_realloc_r+0x1e>
 8008df0:	4635      	mov	r5, r6
 8008df2:	e7df      	b.n	8008db4 <_realloc_r+0x1e>

08008df4 <__swbuf_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	b118      	cbz	r0, 8008e06 <__swbuf_r+0x12>
 8008dfe:	6a03      	ldr	r3, [r0, #32]
 8008e00:	b90b      	cbnz	r3, 8008e06 <__swbuf_r+0x12>
 8008e02:	f7fe f8a7 	bl	8006f54 <__sinit>
 8008e06:	69a3      	ldr	r3, [r4, #24]
 8008e08:	60a3      	str	r3, [r4, #8]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	071a      	lsls	r2, r3, #28
 8008e0e:	d525      	bpl.n	8008e5c <__swbuf_r+0x68>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	b31b      	cbz	r3, 8008e5c <__swbuf_r+0x68>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	1a98      	subs	r0, r3, r2
 8008e1a:	6963      	ldr	r3, [r4, #20]
 8008e1c:	b2f6      	uxtb	r6, r6
 8008e1e:	4283      	cmp	r3, r0
 8008e20:	4637      	mov	r7, r6
 8008e22:	dc04      	bgt.n	8008e2e <__swbuf_r+0x3a>
 8008e24:	4621      	mov	r1, r4
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7ff fbc2 	bl	80085b0 <_fflush_r>
 8008e2c:	b9e0      	cbnz	r0, 8008e68 <__swbuf_r+0x74>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	60a3      	str	r3, [r4, #8]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	701e      	strb	r6, [r3, #0]
 8008e3c:	6962      	ldr	r2, [r4, #20]
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d004      	beq.n	8008e4e <__swbuf_r+0x5a>
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	07db      	lsls	r3, r3, #31
 8008e48:	d506      	bpl.n	8008e58 <__swbuf_r+0x64>
 8008e4a:	2e0a      	cmp	r6, #10
 8008e4c:	d104      	bne.n	8008e58 <__swbuf_r+0x64>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fbad 	bl	80085b0 <_fflush_r>
 8008e56:	b938      	cbnz	r0, 8008e68 <__swbuf_r+0x74>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f806 	bl	8008e70 <__swsetup_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0d5      	beq.n	8008e14 <__swbuf_r+0x20>
 8008e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e6c:	e7f4      	b.n	8008e58 <__swbuf_r+0x64>
	...

08008e70 <__swsetup_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <__swsetup_r+0xac>)
 8008e74:	4605      	mov	r5, r0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	460c      	mov	r4, r1
 8008e7a:	b118      	cbz	r0, 8008e84 <__swsetup_r+0x14>
 8008e7c:	6a03      	ldr	r3, [r0, #32]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <__swsetup_r+0x14>
 8008e80:	f7fe f868 	bl	8006f54 <__sinit>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8a:	0718      	lsls	r0, r3, #28
 8008e8c:	d422      	bmi.n	8008ed4 <__swsetup_r+0x64>
 8008e8e:	06d9      	lsls	r1, r3, #27
 8008e90:	d407      	bmi.n	8008ea2 <__swsetup_r+0x32>
 8008e92:	2309      	movs	r3, #9
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea0:	e034      	b.n	8008f0c <__swsetup_r+0x9c>
 8008ea2:	0758      	lsls	r0, r3, #29
 8008ea4:	d512      	bpl.n	8008ecc <__swsetup_r+0x5c>
 8008ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea8:	b141      	cbz	r1, 8008ebc <__swsetup_r+0x4c>
 8008eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d002      	beq.n	8008eb8 <__swsetup_r+0x48>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f000 f95c 	bl	8009170 <_free_r>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6363      	str	r3, [r4, #52]	; 0x34
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6063      	str	r3, [r4, #4]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f043 0308 	orr.w	r3, r3, #8
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	b94b      	cbnz	r3, 8008eec <__swsetup_r+0x7c>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee2:	d003      	beq.n	8008eec <__swsetup_r+0x7c>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f840 	bl	8008f6c <__smakebuf_r>
 8008eec:	89a0      	ldrh	r0, [r4, #12]
 8008eee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef2:	f010 0301 	ands.w	r3, r0, #1
 8008ef6:	d00a      	beq.n	8008f0e <__swsetup_r+0x9e>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6963      	ldr	r3, [r4, #20]
 8008efe:	425b      	negs	r3, r3
 8008f00:	61a3      	str	r3, [r4, #24]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	b943      	cbnz	r3, 8008f18 <__swsetup_r+0xa8>
 8008f06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f0a:	d1c4      	bne.n	8008e96 <__swsetup_r+0x26>
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	0781      	lsls	r1, r0, #30
 8008f10:	bf58      	it	pl
 8008f12:	6963      	ldrpl	r3, [r4, #20]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	e7f4      	b.n	8008f02 <__swsetup_r+0x92>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e7f7      	b.n	8008f0c <__swsetup_r+0x9c>
 8008f1c:	20000098 	.word	0x20000098

08008f20 <__swhatbuf_r>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	460c      	mov	r4, r1
 8008f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	b096      	sub	sp, #88	; 0x58
 8008f2c:	4615      	mov	r5, r2
 8008f2e:	461e      	mov	r6, r3
 8008f30:	da0d      	bge.n	8008f4e <__swhatbuf_r+0x2e>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	bf0c      	ite	eq
 8008f3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f42:	2340      	movne	r3, #64	; 0x40
 8008f44:	2000      	movs	r0, #0
 8008f46:	6031      	str	r1, [r6, #0]
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	b016      	add	sp, #88	; 0x58
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	466a      	mov	r2, sp
 8008f50:	f000 f872 	bl	8009038 <_fstat_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	dbec      	blt.n	8008f32 <__swhatbuf_r+0x12>
 8008f58:	9901      	ldr	r1, [sp, #4]
 8008f5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f62:	4259      	negs	r1, r3
 8008f64:	4159      	adcs	r1, r3
 8008f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6a:	e7eb      	b.n	8008f44 <__swhatbuf_r+0x24>

08008f6c <__smakebuf_r>:
 8008f6c:	898b      	ldrh	r3, [r1, #12]
 8008f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f70:	079d      	lsls	r5, r3, #30
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	d507      	bpl.n	8008f88 <__smakebuf_r+0x1c>
 8008f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	2301      	movs	r3, #1
 8008f82:	6163      	str	r3, [r4, #20]
 8008f84:	b002      	add	sp, #8
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	ab01      	add	r3, sp, #4
 8008f8a:	466a      	mov	r2, sp
 8008f8c:	f7ff ffc8 	bl	8008f20 <__swhatbuf_r>
 8008f90:	9900      	ldr	r1, [sp, #0]
 8008f92:	4605      	mov	r5, r0
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff fa05 	bl	80083a4 <_malloc_r>
 8008f9a:	b948      	cbnz	r0, 8008fb0 <__smakebuf_r+0x44>
 8008f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d4ef      	bmi.n	8008f84 <__smakebuf_r+0x18>
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	e7e3      	b.n	8008f78 <__smakebuf_r+0xc>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	6020      	str	r0, [r4, #0]
 8008fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	6163      	str	r3, [r4, #20]
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	6120      	str	r0, [r4, #16]
 8008fc2:	b15b      	cbz	r3, 8008fdc <__smakebuf_r+0x70>
 8008fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f847 	bl	800905c <_isatty_r>
 8008fce:	b128      	cbz	r0, 8008fdc <__smakebuf_r+0x70>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f023 0303 	bic.w	r3, r3, #3
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	431d      	orrs	r5, r3
 8008fe0:	81a5      	strh	r5, [r4, #12]
 8008fe2:	e7cf      	b.n	8008f84 <__smakebuf_r+0x18>

08008fe4 <memmove>:
 8008fe4:	4288      	cmp	r0, r1
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	eb01 0402 	add.w	r4, r1, r2
 8008fec:	d902      	bls.n	8008ff4 <memmove+0x10>
 8008fee:	4284      	cmp	r4, r0
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	d807      	bhi.n	8009004 <memmove+0x20>
 8008ff4:	1e43      	subs	r3, r0, #1
 8008ff6:	42a1      	cmp	r1, r4
 8008ff8:	d008      	beq.n	800900c <memmove+0x28>
 8008ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009002:	e7f8      	b.n	8008ff6 <memmove+0x12>
 8009004:	4402      	add	r2, r0
 8009006:	4601      	mov	r1, r0
 8009008:	428a      	cmp	r2, r1
 800900a:	d100      	bne.n	800900e <memmove+0x2a>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009016:	e7f7      	b.n	8009008 <memmove+0x24>

08009018 <_close_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d06      	ldr	r5, [pc, #24]	; (8009034 <_close_r+0x1c>)
 800901c:	2300      	movs	r3, #0
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	602b      	str	r3, [r5, #0]
 8009024:	f7f9 f85d 	bl	80020e2 <_close>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_close_r+0x1a>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	b103      	cbz	r3, 8009032 <_close_r+0x1a>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	20000658 	.word	0x20000658

08009038 <_fstat_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d07      	ldr	r5, [pc, #28]	; (8009058 <_fstat_r+0x20>)
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	602b      	str	r3, [r5, #0]
 8009046:	f7f9 f858 	bl	80020fa <_fstat>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d102      	bne.n	8009054 <_fstat_r+0x1c>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	b103      	cbz	r3, 8009054 <_fstat_r+0x1c>
 8009052:	6023      	str	r3, [r4, #0]
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	bf00      	nop
 8009058:	20000658 	.word	0x20000658

0800905c <_isatty_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	; (8009078 <_isatty_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f9 f857 	bl	800211a <_isatty>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_isatty_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_isatty_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	20000658 	.word	0x20000658

0800907c <_lseek_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	; (800909c <_lseek_r+0x20>)
 8009080:	4604      	mov	r4, r0
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	2200      	movs	r2, #0
 8009088:	602a      	str	r2, [r5, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	f7f9 f850 	bl	8002130 <_lseek>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d102      	bne.n	800909a <_lseek_r+0x1e>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	b103      	cbz	r3, 800909a <_lseek_r+0x1e>
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	20000658 	.word	0x20000658

080090a0 <_read_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_read_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 ffde 	bl	8002070 <_read>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_read_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_read_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20000658 	.word	0x20000658

080090c4 <_sbrk_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d06      	ldr	r5, [pc, #24]	; (80090e0 <_sbrk_r+0x1c>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f9 f83c 	bl	800214c <_sbrk>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_sbrk_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_sbrk_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20000658 	.word	0x20000658

080090e4 <_write_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d07      	ldr	r5, [pc, #28]	; (8009104 <_write_r+0x20>)
 80090e8:	4604      	mov	r4, r0
 80090ea:	4608      	mov	r0, r1
 80090ec:	4611      	mov	r1, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	602a      	str	r2, [r5, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f7f8 ffd9 	bl	80020aa <_write>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_write_r+0x1e>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_write_r+0x1e>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20000658 	.word	0x20000658

08009108 <__assert_func>:
 8009108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800910a:	4614      	mov	r4, r2
 800910c:	461a      	mov	r2, r3
 800910e:	4b09      	ldr	r3, [pc, #36]	; (8009134 <__assert_func+0x2c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4605      	mov	r5, r0
 8009114:	68d8      	ldr	r0, [r3, #12]
 8009116:	b14c      	cbz	r4, 800912c <__assert_func+0x24>
 8009118:	4b07      	ldr	r3, [pc, #28]	; (8009138 <__assert_func+0x30>)
 800911a:	9100      	str	r1, [sp, #0]
 800911c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009120:	4906      	ldr	r1, [pc, #24]	; (800913c <__assert_func+0x34>)
 8009122:	462b      	mov	r3, r5
 8009124:	f000 f88a 	bl	800923c <fiprintf>
 8009128:	f000 f8a7 	bl	800927a <abort>
 800912c:	4b04      	ldr	r3, [pc, #16]	; (8009140 <__assert_func+0x38>)
 800912e:	461c      	mov	r4, r3
 8009130:	e7f3      	b.n	800911a <__assert_func+0x12>
 8009132:	bf00      	nop
 8009134:	20000098 	.word	0x20000098
 8009138:	080098ef 	.word	0x080098ef
 800913c:	080098fc 	.word	0x080098fc
 8009140:	0800992a 	.word	0x0800992a

08009144 <_calloc_r>:
 8009144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009146:	fba1 2402 	umull	r2, r4, r1, r2
 800914a:	b94c      	cbnz	r4, 8009160 <_calloc_r+0x1c>
 800914c:	4611      	mov	r1, r2
 800914e:	9201      	str	r2, [sp, #4]
 8009150:	f7ff f928 	bl	80083a4 <_malloc_r>
 8009154:	9a01      	ldr	r2, [sp, #4]
 8009156:	4605      	mov	r5, r0
 8009158:	b930      	cbnz	r0, 8009168 <_calloc_r+0x24>
 800915a:	4628      	mov	r0, r5
 800915c:	b003      	add	sp, #12
 800915e:	bd30      	pop	{r4, r5, pc}
 8009160:	220c      	movs	r2, #12
 8009162:	6002      	str	r2, [r0, #0]
 8009164:	2500      	movs	r5, #0
 8009166:	e7f8      	b.n	800915a <_calloc_r+0x16>
 8009168:	4621      	mov	r1, r4
 800916a:	f7fd ff97 	bl	800709c <memset>
 800916e:	e7f4      	b.n	800915a <_calloc_r+0x16>

08009170 <_free_r>:
 8009170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009172:	2900      	cmp	r1, #0
 8009174:	d044      	beq.n	8009200 <_free_r+0x90>
 8009176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f1a1 0404 	sub.w	r4, r1, #4
 8009182:	bfb8      	it	lt
 8009184:	18e4      	addlt	r4, r4, r3
 8009186:	f7ff fa3b 	bl	8008600 <__malloc_lock>
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <_free_r+0x94>)
 800918c:	9801      	ldr	r0, [sp, #4]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	b933      	cbnz	r3, 80091a0 <_free_r+0x30>
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6014      	str	r4, [r2, #0]
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800919c:	f7ff ba36 	b.w	800860c <__malloc_unlock>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d908      	bls.n	80091b6 <_free_r+0x46>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf01      	itttt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	e7ed      	b.n	8009192 <_free_r+0x22>
 80091b6:	461a      	mov	r2, r3
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	b10b      	cbz	r3, 80091c0 <_free_r+0x50>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d9fa      	bls.n	80091b6 <_free_r+0x46>
 80091c0:	6811      	ldr	r1, [r2, #0]
 80091c2:	1855      	adds	r5, r2, r1
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d10b      	bne.n	80091e0 <_free_r+0x70>
 80091c8:	6824      	ldr	r4, [r4, #0]
 80091ca:	4421      	add	r1, r4
 80091cc:	1854      	adds	r4, r2, r1
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	6011      	str	r1, [r2, #0]
 80091d2:	d1e0      	bne.n	8009196 <_free_r+0x26>
 80091d4:	681c      	ldr	r4, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	6053      	str	r3, [r2, #4]
 80091da:	440c      	add	r4, r1
 80091dc:	6014      	str	r4, [r2, #0]
 80091de:	e7da      	b.n	8009196 <_free_r+0x26>
 80091e0:	d902      	bls.n	80091e8 <_free_r+0x78>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	e7d6      	b.n	8009196 <_free_r+0x26>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf04      	itt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	bf04      	itt	eq
 80091f8:	1949      	addeq	r1, r1, r5
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	6054      	str	r4, [r2, #4]
 80091fe:	e7ca      	b.n	8009196 <_free_r+0x26>
 8009200:	b003      	add	sp, #12
 8009202:	bd30      	pop	{r4, r5, pc}
 8009204:	20000650 	.word	0x20000650

08009208 <__ascii_mbtowc>:
 8009208:	b082      	sub	sp, #8
 800920a:	b901      	cbnz	r1, 800920e <__ascii_mbtowc+0x6>
 800920c:	a901      	add	r1, sp, #4
 800920e:	b142      	cbz	r2, 8009222 <__ascii_mbtowc+0x1a>
 8009210:	b14b      	cbz	r3, 8009226 <__ascii_mbtowc+0x1e>
 8009212:	7813      	ldrb	r3, [r2, #0]
 8009214:	600b      	str	r3, [r1, #0]
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	1e10      	subs	r0, r2, #0
 800921a:	bf18      	it	ne
 800921c:	2001      	movne	r0, #1
 800921e:	b002      	add	sp, #8
 8009220:	4770      	bx	lr
 8009222:	4610      	mov	r0, r2
 8009224:	e7fb      	b.n	800921e <__ascii_mbtowc+0x16>
 8009226:	f06f 0001 	mvn.w	r0, #1
 800922a:	e7f8      	b.n	800921e <__ascii_mbtowc+0x16>

0800922c <_malloc_usable_size_r>:
 800922c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009230:	1f18      	subs	r0, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfbc      	itt	lt
 8009236:	580b      	ldrlt	r3, [r1, r0]
 8009238:	18c0      	addlt	r0, r0, r3
 800923a:	4770      	bx	lr

0800923c <fiprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b503      	push	{r0, r1, lr}
 8009240:	4601      	mov	r1, r0
 8009242:	ab03      	add	r3, sp, #12
 8009244:	4805      	ldr	r0, [pc, #20]	; (800925c <fiprintf+0x20>)
 8009246:	f853 2b04 	ldr.w	r2, [r3], #4
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f7fe ff67 	bl	8008120 <_vfiprintf_r>
 8009252:	b002      	add	sp, #8
 8009254:	f85d eb04 	ldr.w	lr, [sp], #4
 8009258:	b003      	add	sp, #12
 800925a:	4770      	bx	lr
 800925c:	20000098 	.word	0x20000098

08009260 <__ascii_wctomb>:
 8009260:	b149      	cbz	r1, 8009276 <__ascii_wctomb+0x16>
 8009262:	2aff      	cmp	r2, #255	; 0xff
 8009264:	bf85      	ittet	hi
 8009266:	238a      	movhi	r3, #138	; 0x8a
 8009268:	6003      	strhi	r3, [r0, #0]
 800926a:	700a      	strbls	r2, [r1, #0]
 800926c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009270:	bf98      	it	ls
 8009272:	2001      	movls	r0, #1
 8009274:	4770      	bx	lr
 8009276:	4608      	mov	r0, r1
 8009278:	4770      	bx	lr

0800927a <abort>:
 800927a:	b508      	push	{r3, lr}
 800927c:	2006      	movs	r0, #6
 800927e:	f000 f82b 	bl	80092d8 <raise>
 8009282:	2001      	movs	r0, #1
 8009284:	f7f8 feea 	bl	800205c <_exit>

08009288 <_raise_r>:
 8009288:	291f      	cmp	r1, #31
 800928a:	b538      	push	{r3, r4, r5, lr}
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	d904      	bls.n	800929c <_raise_r+0x14>
 8009292:	2316      	movs	r3, #22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800929e:	b112      	cbz	r2, 80092a6 <_raise_r+0x1e>
 80092a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a4:	b94b      	cbnz	r3, 80092ba <_raise_r+0x32>
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 f830 	bl	800930c <_getpid_r>
 80092ac:	462a      	mov	r2, r5
 80092ae:	4601      	mov	r1, r0
 80092b0:	4620      	mov	r0, r4
 80092b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b6:	f000 b817 	b.w	80092e8 <_kill_r>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d00a      	beq.n	80092d4 <_raise_r+0x4c>
 80092be:	1c59      	adds	r1, r3, #1
 80092c0:	d103      	bne.n	80092ca <_raise_r+0x42>
 80092c2:	2316      	movs	r3, #22
 80092c4:	6003      	str	r3, [r0, #0]
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7e7      	b.n	800929a <_raise_r+0x12>
 80092ca:	2400      	movs	r4, #0
 80092cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092d0:	4628      	mov	r0, r5
 80092d2:	4798      	blx	r3
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7e0      	b.n	800929a <_raise_r+0x12>

080092d8 <raise>:
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <raise+0xc>)
 80092da:	4601      	mov	r1, r0
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f7ff bfd3 	b.w	8009288 <_raise_r>
 80092e2:	bf00      	nop
 80092e4:	20000098 	.word	0x20000098

080092e8 <_kill_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d07      	ldr	r5, [pc, #28]	; (8009308 <_kill_r+0x20>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f7f8 fea1 	bl	800203c <_kill>
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	d102      	bne.n	8009304 <_kill_r+0x1c>
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	b103      	cbz	r3, 8009304 <_kill_r+0x1c>
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	bd38      	pop	{r3, r4, r5, pc}
 8009306:	bf00      	nop
 8009308:	20000658 	.word	0x20000658

0800930c <_getpid_r>:
 800930c:	f7f8 be8e 	b.w	800202c <_getpid>

08009310 <_init>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	bf00      	nop
 8009314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009316:	bc08      	pop	{r3}
 8009318:	469e      	mov	lr, r3
 800931a:	4770      	bx	lr

0800931c <_fini>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	bf00      	nop
 8009320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009322:	bc08      	pop	{r3}
 8009324:	469e      	mov	lr, r3
 8009326:	4770      	bx	lr
